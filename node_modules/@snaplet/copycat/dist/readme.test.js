var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_promises = require("fs/promises");
var import_path = __toESM(require("path"));
var import_util = require("util");
var import_testutils = require("./testutils");
expect.extend({
  toHaveUpToDateExamples(source, results) {
    const missingResults = [];
    for (const name of Object.keys(results)) {
      const value = (0, import_util.inspect)(results[name], { depth: 10 });
      if (!source.includes(value)) {
        missingResults.push({
          name,
          value
        });
      }
    }
    if (missingResults.length) {
      return {
        message: () => [
          "Expected the following API TRANSFORMATIONS to have examples, but could not find them. Are they in the readme and up to date?",
          ...missingResults.map(({ name, value }) => `* ${name}: ${value}`)
        ].join("\n"),
        pass: false
      };
    }
    return {
      message: () => "Expected missing examples in readme",
      pass: true
    };
  }
});
test("readme examples are up to date", async () => {
  const readmeSource = (await (0, import_promises.readFile)(import_path.default.join(__dirname, "..", "README.md"))).toString();
  const results = {};
  const addResult = (name) => {
    results[name] = import_testutils.TRANSFORMATIONS[name]("foo");
  };
  Object.keys(import_testutils.TRANSFORMATIONS).forEach(addResult);
  expect(readmeSource).toHaveUpToDateExamples(results);
});
