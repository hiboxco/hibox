"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.controllers = void 0;
const api_1 = require("./controller/api");
const oauth_1 = require("./controller/oauth");
const db_1 = __importDefault(require("./db/db"));
const read_config_1 = __importDefault(require("./read-config"));
const defaultOpts = (opts) => {
    const newOpts = Object.assign({}, opts);
    if (!newOpts.externalUrl) {
        throw new Error('externalUrl is required');
    }
    if (!newOpts.samlPath) {
        throw new Error('samlPath is required');
    }
    newOpts.samlAudience = newOpts.samlAudience || 'https://saml.boxyhq.com';
    newOpts.preLoadedConfig = newOpts.preLoadedConfig || ''; // path to folder containing static SAML config that will be preloaded. This is useful for self-hosted deployments that only have to support a single tenant (or small number of known tenants).
    newOpts.idpEnabled = newOpts.idpEnabled === true;
    newOpts.db = newOpts.db || {};
    newOpts.db.engine = newOpts.db.engine || 'sql';
    newOpts.db.url = newOpts.db.url || 'postgresql://postgres:postgres@localhost:5432/postgres';
    newOpts.db.type = newOpts.db.type || 'postgres'; // Only needed if DB_ENGINE is sql.
    newOpts.db.ttl = (newOpts.db.ttl || 300) * 1; // TTL for the code, session and token stores (in seconds)
    newOpts.db.cleanupLimit = (newOpts.db.cleanupLimit || 1000) * 1; // Limit cleanup of TTL entries to this many items at a time
    return newOpts;
};
const controllers = (opts) => __awaiter(void 0, void 0, void 0, function* () {
    opts = defaultOpts(opts);
    const db = yield db_1.default.new(opts.db);
    const configStore = db.store('saml:config');
    const sessionStore = db.store('oauth:session', opts.db.ttl);
    const codeStore = db.store('oauth:code', opts.db.ttl);
    const tokenStore = db.store('oauth:token', opts.db.ttl);
    const apiController = new api_1.APIController({ configStore });
    const oauthController = new oauth_1.OAuthController({
        configStore,
        sessionStore,
        codeStore,
        tokenStore,
        opts,
    });
    // write pre-loaded config if present
    if (opts.preLoadedConfig && opts.preLoadedConfig.length > 0) {
        const configs = yield (0, read_config_1.default)(opts.preLoadedConfig);
        for (const config of configs) {
            yield apiController.config(config);
            console.log(`loaded config for tenant "${config.tenant}" and product "${config.product}"`);
        }
    }
    const type = opts.db.engine === 'sql' && opts.db.type ? ' Type: ' + opts.db.type : '';
    console.log(`Using engine: ${opts.db.engine}.${type}`);
    return {
        apiController,
        oauthController,
    };
});
exports.controllers = controllers;
exports.default = exports.controllers;
__exportStar(require("./typings"), exports);
