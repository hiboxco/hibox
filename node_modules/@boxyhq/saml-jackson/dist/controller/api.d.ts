import { IAPIController, IdPConfig, OAuth } from '../typings';
export declare class APIController implements IAPIController {
    private configStore;
    constructor({ configStore }: {
        configStore: any;
    });
    private _validateIdPConfig;
    /**
     * @swagger
     *
     * /api/v1/saml/config:
     *   post:
     *     summary: Create SAML configuration
     *     operationId: create-saml-config
     *     tags: [SAML Config]
     *     produces:
     *       - application/json
     *     consumes:
     *       - application/x-www-form-urlencoded
     *     parameters:
     *       - name: encodedRawMetadata
     *         description: Base64 encoding of the XML metadata
     *         in: formData
     *         required: true
     *         type: string
     *       - name: defaultRedirectUrl
     *         description: The redirect URL to use in the IdP login flow
     *         in: formData
     *         required: true
     *         type: string
     *         example: http://localhost:3000/login/saml
     *       - name: redirectUrl
     *         description: JSON encoded array containing a list of allowed redirect URLs
     *         in: formData
     *         required: true
     *         type: string
     *         example: '["http://localhost:3000/*"]'
     *       - name: tenant
     *         description: Tenant
     *         in: formData
     *         required: true
     *         type: string
     *         example: boxyhq.com
     *       - name: product
     *         description: Product
     *         in: formData
     *         required: true
     *         type: string
     *         example: demo
     *     responses:
     *       200:
     *         description: Success
     *         schema:
     *           type: object
     *           properties:
     *             client_id:
     *               type: string
     *             client_secret:
     *               type: string
     *             provider:
     *               type: string
     *           example:
     *             client_id: 8958e13053832b5af58fdf2ee83f35f5d013dc74
     *             client_secret: 13f01f4df5b01770c616e682d14d3ba23f20948cfa89b1d7
     *             type: accounts.google.com
     *       401:
     *         description: Unauthorized
     */
    config(body: IdPConfig): Promise<OAuth>;
    /**
     * @swagger
     *
     * /api/v1/saml/config:
     *   get:
     *     summary: Get SAML configuration
     *     operationId: get-saml-config
     *     tags:
     *       - SAML Config
     *     parameters:
     *       - in: query
     *         name: tenant
     *         type: string
     *         description: Tenant
     *         example: boxyhq.com
     *       - in: query
     *         name: product
     *         type: string
     *         description: Product
     *         example: demo
     *       - in: query
     *         name: clientID
     *         type: string
     *         description: Client ID
     *     responses:
     *       '200':
     *         description: Success
     *         schema:
     *           type: object
     *           properties:
     *             provider:
     *               type: string
     *           example:
     *             type: accounts.google.com
     *       '401':
     *         description: Unauthorized
     */
    getConfig(body: {
        clientID: string;
        tenant: string;
        product: string;
    }): Promise<Partial<OAuth>>;
    /**
     * @swagger
     * /api/v1/saml/config:
     *   delete:
     *     summary: Delete SAML configuration
     *     operationId: delete-saml-config
     *     tags:
     *       - SAML Config
     *     consumes:
     *       - application/x-www-form-urlencoded
     *     parameters:
     *       - name: clientID
     *         in: formData
     *         type: string
     *         required: true
     *         description: Client ID
     *       - name: clientSecret
     *         in: formData
     *         type: string
     *         required: true
     *         description: Client Secret
     *       - name: tenant
     *         in: formData
     *         type: string
     *         description: Tenant
     *         example: boxyhq.com
     *       - name: product
     *         in: formData
     *         type: string
     *         description: Product
     *         example: demo
     *     responses:
     *       '200':
     *         description: Success
     *       '401':
     *         description: Unauthorized
     */
    deleteConfig(body: {
        clientID: string;
        clientSecret: string;
        tenant: string;
        product: string;
    }): Promise<void>;
}
