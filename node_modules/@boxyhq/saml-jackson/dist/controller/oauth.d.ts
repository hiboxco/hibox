import { IOAuthController, OAuthReqBody, OAuthTokenReq, OAuthTokenRes, Profile, SAMLResponsePayload } from '../typings';
export declare class OAuthController implements IOAuthController {
    private configStore;
    private sessionStore;
    private codeStore;
    private tokenStore;
    private opts;
    constructor({ configStore, sessionStore, codeStore, tokenStore, opts }: {
        configStore: any;
        sessionStore: any;
        codeStore: any;
        tokenStore: any;
        opts: any;
    });
    authorize(body: OAuthReqBody): Promise<{
        redirect_url: string;
    }>;
    samlResponse(body: SAMLResponsePayload): Promise<{
        redirect_url: string;
    }>;
    /**
     * @swagger
     *
     * /oauth/token:
     *   post:
     *     summary: Code exchange
     *     operationId: oauth-code-exchange
     *     tags:
     *       - OAuth
     *     consumes:
     *       - application/x-www-form-urlencoded
     *     parameters:
     *       - name: grant_type
     *         in: formData
     *         type: string
     *         description: Grant type should be 'authorization_code'
     *         default: authorization_code
     *         required: true
     *       - name: client_id
     *         in: formData
     *         type: string
     *         description: Use the client_id returned by the SAML config API
     *         required: true
     *       - name: client_secret
     *         in: formData
     *         type: string
     *         description: Use the client_secret returned by the SAML config API
     *         required: true
     *       - name: redirect_uri
     *         in: formData
     *         type: string
     *         description: Redirect URI
     *         required: true
     *       - name: code
     *         in: formData
     *         type: string
     *         description: Code
     *         required: true
     *     responses:
     *       '200':
     *         description: Success
     *         schema:
     *           type: object
     *           properties:
     *             access_token:
     *               type: string
     *             token_type:
     *               type: string
     *             expires_in:
     *               type: string
     *           example:
     *             access_token: 8958e13053832b5af58fdf2ee83f35f5d013dc74
     *             token_type: bearer
     *             expires_in: 300
     */
    token(body: OAuthTokenReq): Promise<OAuthTokenRes>;
    /**
     * @swagger
     *
     * /oauth/userinfo:
     *   get:
     *     summary: Get profile
     *     operationId: oauth-get-profile
     *     tags:
     *       - OAuth
     *     responses:
     *       '200':
     *         description: Success
     *         schema:
     *           type: object
     *           properties:
     *             id:
     *               type: string
     *             email:
     *               type: string
     *             firstName:
     *               type: string
     *             lastName:
     *               type: string
     *           example:
     *             id: 32b5af58fdf
     *             email: jackson@coolstartup.com
     *             firstName: SAML
     *             lastName: Jackson
     */
    userInfo(token: string): Promise<Profile>;
}
