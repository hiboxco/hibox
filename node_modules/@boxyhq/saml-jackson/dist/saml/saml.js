"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const saml20_1 = __importDefault(require("@boxyhq/saml20"));
const xml2js_1 = __importDefault(require("xml2js"));
const thumbprint_1 = __importDefault(require("thumbprint"));
const xml_crypto_1 = __importDefault(require("xml-crypto"));
const rambda = __importStar(require("rambda"));
const xmlbuilder_1 = __importDefault(require("xmlbuilder"));
const crypto_1 = __importDefault(require("crypto"));
const claims_1 = __importDefault(require("./claims"));
const idPrefix = '_';
const authnXPath = '/*[local-name(.)="AuthnRequest" and namespace-uri(.)="urn:oasis:names:tc:SAML:2.0:protocol"]';
const issuerXPath = '/*[local-name(.)="Issuer" and namespace-uri(.)="urn:oasis:names:tc:SAML:2.0:assertion"]';
const signRequest = (xml, signingKey) => {
    if (!xml) {
        throw new Error('Please specify xml');
    }
    if (!signingKey) {
        throw new Error('Please specify signingKey');
    }
    const sig = new xml_crypto_1.default.SignedXml();
    sig.signatureAlgorithm = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256';
    sig.signingKey = signingKey;
    sig.addReference(authnXPath, ['http://www.w3.org/2000/09/xmldsig#enveloped-signature', 'http://www.w3.org/2001/10/xml-exc-c14n#'], 'http://www.w3.org/2001/04/xmlenc#sha256');
    sig.computeSignature(xml, {
        location: { reference: authnXPath + issuerXPath, action: 'after' },
    });
    return sig.getSignedXml();
};
const request = ({ ssoUrl, entityID, callbackUrl, isPassive = false, forceAuthn = false, identifierFormat = 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress', providerName = 'BoxyHQ', signingKey, }) => {
    const id = idPrefix + crypto_1.default.randomBytes(10).toString('hex');
    const date = new Date().toISOString();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const samlReq = {
        'samlp:AuthnRequest': {
            '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',
            '@ID': id,
            '@Version': '2.0',
            '@IssueInstant': date,
            '@ProtocolBinding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
            '@Destination': ssoUrl,
            'saml:Issuer': {
                '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',
                '#text': entityID,
            },
        },
    };
    if (isPassive)
        samlReq['samlp:AuthnRequest']['@IsPassive'] = true;
    if (forceAuthn) {
        samlReq['samlp:AuthnRequest']['@ForceAuthn'] = true;
    }
    samlReq['samlp:AuthnRequest']['@AssertionConsumerServiceURL'] = callbackUrl;
    samlReq['samlp:AuthnRequest']['samlp:NameIDPolicy'] = {
        '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',
        '@Format': identifierFormat,
        '@AllowCreate': 'true',
    };
    if (providerName != null) {
        samlReq['samlp:AuthnRequest']['@ProviderName'] = providerName;
    }
    let xml = xmlbuilder_1.default.create(samlReq).end({});
    if (signingKey) {
        xml = signRequest(xml, signingKey);
    }
    return {
        id,
        request: xml,
    };
};
const parseAsync = (rawAssertion) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        saml20_1.default.parse(rawAssertion, function onParseAsync(err, profile) {
            if (err) {
                reject(err);
                return;
            }
            resolve(profile);
        });
    });
});
const validateAsync = (rawAssertion, options) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        saml20_1.default.validate(rawAssertion, options, function onValidateAsync(err, profile) {
            if (err) {
                reject(err);
                return;
            }
            if (profile && profile.claims) {
                // we map claims to our attributes id, email, firstName, lastName where possible. We also map original claims to raw
                profile.claims = claims_1.default.map(profile.claims);
                // some providers don't return the id in the assertion, we set it to a sha256 hash of the email
                if (!profile.claims.id) {
                    profile.claims.id = crypto_1.default.createHash('sha256').update(profile.claims.email).digest('hex');
                }
            }
            resolve(profile);
        });
    });
});
const parseMetadataAsync = (idpMeta) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        xml2js_1.default.parseString(idpMeta, { tagNameProcessors: [xml2js_1.default.processors.stripPrefix] }, (err, res) => {
            if (err) {
                reject(err);
                return;
            }
            const entityID = rambda.path('EntityDescriptor.$.entityID', res);
            let X509Certificate = null;
            let ssoPostUrl = null;
            let ssoRedirectUrl = null;
            let loginType = 'idp';
            let ssoDes = rambda.pathOr(null, 'EntityDescriptor.IDPSSODescriptor', res);
            if (!ssoDes) {
                ssoDes = rambda.pathOr([], 'EntityDescriptor.SPSSODescriptor', res);
                if (!ssoDes) {
                    loginType = 'sp';
                }
            }
            for (const ssoDesRec of ssoDes) {
                const keyDes = ssoDesRec['KeyDescriptor'];
                for (const keyDesRec of keyDes) {
                    if (keyDesRec['$'] && keyDesRec['$'].use === 'signing') {
                        const ki = keyDesRec['KeyInfo'][0];
                        const cd = ki['X509Data'][0];
                        X509Certificate = cd['X509Certificate'][0];
                    }
                }
                const ssoSvc = ssoDesRec['SingleSignOnService'] || ssoDesRec['AssertionConsumerService'] || [];
                for (const ssoSvcRec of ssoSvc) {
                    if (rambda.pathOr('', '$.Binding', ssoSvcRec).endsWith('HTTP-POST')) {
                        ssoPostUrl = rambda.path('$.Location', ssoSvcRec);
                    }
                    else if (rambda.pathOr('', '$.Binding', ssoSvcRec).endsWith('HTTP-Redirect')) {
                        ssoRedirectUrl = rambda.path('$.Location', ssoSvcRec);
                    }
                }
            }
            const ret = {
                sso: {},
            };
            if (entityID) {
                ret.entityID = entityID;
            }
            if (X509Certificate) {
                ret.thumbprint = thumbprint_1.default.calculate(X509Certificate);
            }
            if (ssoPostUrl) {
                ret.sso.postUrl = ssoPostUrl;
            }
            if (ssoRedirectUrl) {
                ret.sso.redirectUrl = ssoRedirectUrl;
            }
            ret.loginType = loginType;
            resolve(ret);
        });
    });
});
exports.default = { request, parseAsync, validateAsync, parseMetadataAsync };
