"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const x509 = __importStar(require("@peculiar/x509"));
const webcrypto_1 = require("@peculiar/webcrypto");
const crypto = new webcrypto_1.Crypto();
x509.cryptoProvider.set(crypto);
const alg = {
    name: 'RSASSA-PKCS1-v1_5',
    hash: 'SHA-256',
    publicExponent: new Uint8Array([1, 0, 1]),
    modulusLength: 2048,
};
const generate = () => __awaiter(void 0, void 0, void 0, function* () {
    const keys = yield crypto.subtle.generateKey(alg, true, ['sign', 'verify']);
    const extensions = [new x509.BasicConstraintsExtension(false, undefined, true)];
    extensions.push(new x509.KeyUsagesExtension(x509.KeyUsageFlags.digitalSignature, true));
    if (keys.publicKey) {
        extensions.push(yield x509.SubjectKeyIdentifierExtension.create(keys.publicKey));
    }
    const cert = yield x509.X509CertificateGenerator.createSelfSigned({
        serialNumber: '01',
        name: 'CN=BoxyHQ Jackson',
        notBefore: new Date(),
        notAfter: new Date('3021/01/01'),
        signingAlgorithm: alg,
        keys: keys,
        extensions,
    });
    if (keys.privateKey) {
        const pkcs8 = yield crypto.subtle.exportKey('pkcs8', keys.privateKey);
        return {
            publicKey: cert.toString('pem'),
            privateKey: x509.PemConverter.encode(pkcs8, 'private key'),
        };
    }
});
exports.default = {
    generate,
};
