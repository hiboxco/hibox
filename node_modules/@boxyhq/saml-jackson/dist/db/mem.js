"use strict";
// This is an in-memory implementation to be used with testing and prototyping only
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dbutils = __importStar(require("./utils"));
class Mem {
    constructor(options) {
        this.options = options;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.store = {}; // map of key, value
            this.indexes = {}; // map of key, Set
            this.cleanup = {}; // map of indexes for cleanup when store key is deleted
            this.ttlStore = {}; // map of key to ttl
            if (this.options.ttl) {
                this.ttlCleanup = () => __awaiter(this, void 0, void 0, function* () {
                    const now = Date.now();
                    for (const k in this.ttlStore) {
                        if (this.ttlStore[k].expiresAt < now) {
                            yield this.delete(this.ttlStore[k].namespace, this.ttlStore[k].key);
                        }
                    }
                    if (this.options.ttl) {
                        this.timerId = setTimeout(this.ttlCleanup, this.options.ttl * 1000);
                    }
                });
                this.timerId = setTimeout(this.ttlCleanup, this.options.ttl * 1000);
            }
            return this;
        });
    }
    get(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = this.store[dbutils.key(namespace, key)];
            if (res) {
                return res;
            }
            return null;
        });
    }
    getByIndex(namespace, idx) {
        return __awaiter(this, void 0, void 0, function* () {
            const dbKeys = yield this.indexes[dbutils.keyForIndex(namespace, idx)];
            const ret = [];
            for (const dbKey of dbKeys || []) {
                ret.push(yield this.get(namespace, dbKey));
            }
            return ret;
        });
    }
    put(namespace, key, val, ttl = 0, ...indexes) {
        return __awaiter(this, void 0, void 0, function* () {
            const k = dbutils.key(namespace, key);
            this.store[k] = val;
            if (ttl) {
                this.ttlStore[k] = {
                    namespace,
                    key,
                    expiresAt: Date.now() + ttl * 1000,
                };
            }
            // no ttl support for secondary indexes
            for (const idx of indexes || []) {
                const idxKey = dbutils.keyForIndex(namespace, idx);
                let set = this.indexes[idxKey];
                if (!set) {
                    set = new Set();
                    this.indexes[idxKey] = set;
                }
                set.add(key);
                const cleanupKey = dbutils.keyFromParts(dbutils.indexPrefix, k);
                let cleanup = this.cleanup[cleanupKey];
                if (!cleanup) {
                    cleanup = new Set();
                    this.cleanup[cleanupKey] = cleanup;
                }
                cleanup.add(idxKey);
            }
        });
    }
    delete(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const k = dbutils.key(namespace, key);
            delete this.store[k];
            const idxKey = dbutils.keyFromParts(dbutils.indexPrefix, k);
            // delete secondary indexes and then the mapping of the seconary indexes
            const dbKeys = this.cleanup[idxKey];
            for (const dbKey of dbKeys || []) {
                this.indexes[dbKey] && this.indexes[dbKey].delete(key);
            }
            delete this.cleanup[idxKey];
            delete this.ttlStore[k];
        });
    }
}
exports.default = {
    new: (options) => __awaiter(void 0, void 0, void 0, function* () {
        return yield new Mem(options).init();
    }),
};
