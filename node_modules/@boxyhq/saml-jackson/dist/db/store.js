"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dbutils = __importStar(require("./utils"));
class Store {
    constructor(namespace, db, ttl = 0) {
        this.namespace = namespace;
        this.db = db;
        this.ttl = ttl;
    }
    get(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.db.get(this.namespace, dbutils.keyDigest(key));
        });
    }
    getByIndex(idx) {
        return __awaiter(this, void 0, void 0, function* () {
            idx.value = dbutils.keyDigest(idx.value);
            return yield this.db.getByIndex(this.namespace, idx);
        });
    }
    put(key, val, ...indexes) {
        return __awaiter(this, void 0, void 0, function* () {
            indexes = (indexes || []).map((idx) => {
                idx.value = dbutils.keyDigest(idx.value);
                return idx;
            });
            return yield this.db.put(this.namespace, dbutils.keyDigest(key), val, this.ttl, ...indexes);
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.db.delete(this.namespace, dbutils.keyDigest(key));
        });
    }
}
exports.default = {
    new: (namespace, db, ttl = 0) => {
        return new Store(namespace, db, ttl);
    },
};
