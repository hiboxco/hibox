"use strict";
/*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require('reflect-metadata');
const typeorm_1 = require("typeorm");
const dbutils = __importStar(require("../utils"));
const JacksonStore_1 = require("./entity/JacksonStore");
const JacksonIndex_1 = require("./entity/JacksonIndex");
const JacksonTTL_1 = require("./entity/JacksonTTL");
class Sql {
    constructor(options) {
        this.options = options;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                try {
                    this.connection = yield (0, typeorm_1.createConnection)({
                        name: this.options.type + Math.floor(Math.random() * 100000),
                        type: this.options.type,
                        url: this.options.url,
                        synchronize: true,
                        migrationsTableName: '_jackson_migrations',
                        logging: ['error'],
                        entities: [JacksonStore_1.JacksonStore, JacksonIndex_1.JacksonIndex, JacksonTTL_1.JacksonTTL],
                    });
                    break;
                }
                catch (err) {
                    console.error(`error connecting to ${this.options.type} db: ${err}`);
                    yield dbutils.sleep(1000);
                    continue;
                }
            }
            this.storeRepository = this.connection.getRepository(JacksonStore_1.JacksonStore);
            this.indexRepository = this.connection.getRepository(JacksonIndex_1.JacksonIndex);
            this.ttlRepository = this.connection.getRepository(JacksonTTL_1.JacksonTTL);
            if (this.options.ttl && this.options.cleanupLimit) {
                this.ttlCleanup = () => __awaiter(this, void 0, void 0, function* () {
                    const now = Date.now();
                    while (true) {
                        const ids = yield this.ttlRepository
                            .createQueryBuilder('jackson_ttl')
                            .limit(this.options.cleanupLimit)
                            .where('jackson_ttl.expiresAt <= :expiresAt', {
                            expiresAt: now,
                        })
                            .getMany();
                        if (ids.length <= 0) {
                            break;
                        }
                        const delIds = ids.map((id) => {
                            return id.key;
                        });
                        yield this.storeRepository.remove(ids);
                        yield this.ttlRepository.delete(delIds);
                    }
                    this.timerId = setTimeout(this.ttlCleanup, this.options.ttl * 1000);
                });
                this.timerId = setTimeout(this.ttlCleanup, this.options.ttl * 1000);
            }
            else {
                console.log('Warning: ttl cleanup not enabled, set both "ttl" and "cleanupLimit" options to enable it!');
            }
            return this;
        });
    }
    get(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield this.storeRepository.findOne({
                key: dbutils.key(namespace, key),
            });
            if (res && res.value) {
                return {
                    value: res.value,
                    iv: res.iv,
                    tag: res.tag,
                };
            }
            return null;
        });
    }
    getByIndex(namespace, idx) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.indexRepository.find({
                key: dbutils.keyForIndex(namespace, idx),
            });
            const ret = [];
            if (res) {
                res.forEach((r) => {
                    ret.push({
                        value: r.store.value,
                        iv: r.store.iv,
                        tag: r.store.tag,
                    });
                });
            }
            return ret;
        });
    }
    put(namespace, key, val, ttl = 0, ...indexes) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.connection.transaction((transactionalEntityManager) => __awaiter(this, void 0, void 0, function* () {
                const dbKey = dbutils.key(namespace, key);
                const store = new JacksonStore_1.JacksonStore();
                store.key = dbKey;
                store.value = val.value;
                store.iv = val.iv;
                store.tag = val.tag;
                yield transactionalEntityManager.save(store);
                if (ttl) {
                    const ttlRec = new JacksonTTL_1.JacksonTTL();
                    ttlRec.key = dbKey;
                    ttlRec.expiresAt = Date.now() + ttl * 1000;
                    yield transactionalEntityManager.save(ttlRec);
                }
                // no ttl support for secondary indexes
                for (const idx of indexes || []) {
                    const key = dbutils.keyForIndex(namespace, idx);
                    const rec = yield this.indexRepository.findOne({
                        key,
                        storeKey: store.key,
                    });
                    if (!rec) {
                        const ji = new JacksonIndex_1.JacksonIndex();
                        ji.key = key;
                        ji.store = store;
                        yield transactionalEntityManager.save(ji);
                    }
                }
            }));
        });
    }
    delete(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.storeRepository.remove({
                key: dbutils.key(namespace, key),
            });
        });
    }
}
exports.default = {
    new: (options) => __awaiter(void 0, void 0, void 0, function* () {
        return yield new Sql(options).init();
    }),
};
