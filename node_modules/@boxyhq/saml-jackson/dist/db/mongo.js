"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
const dbutils = __importStar(require("./utils"));
class Mongo {
    constructor(options) {
        this.options = options;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            this.client = new mongodb_1.MongoClient(this.options.url);
            yield this.client.connect();
            this.db = this.client.db();
            this.collection = this.db.collection('jacksonStore');
            yield this.collection.createIndex({ indexes: 1 });
            yield this.collection.createIndex({ expiresAt: 1 }, { expireAfterSeconds: 1 });
            return this;
        });
    }
    get(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.collection.findOne({
                _id: dbutils.key(namespace, key),
            });
            if (res && res.value) {
                return res.value;
            }
            return null;
        });
    }
    getByIndex(namespace, idx) {
        return __awaiter(this, void 0, void 0, function* () {
            const docs = yield this.collection
                .find({
                indexes: dbutils.keyForIndex(namespace, idx),
            })
                .toArray();
            const ret = [];
            for (const doc of docs || []) {
                ret.push(doc.value);
            }
            return ret;
        });
    }
    put(namespace, key, val, ttl = 0, ...indexes) {
        return __awaiter(this, void 0, void 0, function* () {
            const doc = {
                value: val,
            };
            if (ttl) {
                doc.expiresAt = new Date(Date.now() + ttl * 1000);
            }
            // no ttl support for secondary indexes
            for (const idx of indexes || []) {
                const idxKey = dbutils.keyForIndex(namespace, idx);
                if (!doc.indexes) {
                    doc.indexes = [];
                }
                doc.indexes.push(idxKey);
            }
            yield this.collection.updateOne({ _id: dbutils.key(namespace, key) }, {
                $set: doc,
            }, { upsert: true });
        });
    }
    delete(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.collection.deleteOne({
                _id: dbutils.key(namespace, key),
            });
        });
    }
}
exports.default = {
    new: (options) => __awaiter(void 0, void 0, void 0, function* () {
        return yield new Mongo(options).init();
    }),
};
