"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const encrypter = __importStar(require("./encrypter"));
const mem_1 = __importDefault(require("./mem"));
const mongo_1 = __importDefault(require("./mongo"));
const redis_1 = __importDefault(require("./redis"));
const sql_1 = __importDefault(require("./sql/sql"));
const store_1 = __importDefault(require("./store"));
const decrypt = (res, encryptionKey) => {
    if (res.iv && res.tag) {
        return JSON.parse(encrypter.decrypt(res.value, res.iv, res.tag, encryptionKey));
    }
    return JSON.parse(res.value);
};
class DB {
    constructor(db, encryptionKey) {
        this.db = db;
        this.encryptionKey = encryptionKey;
    }
    get(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.db.get(namespace, key);
            if (!res) {
                return null;
            }
            return decrypt(res, this.encryptionKey);
        });
    }
    getByIndex(namespace, idx) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.db.getByIndex(namespace, idx);
            const encryptionKey = this.encryptionKey;
            return res.map((r) => {
                return decrypt(r, encryptionKey);
            });
        });
    }
    // ttl is in seconds
    put(namespace, key, val, ttl = 0, ...indexes) {
        return __awaiter(this, void 0, void 0, function* () {
            if (ttl > 0 && indexes && indexes.length > 0) {
                throw new Error('secondary indexes not allow on a store with ttl');
            }
            const dbVal = this.encryptionKey
                ? encrypter.encrypt(JSON.stringify(val), this.encryptionKey)
                : { value: JSON.stringify(val) };
            return yield this.db.put(namespace, key, dbVal, ttl, ...indexes);
        });
    }
    delete(namespace, key) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.db.delete(namespace, key);
        });
    }
    store(namespace, ttl = 0) {
        return store_1.default.new(namespace, this, ttl);
    }
}
exports.default = {
    new: (options) => __awaiter(void 0, void 0, void 0, function* () {
        const encryptionKey = options.encryptionKey ? Buffer.from(options.encryptionKey, 'latin1') : null;
        switch (options.engine) {
            case 'redis':
                return new DB(yield redis_1.default.new(options), encryptionKey);
            case 'sql':
                return new DB(yield sql_1.default.new(options), encryptionKey);
            case 'mongo':
                return new DB(yield mongo_1.default.new(options), encryptionKey);
            case 'mem':
                return new DB(yield mem_1.default.new(options), encryptionKey);
            default:
                throw new Error('unsupported db engine: ' + options.engine);
        }
    }),
};
