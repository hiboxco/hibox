"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VitalClient = void 0;
var axios_1 = require("axios");
var axios_retry_1 = require("axios-retry");
var client_1 = require("./client");
var config_1 = require("./lib/config");
var credentials_1 = require("./lib/credentials");
var Vitals_1 = require("./client/Vitals");
var Provider_1 = require("./client/Provider");
var VitalClient = /** @class */ (function () {
    function VitalClient(config) {
        var _this = this;
        this.config = config;
        if (!config.api_key) {
            try {
                this.clientCredentials = new credentials_1.ClientCredentials(config);
            }
            catch (error) {
                throw new Error("You must provide either an API key or a client ID and secret");
            }
        }
        var baseURL;
        if (this.config.region && this.config.region === 'eu') {
            baseURL = config_1.default.baseEUUrls[config.environment];
        }
        else {
            baseURL = config_1.default.baseUrls[config.environment];
        }
        var axiosApiInstance = axios_1.default.create();
        axios_retry_1.default(axiosApiInstance, {
            retries: 3,
            retryDelay: axios_retry_1.default.exponentialDelay,
        });
        axiosApiInstance.interceptors.request.use(function (config) { return __awaiter(_this, void 0, void 0, function () {
            var headers, token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers = config.headers;
                        if (!this.config.api_key) return [3 /*break*/, 1];
                        headers["x-vital-api-key"] = this.config.api_key;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.clientCredentials.access_token()];
                    case 2:
                        token = _a.sent();
                        headers["Authorization"] = "Bearer " + token;
                        headers["x-vital-client-id"] = this.config.client_id;
                        _a.label = 3;
                    case 3:
                        config.headers = __assign({}, headers);
                        return [2 /*return*/, config];
                }
            });
        }); }, function (error) {
            Promise.reject(error);
        });
        // Hook APIS
        this.Activity = new client_1.ActivityApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Link = new client_1.LinkApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Body = new client_1.BodyApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Sleep = new client_1.SleepApi(baseURL.concat('/v2'), axiosApiInstance);
        this.User = new client_1.UserApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Workouts = new client_1.WorkoutsApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Webhooks = new client_1.WebhooksApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Vitals = new Vitals_1.VitalsApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Testkits = new client_1.TestkitsApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Profile = new client_1.ProfileApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Providers = new Provider_1.ProviderApi(baseURL.concat('/v2'), axiosApiInstance);
        this.Devices = new client_1.DevicesAPI(baseURL.concat('/v2'), axiosApiInstance);
    }
    return VitalClient;
}());
exports.VitalClient = VitalClient;
