"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./ApplicationIn"), exports);
__exportStar(require("./ApplicationOut"), exports);
__exportStar(require("./AttemptStatisticsData"), exports);
__exportStar(require("./AttemptStatisticsResponse"), exports);
__exportStar(require("./BorderRadiusConfig"), exports);
__exportStar(require("./BorderRadiusEnum"), exports);
__exportStar(require("./CustomThemeOverride"), exports);
__exportStar(require("./DashboardAccessOut"), exports);
__exportStar(require("./EndpointCreatedEvent"), exports);
__exportStar(require("./EndpointCreatedEventData"), exports);
__exportStar(require("./EndpointDeletedEvent"), exports);
__exportStar(require("./EndpointDeletedEventData"), exports);
__exportStar(require("./EndpointDisabledEvent"), exports);
__exportStar(require("./EndpointDisabledEventData"), exports);
__exportStar(require("./EndpointHeadersIn"), exports);
__exportStar(require("./EndpointHeadersOut"), exports);
__exportStar(require("./EndpointIn"), exports);
__exportStar(require("./EndpointMessageOut"), exports);
__exportStar(require("./EndpointOut"), exports);
__exportStar(require("./EndpointSecretOut"), exports);
__exportStar(require("./EndpointSecretRotateIn"), exports);
__exportStar(require("./EndpointStats"), exports);
__exportStar(require("./EndpointUpdate"), exports);
__exportStar(require("./EndpointUpdatedEvent"), exports);
__exportStar(require("./EndpointUpdatedEventData"), exports);
__exportStar(require("./EventExampleIn"), exports);
__exportStar(require("./EventTypeExampleOut"), exports);
__exportStar(require("./EventTypeIn"), exports);
__exportStar(require("./EventTypeOut"), exports);
__exportStar(require("./EventTypeSchemaIn"), exports);
__exportStar(require("./EventTypeUpdate"), exports);
__exportStar(require("./ExportOrganizationOut"), exports);
__exportStar(require("./FontSizeConfig"), exports);
__exportStar(require("./HTTPValidationError"), exports);
__exportStar(require("./HttpErrorOut"), exports);
__exportStar(require("./ImportOrganizationIn"), exports);
__exportStar(require("./ListResponseApplicationOut"), exports);
__exportStar(require("./ListResponseEndpointMessageOut"), exports);
__exportStar(require("./ListResponseEndpointOut"), exports);
__exportStar(require("./ListResponseEventTypeOut"), exports);
__exportStar(require("./ListResponseMessageAttemptEndpointOut"), exports);
__exportStar(require("./ListResponseMessageAttemptOut"), exports);
__exportStar(require("./ListResponseMessageEndpointOut"), exports);
__exportStar(require("./ListResponseMessageOut"), exports);
__exportStar(require("./MessageAttemptEndpointOut"), exports);
__exportStar(require("./MessageAttemptExhaustedEvent"), exports);
__exportStar(require("./MessageAttemptExhaustedEventData"), exports);
__exportStar(require("./MessageAttemptFailedEvent"), exports);
__exportStar(require("./MessageAttemptOut"), exports);
__exportStar(require("./MessageAttemptTriggerType"), exports);
__exportStar(require("./MessageEndpointOut"), exports);
__exportStar(require("./MessageIn"), exports);
__exportStar(require("./MessageOut"), exports);
__exportStar(require("./MessageStatus"), exports);
__exportStar(require("./PortalSettingsOut"), exports);
__exportStar(require("./RecoverIn"), exports);
__exportStar(require("./SettingsIn"), exports);
__exportStar(require("./SettingsOut"), exports);
__exportStar(require("./StatisticsPeriod"), exports);
__exportStar(require("./ValidationError"), exports);
__exportStar(require("./WebhookTypes"), exports);
const ApplicationIn_1 = require("./ApplicationIn");
const ApplicationOut_1 = require("./ApplicationOut");
const AttemptStatisticsData_1 = require("./AttemptStatisticsData");
const AttemptStatisticsResponse_1 = require("./AttemptStatisticsResponse");
const BorderRadiusConfig_1 = require("./BorderRadiusConfig");
const CustomThemeOverride_1 = require("./CustomThemeOverride");
const DashboardAccessOut_1 = require("./DashboardAccessOut");
const EndpointCreatedEvent_1 = require("./EndpointCreatedEvent");
const EndpointCreatedEventData_1 = require("./EndpointCreatedEventData");
const EndpointDeletedEvent_1 = require("./EndpointDeletedEvent");
const EndpointDeletedEventData_1 = require("./EndpointDeletedEventData");
const EndpointDisabledEvent_1 = require("./EndpointDisabledEvent");
const EndpointDisabledEventData_1 = require("./EndpointDisabledEventData");
const EndpointHeadersIn_1 = require("./EndpointHeadersIn");
const EndpointHeadersOut_1 = require("./EndpointHeadersOut");
const EndpointIn_1 = require("./EndpointIn");
const EndpointMessageOut_1 = require("./EndpointMessageOut");
const EndpointOut_1 = require("./EndpointOut");
const EndpointSecretOut_1 = require("./EndpointSecretOut");
const EndpointSecretRotateIn_1 = require("./EndpointSecretRotateIn");
const EndpointStats_1 = require("./EndpointStats");
const EndpointUpdate_1 = require("./EndpointUpdate");
const EndpointUpdatedEvent_1 = require("./EndpointUpdatedEvent");
const EndpointUpdatedEventData_1 = require("./EndpointUpdatedEventData");
const EventExampleIn_1 = require("./EventExampleIn");
const EventTypeExampleOut_1 = require("./EventTypeExampleOut");
const EventTypeIn_1 = require("./EventTypeIn");
const EventTypeOut_1 = require("./EventTypeOut");
const EventTypeSchemaIn_1 = require("./EventTypeSchemaIn");
const EventTypeUpdate_1 = require("./EventTypeUpdate");
const ExportOrganizationOut_1 = require("./ExportOrganizationOut");
const FontSizeConfig_1 = require("./FontSizeConfig");
const HTTPValidationError_1 = require("./HTTPValidationError");
const HttpErrorOut_1 = require("./HttpErrorOut");
const ImportOrganizationIn_1 = require("./ImportOrganizationIn");
const ListResponseApplicationOut_1 = require("./ListResponseApplicationOut");
const ListResponseEndpointMessageOut_1 = require("./ListResponseEndpointMessageOut");
const ListResponseEndpointOut_1 = require("./ListResponseEndpointOut");
const ListResponseEventTypeOut_1 = require("./ListResponseEventTypeOut");
const ListResponseMessageAttemptEndpointOut_1 = require("./ListResponseMessageAttemptEndpointOut");
const ListResponseMessageAttemptOut_1 = require("./ListResponseMessageAttemptOut");
const ListResponseMessageEndpointOut_1 = require("./ListResponseMessageEndpointOut");
const ListResponseMessageOut_1 = require("./ListResponseMessageOut");
const MessageAttemptEndpointOut_1 = require("./MessageAttemptEndpointOut");
const MessageAttemptExhaustedEvent_1 = require("./MessageAttemptExhaustedEvent");
const MessageAttemptExhaustedEventData_1 = require("./MessageAttemptExhaustedEventData");
const MessageAttemptFailedEvent_1 = require("./MessageAttemptFailedEvent");
const MessageAttemptOut_1 = require("./MessageAttemptOut");
const MessageEndpointOut_1 = require("./MessageEndpointOut");
const MessageIn_1 = require("./MessageIn");
const MessageOut_1 = require("./MessageOut");
const PortalSettingsOut_1 = require("./PortalSettingsOut");
const RecoverIn_1 = require("./RecoverIn");
const SettingsIn_1 = require("./SettingsIn");
const SettingsOut_1 = require("./SettingsOut");
const ValidationError_1 = require("./ValidationError");
const WebhookTypes_1 = require("./WebhookTypes");
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
const supportedMediaTypes = {
    "application/json": Infinity,
    "application/octet-stream": 0
};
let enumsMap = new Set([
    "BorderRadiusEnum",
    "EndpointCreatedEventTypeEnum",
    "EndpointDeletedEventTypeEnum",
    "EndpointDisabledEventTypeEnum",
    "EndpointUpdatedEventTypeEnum",
    "MessageAttemptExhaustedEventTypeEnum",
    "MessageAttemptTriggerType",
    "MessageStatus",
    "StatisticsPeriod",
]);
let typeMap = {
    "ApplicationIn": ApplicationIn_1.ApplicationIn,
    "ApplicationOut": ApplicationOut_1.ApplicationOut,
    "AttemptStatisticsData": AttemptStatisticsData_1.AttemptStatisticsData,
    "AttemptStatisticsResponse": AttemptStatisticsResponse_1.AttemptStatisticsResponse,
    "BorderRadiusConfig": BorderRadiusConfig_1.BorderRadiusConfig,
    "CustomThemeOverride": CustomThemeOverride_1.CustomThemeOverride,
    "DashboardAccessOut": DashboardAccessOut_1.DashboardAccessOut,
    "EndpointCreatedEvent": EndpointCreatedEvent_1.EndpointCreatedEvent,
    "EndpointCreatedEventData": EndpointCreatedEventData_1.EndpointCreatedEventData,
    "EndpointDeletedEvent": EndpointDeletedEvent_1.EndpointDeletedEvent,
    "EndpointDeletedEventData": EndpointDeletedEventData_1.EndpointDeletedEventData,
    "EndpointDisabledEvent": EndpointDisabledEvent_1.EndpointDisabledEvent,
    "EndpointDisabledEventData": EndpointDisabledEventData_1.EndpointDisabledEventData,
    "EndpointHeadersIn": EndpointHeadersIn_1.EndpointHeadersIn,
    "EndpointHeadersOut": EndpointHeadersOut_1.EndpointHeadersOut,
    "EndpointIn": EndpointIn_1.EndpointIn,
    "EndpointMessageOut": EndpointMessageOut_1.EndpointMessageOut,
    "EndpointOut": EndpointOut_1.EndpointOut,
    "EndpointSecretOut": EndpointSecretOut_1.EndpointSecretOut,
    "EndpointSecretRotateIn": EndpointSecretRotateIn_1.EndpointSecretRotateIn,
    "EndpointStats": EndpointStats_1.EndpointStats,
    "EndpointUpdate": EndpointUpdate_1.EndpointUpdate,
    "EndpointUpdatedEvent": EndpointUpdatedEvent_1.EndpointUpdatedEvent,
    "EndpointUpdatedEventData": EndpointUpdatedEventData_1.EndpointUpdatedEventData,
    "EventExampleIn": EventExampleIn_1.EventExampleIn,
    "EventTypeExampleOut": EventTypeExampleOut_1.EventTypeExampleOut,
    "EventTypeIn": EventTypeIn_1.EventTypeIn,
    "EventTypeOut": EventTypeOut_1.EventTypeOut,
    "EventTypeSchemaIn": EventTypeSchemaIn_1.EventTypeSchemaIn,
    "EventTypeUpdate": EventTypeUpdate_1.EventTypeUpdate,
    "ExportOrganizationOut": ExportOrganizationOut_1.ExportOrganizationOut,
    "FontSizeConfig": FontSizeConfig_1.FontSizeConfig,
    "HTTPValidationError": HTTPValidationError_1.HTTPValidationError,
    "HttpErrorOut": HttpErrorOut_1.HttpErrorOut,
    "ImportOrganizationIn": ImportOrganizationIn_1.ImportOrganizationIn,
    "ListResponseApplicationOut": ListResponseApplicationOut_1.ListResponseApplicationOut,
    "ListResponseEndpointMessageOut": ListResponseEndpointMessageOut_1.ListResponseEndpointMessageOut,
    "ListResponseEndpointOut": ListResponseEndpointOut_1.ListResponseEndpointOut,
    "ListResponseEventTypeOut": ListResponseEventTypeOut_1.ListResponseEventTypeOut,
    "ListResponseMessageAttemptEndpointOut": ListResponseMessageAttemptEndpointOut_1.ListResponseMessageAttemptEndpointOut,
    "ListResponseMessageAttemptOut": ListResponseMessageAttemptOut_1.ListResponseMessageAttemptOut,
    "ListResponseMessageEndpointOut": ListResponseMessageEndpointOut_1.ListResponseMessageEndpointOut,
    "ListResponseMessageOut": ListResponseMessageOut_1.ListResponseMessageOut,
    "MessageAttemptEndpointOut": MessageAttemptEndpointOut_1.MessageAttemptEndpointOut,
    "MessageAttemptExhaustedEvent": MessageAttemptExhaustedEvent_1.MessageAttemptExhaustedEvent,
    "MessageAttemptExhaustedEventData": MessageAttemptExhaustedEventData_1.MessageAttemptExhaustedEventData,
    "MessageAttemptFailedEvent": MessageAttemptFailedEvent_1.MessageAttemptFailedEvent,
    "MessageAttemptOut": MessageAttemptOut_1.MessageAttemptOut,
    "MessageEndpointOut": MessageEndpointOut_1.MessageEndpointOut,
    "MessageIn": MessageIn_1.MessageIn,
    "MessageOut": MessageOut_1.MessageOut,
    "PortalSettingsOut": PortalSettingsOut_1.PortalSettingsOut,
    "RecoverIn": RecoverIn_1.RecoverIn,
    "SettingsIn": SettingsIn_1.SettingsIn,
    "SettingsOut": SettingsOut_1.SettingsOut,
    "ValidationError": ValidationError_1.ValidationError,
    "WebhookTypes": WebhookTypes_1.WebhookTypes,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap.has(expectedType)) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType;
            }
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType;
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType;
                    }
                    else {
                        return expectedType;
                    }
                }
                else {
                    return expectedType;
                }
            }
        }
    }
    static serialize(data, type, format) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            if (format == "date") {
                let month = data.getMonth() + 1;
                month = month < 10 ? "0" + month.toString() : month.toString();
                let day = data.getDate();
                day = day < 10 ? "0" + day.toString() : day.toString();
                return data.getFullYear() + "-" + month + "-" + day;
            }
            else {
                return data.toISOString();
            }
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            type = this.findCorrectType(data, type);
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    static deserialize(data, type, format) {
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) {
            let subType = type.replace("Array<", "");
            subType = subType.substring(0, subType.length - 1);
            let transformedData = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType, format));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap.has(type)) {
                return data;
            }
            if (!typeMap[type]) {
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
            }
            return instance;
        }
    }
    static normalizeMediaType(mediaType) {
        if (mediaType === undefined) {
            return undefined;
        }
        return mediaType.split(";")[0].trim().toLowerCase();
    }
    static getPreferredMediaType(mediaTypes) {
        if (!mediaTypes) {
            return "application/json";
        }
        const normalMediaTypes = mediaTypes.map(this.normalizeMediaType);
        let selectedMediaType = undefined;
        let selectedRank = -Infinity;
        for (const mediaType of normalMediaTypes) {
            if (supportedMediaTypes[mediaType] > selectedRank) {
                selectedMediaType = mediaType;
                selectedRank = supportedMediaTypes[mediaType];
            }
        }
        if (selectedMediaType === undefined) {
            throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
        }
        return selectedMediaType;
    }
    static stringify(data, mediaType) {
        if (mediaType === "application/json") {
            return JSON.stringify(data);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
    }
    static parse(rawData, mediaType) {
        if (mediaType === undefined) {
            throw new Error("Cannot parse content. No Content-Type defined.");
        }
        if (mediaType === "application/json") {
            return JSON.parse(rawData);
        }
        throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.parse.");
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=ObjectSerializer.js.map