import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
export declare class ApplicationApiRequestFactory extends BaseAPIRequestFactory {
    createApplicationApiV1AppPost(applicationIn: ApplicationIn, _options?: Configuration): Promise<RequestContext>;
    deleteApplicationApiV1AppAppIdDelete(appId: string, _options?: Configuration): Promise<RequestContext>;
    getApplicationApiV1AppAppIdGet(appId: string, _options?: Configuration): Promise<RequestContext>;
    listApplicationsApiV1AppGet(iterator?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    updateApplicationApiV1AppAppIdPut(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Promise<RequestContext>;
}
export declare class ApplicationApiResponseProcessor {
    createApplicationApiV1AppPost(response: ResponseContext): Promise<ApplicationOut>;
    deleteApplicationApiV1AppAppIdDelete(response: ResponseContext): Promise<void>;
    getApplicationApiV1AppAppIdGet(response: ResponseContext): Promise<ApplicationOut>;
    listApplicationsApiV1AppGet(response: ResponseContext): Promise<ListResponseApplicationOut>;
    updateApplicationApiV1AppAppIdPut(response: ResponseContext): Promise<ApplicationOut>;
}
