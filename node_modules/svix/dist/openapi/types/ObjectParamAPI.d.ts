import { Configuration } from '../configuration';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportOrganizationOut } from '../models/ExportOrganizationOut';
import { ImportOrganizationIn } from '../models/ImportOrganizationIn';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageStatus } from '../models/MessageStatus';
import { PortalSettingsOut } from '../models/PortalSettingsOut';
import { RecoverIn } from '../models/RecoverIn';
import { ApplicationApiRequestFactory, ApplicationApiResponseProcessor } from "../apis/ApplicationApi";
export interface ApplicationApiCreateApplicationApiV1AppPostRequest {
    applicationIn: ApplicationIn;
}
export interface ApplicationApiDeleteApplicationApiV1AppAppIdDeleteRequest {
    appId: string;
}
export interface ApplicationApiGetApplicationApiV1AppAppIdGetRequest {
    appId: string;
}
export interface ApplicationApiListApplicationsApiV1AppGetRequest {
    iterator?: string;
    limit?: number;
}
export interface ApplicationApiUpdateApplicationApiV1AppAppIdPutRequest {
    appId: string;
    applicationIn: ApplicationIn;
}
export declare class ObjectApplicationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor);
    createApplicationApiV1AppPost(param: ApplicationApiCreateApplicationApiV1AppPostRequest, options?: Configuration): Promise<ApplicationOut>;
    deleteApplicationApiV1AppAppIdDelete(param: ApplicationApiDeleteApplicationApiV1AppAppIdDeleteRequest, options?: Configuration): Promise<void>;
    getApplicationApiV1AppAppIdGet(param: ApplicationApiGetApplicationApiV1AppAppIdGetRequest, options?: Configuration): Promise<ApplicationOut>;
    listApplicationsApiV1AppGet(param: ApplicationApiListApplicationsApiV1AppGetRequest, options?: Configuration): Promise<ListResponseApplicationOut>;
    updateApplicationApiV1AppAppIdPut(param: ApplicationApiUpdateApplicationApiV1AppAppIdPutRequest, options?: Configuration): Promise<ApplicationOut>;
}
import { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor } from "../apis/AuthenticationApi";
export interface AuthenticationApiGetDashboardAccessApiV1AuthDashboardAccessAppIdPostRequest {
    appId: string;
}
export interface AuthenticationApiLogoutApiV1AuthLogoutPostRequest {
}
export declare class ObjectAuthenticationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor);
    getDashboardAccessApiV1AuthDashboardAccessAppIdPost(param: AuthenticationApiGetDashboardAccessApiV1AuthDashboardAccessAppIdPostRequest, options?: Configuration): Promise<DashboardAccessOut>;
    logoutApiV1AuthLogoutPost(param: AuthenticationApiLogoutApiV1AuthLogoutPostRequest, options?: Configuration): Promise<void>;
}
import { EndpointApiRequestFactory, EndpointApiResponseProcessor } from "../apis/EndpointApi";
export interface EndpointApiCreateEndpointApiV1AppAppIdEndpointPostRequest {
    appId: string;
    endpointIn: EndpointIn;
}
export interface EndpointApiDeleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest {
    endpointId: string;
    appId: string;
}
export interface EndpointApiGetEndpointApiV1AppAppIdEndpointEndpointIdGetRequest {
    endpointId: string;
    appId: string;
}
export interface EndpointApiGetEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetRequest {
    endpointId: string;
    appId: string;
}
export interface EndpointApiGetEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest {
    endpointId: string;
    appId: string;
}
export interface EndpointApiGetEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest {
    endpointId: string;
    appId: string;
}
export interface EndpointApiListEndpointsApiV1AppAppIdEndpointGetRequest {
    appId: string;
    iterator?: string;
    limit?: number;
}
export interface EndpointApiPatchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchRequest {
    appId: string;
    endpointId: string;
    endpointHeadersIn: EndpointHeadersIn;
}
export interface EndpointApiRecoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostRequest {
    appId: string;
    endpointId: string;
    recoverIn: RecoverIn;
}
export interface EndpointApiRotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostRequest {
    endpointId: string;
    appId: string;
    endpointSecretRotateIn: EndpointSecretRotateIn;
}
export interface EndpointApiSendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostRequest {
    appId: string;
    endpointId: string;
    eventExampleIn: EventExampleIn;
}
export interface EndpointApiUpdateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest {
    endpointId: string;
    appId: string;
    endpointUpdate: EndpointUpdate;
}
export interface EndpointApiUpdateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutRequest {
    appId: string;
    endpointId: string;
    endpointHeadersIn: EndpointHeadersIn;
}
export declare class ObjectEndpointApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor);
    createEndpointApiV1AppAppIdEndpointPost(param: EndpointApiCreateEndpointApiV1AppAppIdEndpointPostRequest, options?: Configuration): Promise<EndpointOut>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(param: EndpointApiDeleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest, options?: Configuration): Promise<void>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(param: EndpointApiGetEndpointApiV1AppAppIdEndpointEndpointIdGetRequest, options?: Configuration): Promise<EndpointOut>;
    getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(param: EndpointApiGetEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetRequest, options?: Configuration): Promise<EndpointHeadersOut>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(param: EndpointApiGetEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest, options?: Configuration): Promise<EndpointSecretOut>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(param: EndpointApiGetEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest, options?: Configuration): Promise<EndpointStats>;
    listEndpointsApiV1AppAppIdEndpointGet(param: EndpointApiListEndpointsApiV1AppAppIdEndpointGetRequest, options?: Configuration): Promise<ListResponseEndpointOut>;
    patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(param: EndpointApiPatchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchRequest, options?: Configuration): Promise<void>;
    recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(param: EndpointApiRecoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostRequest, options?: Configuration): Promise<any>;
    rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(param: EndpointApiRotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostRequest, options?: Configuration): Promise<void>;
    sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(param: EndpointApiSendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePostRequest, options?: Configuration): Promise<MessageOut>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(param: EndpointApiUpdateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest, options?: Configuration): Promise<EndpointOut>;
    updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(param: EndpointApiUpdateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutRequest, options?: Configuration): Promise<void>;
}
import { EventTypeApiRequestFactory, EventTypeApiResponseProcessor } from "../apis/EventTypeApi";
export interface EventTypeApiCreateEventTypeApiV1EventTypePostRequest {
    eventTypeIn: EventTypeIn;
}
export interface EventTypeApiDeleteEventTypeApiV1EventTypeEventTypeNameDeleteRequest {
    eventTypeName: string;
}
export interface EventTypeApiGenerateSchemaExampleApiV1EventTypeSchemaGenerateExamplePostRequest {
    eventTypeSchemaIn: EventTypeSchemaIn;
}
export interface EventTypeApiGetEventTypeApiV1EventTypeEventTypeNameGetRequest {
    eventTypeName: string;
}
export interface EventTypeApiListEventTypesApiV1EventTypeGetRequest {
    iterator?: string;
    limit?: number;
    withContent?: boolean;
    includeArchived?: boolean;
}
export interface EventTypeApiUpdateEventTypeApiV1EventTypeEventTypeNamePutRequest {
    eventTypeName: string;
    eventTypeUpdate: EventTypeUpdate;
}
export declare class ObjectEventTypeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor);
    createEventTypeApiV1EventTypePost(param: EventTypeApiCreateEventTypeApiV1EventTypePostRequest, options?: Configuration): Promise<EventTypeOut>;
    deleteEventTypeApiV1EventTypeEventTypeNameDelete(param: EventTypeApiDeleteEventTypeApiV1EventTypeEventTypeNameDeleteRequest, options?: Configuration): Promise<void>;
    generateSchemaExampleApiV1EventTypeSchemaGenerateExamplePost(param: EventTypeApiGenerateSchemaExampleApiV1EventTypeSchemaGenerateExamplePostRequest, options?: Configuration): Promise<EventTypeExampleOut>;
    getEventTypeApiV1EventTypeEventTypeNameGet(param: EventTypeApiGetEventTypeApiV1EventTypeEventTypeNameGetRequest, options?: Configuration): Promise<EventTypeOut>;
    listEventTypesApiV1EventTypeGet(param: EventTypeApiListEventTypesApiV1EventTypeGetRequest, options?: Configuration): Promise<ListResponseEventTypeOut>;
    updateEventTypeApiV1EventTypeEventTypeNamePut(param: EventTypeApiUpdateEventTypeApiV1EventTypeEventTypeNamePutRequest, options?: Configuration): Promise<EventTypeOut>;
}
import { HealthApiRequestFactory, HealthApiResponseProcessor } from "../apis/HealthApi";
export interface HealthApiHealthApiV1HealthGetRequest {
}
export declare class ObjectHealthApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor);
    healthApiV1HealthGet(param: HealthApiHealthApiV1HealthGetRequest, options?: Configuration): Promise<void>;
}
import { MessageApiRequestFactory, MessageApiResponseProcessor } from "../apis/MessageApi";
export interface MessageApiCreateMessageApiV1AppAppIdMsgPostRequest {
    appId: string;
    messageIn: MessageIn;
    withContent?: boolean;
}
export interface MessageApiGetMessageApiV1AppAppIdMsgMsgIdGetRequest {
    msgId: string;
    appId: string;
}
export interface MessageApiListMessagesApiV1AppAppIdMsgGetRequest {
    appId: string;
    iterator?: string;
    limit?: number;
    eventTypes?: Array<string>;
    before?: Date;
}
export declare class ObjectMessageApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor);
    createMessageApiV1AppAppIdMsgPost(param: MessageApiCreateMessageApiV1AppAppIdMsgPostRequest, options?: Configuration): Promise<MessageOut>;
    getMessageApiV1AppAppIdMsgMsgIdGet(param: MessageApiGetMessageApiV1AppAppIdMsgMsgIdGetRequest, options?: Configuration): Promise<MessageOut>;
    listMessagesApiV1AppAppIdMsgGet(param: MessageApiListMessagesApiV1AppAppIdMsgGetRequest, options?: Configuration): Promise<ListResponseMessageOut>;
}
import { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor } from "../apis/MessageAttemptApi";
export interface MessageAttemptApiGetAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetRequest {
    attemptId: string;
    msgId: string;
    appId: string;
}
export interface MessageAttemptApiListAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetRequest {
    msgId: string;
    appId: string;
    iterator?: string;
    limit?: number;
}
export interface MessageAttemptApiListAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetRequest {
    endpointId: string;
    appId: string;
    iterator?: string;
    limit?: number;
    status?: MessageStatus;
    before?: Date;
}
export interface MessageAttemptApiListAttemptsApiV1AppAppIdMsgMsgIdAttemptGetRequest {
    appId: string;
    msgId: string;
    iterator?: string;
    limit?: number;
    status?: MessageStatus;
}
export interface MessageAttemptApiListAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetRequest {
    msgId: string;
    appId: string;
    endpointId: string;
    iterator?: string;
    limit?: number;
    eventTypes?: Array<string>;
    status?: MessageStatus;
    before?: Date;
}
export interface MessageAttemptApiResendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostRequest {
    endpointId: string;
    msgId: string;
    appId: string;
}
export declare class ObjectMessageAttemptApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor);
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(param: MessageAttemptApiGetAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetRequest, options?: Configuration): Promise<MessageAttemptOut>;
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(param: MessageAttemptApiListAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetRequest, options?: Configuration): Promise<ListResponseMessageEndpointOut>;
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(param: MessageAttemptApiListAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetRequest, options?: Configuration): Promise<ListResponseEndpointMessageOut>;
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(param: MessageAttemptApiListAttemptsApiV1AppAppIdMsgMsgIdAttemptGetRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(param: MessageAttemptApiListAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetRequest, options?: Configuration): Promise<ListResponseMessageAttemptEndpointOut>;
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(param: MessageAttemptApiResendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostRequest, options?: Configuration): Promise<void>;
}
import { OrganizationApiRequestFactory, OrganizationApiResponseProcessor } from "../apis/OrganizationApi";
export interface OrganizationApiExportOrganizationConfigurationApiV1OrgExportPostRequest {
    body: any;
}
export interface OrganizationApiImportOrganizationConfigurationApiV1OrgImportPostRequest {
    importOrganizationIn: ImportOrganizationIn;
}
export declare class ObjectOrganizationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: OrganizationApiRequestFactory, responseProcessor?: OrganizationApiResponseProcessor);
    exportOrganizationConfigurationApiV1OrgExportPost(param: OrganizationApiExportOrganizationConfigurationApiV1OrgExportPostRequest, options?: Configuration): Promise<ExportOrganizationOut>;
    importOrganizationConfigurationApiV1OrgImportPost(param: OrganizationApiImportOrganizationConfigurationApiV1OrgImportPostRequest, options?: Configuration): Promise<void>;
}
import { OrganizationSettingsApiRequestFactory, OrganizationSettingsApiResponseProcessor } from "../apis/OrganizationSettingsApi";
export interface OrganizationSettingsApiGetOrgSettingsApiV1OrgSettingsGetRequest {
}
export declare class ObjectOrganizationSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: OrganizationSettingsApiRequestFactory, responseProcessor?: OrganizationSettingsApiResponseProcessor);
    getOrgSettingsApiV1OrgSettingsGet(param: OrganizationSettingsApiGetOrgSettingsApiV1OrgSettingsGetRequest, options?: Configuration): Promise<PortalSettingsOut>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export interface StatisticsApiGetAppAttemptStatsApiV1StatsAppAppIdAttemptGetRequest {
    appId: string;
    startDate?: Date;
    endDate?: Date;
}
export interface StatisticsApiGetEpStatsApiV1StatsAppAppIdEpEndpointIdAttemptGetRequest {
    endpointId: string;
    appId: string;
    startDate?: Date;
    endDate?: Date;
}
export declare class ObjectStatisticsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    getAppAttemptStatsApiV1StatsAppAppIdAttemptGet(param: StatisticsApiGetAppAttemptStatsApiV1StatsAppAppIdAttemptGetRequest, options?: Configuration): Promise<AttemptStatisticsResponse>;
    getEpStatsApiV1StatsAppAppIdEpEndpointIdAttemptGet(param: StatisticsApiGetEpStatsApiV1StatsAppAppIdEpEndpointIdAttemptGetRequest, options?: Configuration): Promise<AttemptStatisticsResponse>;
}
