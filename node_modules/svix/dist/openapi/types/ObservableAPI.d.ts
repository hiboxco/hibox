import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { ExportOrganizationOut } from '../models/ExportOrganizationOut';
import { ImportOrganizationIn } from '../models/ImportOrganizationIn';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageStatus } from '../models/MessageStatus';
import { PortalSettingsOut } from '../models/PortalSettingsOut';
import { RecoverIn } from '../models/RecoverIn';
import { ApplicationApiRequestFactory, ApplicationApiResponseProcessor } from "../apis/ApplicationApi";
export declare class ObservableApplicationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor);
    createApplicationApiV1AppPost(applicationIn: ApplicationIn, _options?: Configuration): Observable<ApplicationOut>;
    deleteApplicationApiV1AppAppIdDelete(appId: string, _options?: Configuration): Observable<void>;
    getApplicationApiV1AppAppIdGet(appId: string, _options?: Configuration): Observable<ApplicationOut>;
    listApplicationsApiV1AppGet(iterator?: string, limit?: number, _options?: Configuration): Observable<ListResponseApplicationOut>;
    updateApplicationApiV1AppAppIdPut(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Observable<ApplicationOut>;
}
import { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor } from "../apis/AuthenticationApi";
export declare class ObservableAuthenticationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor);
    getDashboardAccessApiV1AuthDashboardAccessAppIdPost(appId: string, _options?: Configuration): Observable<DashboardAccessOut>;
    logoutApiV1AuthLogoutPost(_options?: Configuration): Observable<void>;
}
import { EndpointApiRequestFactory, EndpointApiResponseProcessor } from "../apis/EndpointApi";
export declare class ObservableEndpointApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor);
    createEndpointApiV1AppAppIdEndpointPost(appId: string, endpointIn: EndpointIn, _options?: Configuration): Observable<EndpointOut>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId: string, appId: string, _options?: Configuration): Observable<void>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId: string, appId: string, _options?: Configuration): Observable<EndpointOut>;
    getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(endpointId: string, appId: string, _options?: Configuration): Observable<EndpointHeadersOut>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId: string, appId: string, _options?: Configuration): Observable<EndpointSecretOut>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId: string, appId: string, _options?: Configuration): Observable<EndpointStats>;
    listEndpointsApiV1AppAppIdEndpointGet(appId: string, iterator?: string, limit?: number, _options?: Configuration): Observable<ListResponseEndpointOut>;
    patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Observable<void>;
    recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(appId: string, endpointId: string, recoverIn: RecoverIn, _options?: Configuration): Observable<any>;
    rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(endpointId: string, appId: string, endpointSecretRotateIn: EndpointSecretRotateIn, _options?: Configuration): Observable<void>;
    sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(appId: string, endpointId: string, eventExampleIn: EventExampleIn, _options?: Configuration): Observable<MessageOut>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId: string, appId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Observable<EndpointOut>;
    updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Observable<void>;
}
import { EventTypeApiRequestFactory, EventTypeApiResponseProcessor } from "../apis/EventTypeApi";
export declare class ObservableEventTypeApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor);
    createEventTypeApiV1EventTypePost(eventTypeIn: EventTypeIn, _options?: Configuration): Observable<EventTypeOut>;
    deleteEventTypeApiV1EventTypeEventTypeNameDelete(eventTypeName: string, _options?: Configuration): Observable<void>;
    generateSchemaExampleApiV1EventTypeSchemaGenerateExamplePost(eventTypeSchemaIn: EventTypeSchemaIn, _options?: Configuration): Observable<EventTypeExampleOut>;
    getEventTypeApiV1EventTypeEventTypeNameGet(eventTypeName: string, _options?: Configuration): Observable<EventTypeOut>;
    listEventTypesApiV1EventTypeGet(iterator?: string, limit?: number, withContent?: boolean, includeArchived?: boolean, _options?: Configuration): Observable<ListResponseEventTypeOut>;
    updateEventTypeApiV1EventTypeEventTypeNamePut(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Observable<EventTypeOut>;
}
import { HealthApiRequestFactory, HealthApiResponseProcessor } from "../apis/HealthApi";
export declare class ObservableHealthApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor);
    healthApiV1HealthGet(_options?: Configuration): Observable<void>;
}
import { MessageApiRequestFactory, MessageApiResponseProcessor } from "../apis/MessageApi";
export declare class ObservableMessageApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor);
    createMessageApiV1AppAppIdMsgPost(appId: string, messageIn: MessageIn, withContent?: boolean, _options?: Configuration): Observable<MessageOut>;
    getMessageApiV1AppAppIdMsgMsgIdGet(msgId: string, appId: string, _options?: Configuration): Observable<MessageOut>;
    listMessagesApiV1AppAppIdMsgGet(appId: string, iterator?: string, limit?: number, eventTypes?: Array<string>, before?: Date, _options?: Configuration): Observable<ListResponseMessageOut>;
}
import { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor } from "../apis/MessageAttemptApi";
export declare class ObservableMessageAttemptApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor);
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId: string, msgId: string, appId: string, _options?: Configuration): Observable<MessageAttemptOut>;
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId: string, appId: string, iterator?: string, limit?: number, _options?: Configuration): Observable<ListResponseMessageEndpointOut>;
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId: string, appId: string, iterator?: string, limit?: number, status?: MessageStatus, before?: Date, _options?: Configuration): Observable<ListResponseEndpointMessageOut>;
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(appId: string, msgId: string, iterator?: string, limit?: number, status?: MessageStatus, _options?: Configuration): Observable<ListResponseMessageAttemptOut>;
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId: string, appId: string, endpointId: string, iterator?: string, limit?: number, eventTypes?: Array<string>, status?: MessageStatus, before?: Date, _options?: Configuration): Observable<ListResponseMessageAttemptEndpointOut>;
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId: string, msgId: string, appId: string, _options?: Configuration): Observable<void>;
}
import { OrganizationApiRequestFactory, OrganizationApiResponseProcessor } from "../apis/OrganizationApi";
export declare class ObservableOrganizationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OrganizationApiRequestFactory, responseProcessor?: OrganizationApiResponseProcessor);
    exportOrganizationConfigurationApiV1OrgExportPost(body: any, _options?: Configuration): Observable<ExportOrganizationOut>;
    importOrganizationConfigurationApiV1OrgImportPost(importOrganizationIn: ImportOrganizationIn, _options?: Configuration): Observable<void>;
}
import { OrganizationSettingsApiRequestFactory, OrganizationSettingsApiResponseProcessor } from "../apis/OrganizationSettingsApi";
export declare class ObservableOrganizationSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OrganizationSettingsApiRequestFactory, responseProcessor?: OrganizationSettingsApiResponseProcessor);
    getOrgSettingsApiV1OrgSettingsGet(_options?: Configuration): Observable<PortalSettingsOut>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export declare class ObservableStatisticsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    getAppAttemptStatsApiV1StatsAppAppIdAttemptGet(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse>;
    getEpStatsApiV1StatsAppAppIdEpEndpointIdAttemptGet(endpointId: string, appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse>;
}
