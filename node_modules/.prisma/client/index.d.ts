
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model EventType
 * 
 */
export type EventType = {
  id: number
  /**
   * @zod.nonempty()
   */
  title: string
  /**
   * @zod.custom(imports.eventTypeSlug)
   */
  slug: string
  description: string | null
  position: number
  /**
   * @zod.custom(imports.eventTypeLocations)
   */
  locations: Prisma.JsonValue | null
  length: number
  hidden: boolean
  userId: number | null
  teamId: number | null
  eventName: string | null
  timeZone: string | null
  periodType: PeriodType
  periodStartDate: Date | null
  periodEndDate: Date | null
  periodDays: number | null
  periodCountCalendarDays: boolean | null
  requiresConfirmation: boolean
  /**
   * @zod.custom(imports.recurringEventType)
   */
  recurringEvent: Prisma.JsonValue | null
  disableGuests: boolean
  hideCalendarNotes: boolean
  minimumBookingNotice: number
  beforeEventBuffer: number
  afterEventBuffer: number
  seatsPerTimeSlot: number | null
  schedulingType: SchedulingType | null
  scheduleId: number | null
  price: number
  currency: string
  slotInterval: number | null
  metadata: Prisma.JsonValue | null
  successRedirectUrl: string | null
}

/**
 * Model Credential
 * 
 */
export type Credential = {
  id: number
  type: string
  key: Prisma.JsonValue
  userId: number | null
  appId: string | null
}

/**
 * Model DestinationCalendar
 * 
 */
export type DestinationCalendar = {
  id: number
  integration: string
  externalId: string
  userId: number | null
  eventTypeId: number | null
  credentialId: number | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  username: string | null
  name: string | null
  /**
   * @zod.email()
   */
  email: string
  emailVerified: Date | null
  password: string | null
  bio: string | null
  avatar: string | null
  timeZone: string
  weekStart: string
  startTime: number
  endTime: number
  bufferTime: number
  hideBranding: boolean
  theme: string | null
  createdDate: Date
  trialEndsAt: Date | null
  defaultScheduleId: number | null
  completedOnboarding: boolean
  locale: string | null
  timeFormat: number | null
  twoFactorSecret: string | null
  twoFactorEnabled: boolean
  identityProvider: IdentityProvider
  identityProviderId: string | null
  invitedTo: number | null
  plan: UserPlan
  brandColor: string
  darkBrandColor: string
  away: boolean
  allowDynamicBooking: boolean | null
  /**
   * @zod.custom(imports.userMetadata)
   */
  metadata: Prisma.JsonValue | null
  verified: boolean | null
  role: UserPermissionRole
  disableImpersonation: boolean
  emailVerificationToken: string | null
}

/**
 * Model Team
 * 
 */
export type Team = {
  id: number
  name: string | null
  slug: string | null
  logo: string | null
  bio: string | null
  hideBranding: boolean
}

/**
 * Model Membership
 * 
 */
export type Membership = {
  teamId: number
  userId: number
  accepted: boolean
  role: MembershipRole
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = {
  id: number
  identifier: string
  token: string
  expires: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BookingReference
 * 
 */
export type BookingReference = {
  id: number
  type: string
  uid: string
  meetingId: string | null
  meetingPassword: string | null
  meetingUrl: string | null
  bookingId: number | null
  externalCalendarId: string | null
  deleted: boolean | null
  credentialId: number | null
}

/**
 * Model Attendee
 * 
 */
export type Attendee = {
  id: number
  email: string
  name: string
  timeZone: string
  locale: string | null
  bookingId: number | null
}

/**
 * Model DailyEventReference
 * 
 */
export type DailyEventReference = {
  id: number
  dailyurl: string
  dailytoken: string
  bookingId: number | null
}

/**
 * Model Booking
 * 
 */
export type Booking = {
  id: number
  uid: string
  userId: number | null
  eventTypeId: number | null
  title: string
  description: string | null
  customInputs: Prisma.JsonValue | null
  startTime: Date
  endTime: Date
  location: string | null
  createdAt: Date
  updatedAt: Date | null
  status: BookingStatus
  paid: boolean
  destinationCalendarId: number | null
  cancellationReason: string | null
  rejectionReason: string | null
  dynamicEventSlugRef: string | null
  dynamicGroupSlugRef: string | null
  rescheduled: boolean | null
  fromReschedule: string | null
  recurringEventId: string | null
  smsReminderNumber: string | null
}

/**
 * Model Schedule
 * 
 */
export type Schedule = {
  id: number
  userId: number
  name: string
  timeZone: string | null
}

/**
 * Model Availability
 * 
 */
export type Availability = {
  id: number
  userId: number | null
  eventTypeId: number | null
  days: number[]
  startTime: Date
  endTime: Date
  date: Date | null
  scheduleId: number | null
}

/**
 * Model SelectedCalendar
 * 
 */
export type SelectedCalendar = {
  userId: number
  integration: string
  externalId: string
}

/**
 * Model EventTypeCustomInput
 * 
 */
export type EventTypeCustomInput = {
  id: number
  eventTypeId: number
  label: string
  type: EventTypeCustomInputType
  required: boolean
  placeholder: string
}

/**
 * Model ResetPasswordRequest
 * 
 */
export type ResetPasswordRequest = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  expires: Date
}

/**
 * Model ReminderMail
 * 
 */
export type ReminderMail = {
  id: number
  referenceId: number
  reminderType: ReminderType
  elapsedMinutes: number
  createdAt: Date
}

/**
 * Model Payment
 * 
 */
export type Payment = {
  id: number
  uid: string
  type: PaymentType
  bookingId: number
  amount: number
  fee: number
  currency: string
  success: boolean
  refunded: boolean
  data: Prisma.JsonValue
  externalId: string
}

/**
 * Model Webhook
 * 
 */
export type Webhook = {
  id: string
  userId: number | null
  eventTypeId: number | null
  subscriberUrl: string
  payloadTemplate: string | null
  createdAt: Date
  active: boolean
  eventTriggers: WebhookTriggerEvents[]
  appId: string | null
  secret: string | null
}

/**
 * Model Impersonations
 * 
 */
export type Impersonations = {
  id: number
  createdAt: Date
  impersonatedUserId: number
  impersonatedById: number
}

/**
 * Model ApiKey
 * 
 */
export type ApiKey = {
  id: string
  userId: number
  note: string | null
  createdAt: Date
  expiresAt: Date | null
  lastUsedAt: Date | null
  hashedKey: string
  appId: string | null
}

/**
 * Model HashedLink
 * 
 */
export type HashedLink = {
  id: number
  link: string
  eventTypeId: number
}

/**
 * Model Account
 * 
 */
export type Account = {
  id: string
  userId: number
  type: string
  provider: string
  providerAccountId: string
  refresh_token: string | null
  access_token: string | null
  expires_at: number | null
  token_type: string | null
  scope: string | null
  id_token: string | null
  session_state: string | null
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionToken: string
  userId: number
  expires: Date
}

/**
 * Model App
 * 
 */
export type App = {
  slug: string
  dirName: string
  keys: Prisma.JsonValue | null
  categories: AppCategories[]
  createdAt: Date
  updatedAt: Date
}

/**
 * Model App_RoutingForms_Form
 * 
 */
export type App_RoutingForms_Form = {
  id: string
  description: string | null
  routes: Prisma.JsonValue | null
  createdAt: Date
  updatedAt: Date
  name: string
  fields: Prisma.JsonValue | null
  userId: number
  disabled: boolean
}

/**
 * Model App_RoutingForms_FormResponse
 * 
 */
export type App_RoutingForms_FormResponse = {
  id: number
  formFillerId: string
  formId: string
  response: Prisma.JsonValue
}

/**
 * Model Feedback
 * 
 */
export type Feedback = {
  id: number
  date: Date
  userId: number
  rating: string
  comment: string | null
}

/**
 * Model WorkflowStep
 * 
 */
export type WorkflowStep = {
  id: number
  stepNumber: number
  action: WorkflowActions
  workflowId: number
  sendTo: string | null
  reminderBody: string | null
  emailSubject: string | null
  template: WorkflowTemplates
}

/**
 * Model Workflow
 * 
 */
export type Workflow = {
  id: number
  name: string
  userId: number
  trigger: WorkflowTriggerEvents
  time: number | null
  timeUnit: TimeUnit | null
}

/**
 * Model WorkflowsOnEventTypes
 * 
 */
export type WorkflowsOnEventTypes = {
  id: number
  workflowId: number
  eventTypeId: number
}

/**
 * Model WorkflowReminder
 * 
 */
export type WorkflowReminder = {
  id: number
  bookingUid: string
  method: WorkflowMethods
  scheduledDate: Date
  referenceId: string | null
  scheduled: boolean
  workflowStepId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const PeriodType: {
  UNLIMITED: 'UNLIMITED',
  ROLLING: 'ROLLING',
  RANGE: 'RANGE'
};

export type PeriodType = (typeof PeriodType)[keyof typeof PeriodType]


export const SchedulingType: {
  ROUND_ROBIN: 'ROUND_ROBIN',
  COLLECTIVE: 'COLLECTIVE'
};

export type SchedulingType = (typeof SchedulingType)[keyof typeof SchedulingType]


export const IdentityProvider: {
  CAL: 'CAL',
  GOOGLE: 'GOOGLE',
  SAML: 'SAML'
};

export type IdentityProvider = (typeof IdentityProvider)[keyof typeof IdentityProvider]


export const UserPlan: {
  FREE: 'FREE',
  TRIAL: 'TRIAL',
  PRO: 'PRO'
};

export type UserPlan = (typeof UserPlan)[keyof typeof UserPlan]


export const UserPermissionRole: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type UserPermissionRole = (typeof UserPermissionRole)[keyof typeof UserPermissionRole]


export const MembershipRole: {
  MEMBER: 'MEMBER',
  ADMIN: 'ADMIN',
  OWNER: 'OWNER'
};

export type MembershipRole = (typeof MembershipRole)[keyof typeof MembershipRole]


export const BookingStatus: {
  CANCELLED: 'CANCELLED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  PENDING: 'PENDING'
};

export type BookingStatus = (typeof BookingStatus)[keyof typeof BookingStatus]


export const EventTypeCustomInputType: {
  TEXT: 'TEXT',
  TEXTLONG: 'TEXTLONG',
  NUMBER: 'NUMBER',
  BOOL: 'BOOL'
};

export type EventTypeCustomInputType = (typeof EventTypeCustomInputType)[keyof typeof EventTypeCustomInputType]


export const ReminderType: {
  PENDING_BOOKING_CONFIRMATION: 'PENDING_BOOKING_CONFIRMATION'
};

export type ReminderType = (typeof ReminderType)[keyof typeof ReminderType]


export const PaymentType: {
  STRIPE: 'STRIPE'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const WebhookTriggerEvents: {
  BOOKING_CREATED: 'BOOKING_CREATED',
  BOOKING_RESCHEDULED: 'BOOKING_RESCHEDULED',
  BOOKING_CANCELLED: 'BOOKING_CANCELLED'
};

export type WebhookTriggerEvents = (typeof WebhookTriggerEvents)[keyof typeof WebhookTriggerEvents]


export const AppCategories: {
  calendar: 'calendar',
  messaging: 'messaging',
  other: 'other',
  payment: 'payment',
  video: 'video',
  web3: 'web3'
};

export type AppCategories = (typeof AppCategories)[keyof typeof AppCategories]


export const WorkflowActions: {
  EMAIL_HOST: 'EMAIL_HOST',
  EMAIL_ATTENDEE: 'EMAIL_ATTENDEE',
  SMS_ATTENDEE: 'SMS_ATTENDEE',
  SMS_NUMBER: 'SMS_NUMBER'
};

export type WorkflowActions = (typeof WorkflowActions)[keyof typeof WorkflowActions]


export const WorkflowTemplates: {
  REMINDER: 'REMINDER',
  CUSTOM: 'CUSTOM'
};

export type WorkflowTemplates = (typeof WorkflowTemplates)[keyof typeof WorkflowTemplates]


export const WorkflowTriggerEvents: {
  BEFORE_EVENT: 'BEFORE_EVENT',
  EVENT_CANCELLED: 'EVENT_CANCELLED',
  NEW_EVENT: 'NEW_EVENT'
};

export type WorkflowTriggerEvents = (typeof WorkflowTriggerEvents)[keyof typeof WorkflowTriggerEvents]


export const TimeUnit: {
  DAY: 'DAY',
  HOUR: 'HOUR',
  MINUTE: 'MINUTE'
};

export type TimeUnit = (typeof TimeUnit)[keyof typeof TimeUnit]


export const WorkflowMethods: {
  EMAIL: 'EMAIL',
  SMS: 'SMS'
};

export type WorkflowMethods = (typeof WorkflowMethods)[keyof typeof WorkflowMethods]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more EventTypes
 * const eventTypes = await prisma.eventType.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more EventTypes
   * const eventTypes = await prisma.eventType.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>;

      /**
   * `prisma.eventType`: Exposes CRUD operations for the **EventType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventTypes
    * const eventTypes = await prisma.eventType.findMany()
    * ```
    */
  get eventType(): Prisma.EventTypeDelegate<GlobalReject>;

  /**
   * `prisma.credential`: Exposes CRUD operations for the **Credential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credential.findMany()
    * ```
    */
  get credential(): Prisma.CredentialDelegate<GlobalReject>;

  /**
   * `prisma.destinationCalendar`: Exposes CRUD operations for the **DestinationCalendar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DestinationCalendars
    * const destinationCalendars = await prisma.destinationCalendar.findMany()
    * ```
    */
  get destinationCalendar(): Prisma.DestinationCalendarDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<GlobalReject>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **Membership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memberships
    * const memberships = await prisma.membership.findMany()
    * ```
    */
  get membership(): Prisma.MembershipDelegate<GlobalReject>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject>;

  /**
   * `prisma.bookingReference`: Exposes CRUD operations for the **BookingReference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookingReferences
    * const bookingReferences = await prisma.bookingReference.findMany()
    * ```
    */
  get bookingReference(): Prisma.BookingReferenceDelegate<GlobalReject>;

  /**
   * `prisma.attendee`: Exposes CRUD operations for the **Attendee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendees
    * const attendees = await prisma.attendee.findMany()
    * ```
    */
  get attendee(): Prisma.AttendeeDelegate<GlobalReject>;

  /**
   * `prisma.dailyEventReference`: Exposes CRUD operations for the **DailyEventReference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyEventReferences
    * const dailyEventReferences = await prisma.dailyEventReference.findMany()
    * ```
    */
  get dailyEventReference(): Prisma.DailyEventReferenceDelegate<GlobalReject>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<GlobalReject>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<GlobalReject>;

  /**
   * `prisma.availability`: Exposes CRUD operations for the **Availability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Availabilities
    * const availabilities = await prisma.availability.findMany()
    * ```
    */
  get availability(): Prisma.AvailabilityDelegate<GlobalReject>;

  /**
   * `prisma.selectedCalendar`: Exposes CRUD operations for the **SelectedCalendar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SelectedCalendars
    * const selectedCalendars = await prisma.selectedCalendar.findMany()
    * ```
    */
  get selectedCalendar(): Prisma.SelectedCalendarDelegate<GlobalReject>;

  /**
   * `prisma.eventTypeCustomInput`: Exposes CRUD operations for the **EventTypeCustomInput** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventTypeCustomInputs
    * const eventTypeCustomInputs = await prisma.eventTypeCustomInput.findMany()
    * ```
    */
  get eventTypeCustomInput(): Prisma.EventTypeCustomInputDelegate<GlobalReject>;

  /**
   * `prisma.resetPasswordRequest`: Exposes CRUD operations for the **ResetPasswordRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResetPasswordRequests
    * const resetPasswordRequests = await prisma.resetPasswordRequest.findMany()
    * ```
    */
  get resetPasswordRequest(): Prisma.ResetPasswordRequestDelegate<GlobalReject>;

  /**
   * `prisma.reminderMail`: Exposes CRUD operations for the **ReminderMail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReminderMails
    * const reminderMails = await prisma.reminderMail.findMany()
    * ```
    */
  get reminderMail(): Prisma.ReminderMailDelegate<GlobalReject>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<GlobalReject>;

  /**
   * `prisma.webhook`: Exposes CRUD operations for the **Webhook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Webhooks
    * const webhooks = await prisma.webhook.findMany()
    * ```
    */
  get webhook(): Prisma.WebhookDelegate<GlobalReject>;

  /**
   * `prisma.impersonations`: Exposes CRUD operations for the **Impersonations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Impersonations
    * const impersonations = await prisma.impersonations.findMany()
    * ```
    */
  get impersonations(): Prisma.ImpersonationsDelegate<GlobalReject>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<GlobalReject>;

  /**
   * `prisma.hashedLink`: Exposes CRUD operations for the **HashedLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HashedLinks
    * const hashedLinks = await prisma.hashedLink.findMany()
    * ```
    */
  get hashedLink(): Prisma.HashedLinkDelegate<GlobalReject>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.app`: Exposes CRUD operations for the **App** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apps
    * const apps = await prisma.app.findMany()
    * ```
    */
  get app(): Prisma.AppDelegate<GlobalReject>;

  /**
   * `prisma.app_RoutingForms_Form`: Exposes CRUD operations for the **App_RoutingForms_Form** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more App_RoutingForms_Forms
    * const app_RoutingForms_Forms = await prisma.app_RoutingForms_Form.findMany()
    * ```
    */
  get app_RoutingForms_Form(): Prisma.App_RoutingForms_FormDelegate<GlobalReject>;

  /**
   * `prisma.app_RoutingForms_FormResponse`: Exposes CRUD operations for the **App_RoutingForms_FormResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more App_RoutingForms_FormResponses
    * const app_RoutingForms_FormResponses = await prisma.app_RoutingForms_FormResponse.findMany()
    * ```
    */
  get app_RoutingForms_FormResponse(): Prisma.App_RoutingForms_FormResponseDelegate<GlobalReject>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<GlobalReject>;

  /**
   * `prisma.workflowStep`: Exposes CRUD operations for the **WorkflowStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowSteps
    * const workflowSteps = await prisma.workflowStep.findMany()
    * ```
    */
  get workflowStep(): Prisma.WorkflowStepDelegate<GlobalReject>;

  /**
   * `prisma.workflow`: Exposes CRUD operations for the **Workflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workflows
    * const workflows = await prisma.workflow.findMany()
    * ```
    */
  get workflow(): Prisma.WorkflowDelegate<GlobalReject>;

  /**
   * `prisma.workflowsOnEventTypes`: Exposes CRUD operations for the **WorkflowsOnEventTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowsOnEventTypes
    * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findMany()
    * ```
    */
  get workflowsOnEventTypes(): Prisma.WorkflowsOnEventTypesDelegate<GlobalReject>;

  /**
   * `prisma.workflowReminder`: Exposes CRUD operations for the **WorkflowReminder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowReminders
    * const workflowReminders = await prisma.workflowReminder.findMany()
    * ```
    */
  get workflowReminder(): Prisma.WorkflowReminderDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    EventType: 'EventType',
    Credential: 'Credential',
    DestinationCalendar: 'DestinationCalendar',
    User: 'User',
    Team: 'Team',
    Membership: 'Membership',
    VerificationToken: 'VerificationToken',
    BookingReference: 'BookingReference',
    Attendee: 'Attendee',
    DailyEventReference: 'DailyEventReference',
    Booking: 'Booking',
    Schedule: 'Schedule',
    Availability: 'Availability',
    SelectedCalendar: 'SelectedCalendar',
    EventTypeCustomInput: 'EventTypeCustomInput',
    ResetPasswordRequest: 'ResetPasswordRequest',
    ReminderMail: 'ReminderMail',
    Payment: 'Payment',
    Webhook: 'Webhook',
    Impersonations: 'Impersonations',
    ApiKey: 'ApiKey',
    HashedLink: 'HashedLink',
    Account: 'Account',
    Session: 'Session',
    App: 'App',
    App_RoutingForms_Form: 'App_RoutingForms_Form',
    App_RoutingForms_FormResponse: 'App_RoutingForms_FormResponse',
    Feedback: 'Feedback',
    WorkflowStep: 'WorkflowStep',
    Workflow: 'Workflow',
    WorkflowsOnEventTypes: 'WorkflowsOnEventTypes',
    WorkflowReminder: 'WorkflowReminder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;


  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EventTypeCountOutputType
   */


  export type EventTypeCountOutputType = {
    users: number
    bookings: number
    availability: number
    webhooks: number
    customInputs: number
    workflows: number
  }

  export type EventTypeCountOutputTypeSelect = {
    users?: boolean
    bookings?: boolean
    availability?: boolean
    webhooks?: boolean
    customInputs?: boolean
    workflows?: boolean
  }

  export type EventTypeCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EventTypeCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EventTypeCountOutputType
    : S extends undefined
    ? never
    : S extends EventTypeCountOutputTypeArgs
    ?'include' extends U
    ? EventTypeCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EventTypeCountOutputType ? EventTypeCountOutputType[P] : never
  } 
    : EventTypeCountOutputType
  : EventTypeCountOutputType




  // Custom InputTypes

  /**
   * EventTypeCountOutputType without action
   */
  export type EventTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCountOutputType
     * 
    **/
    select?: EventTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type CredentialCountOutputType
   */


  export type CredentialCountOutputType = {
    destinationCalendars: number
  }

  export type CredentialCountOutputTypeSelect = {
    destinationCalendars?: boolean
  }

  export type CredentialCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CredentialCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CredentialCountOutputType
    : S extends undefined
    ? never
    : S extends CredentialCountOutputTypeArgs
    ?'include' extends U
    ? CredentialCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CredentialCountOutputType ? CredentialCountOutputType[P] : never
  } 
    : CredentialCountOutputType
  : CredentialCountOutputType




  // Custom InputTypes

  /**
   * CredentialCountOutputType without action
   */
  export type CredentialCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CredentialCountOutputType
     * 
    **/
    select?: CredentialCountOutputTypeSelect | null
  }



  /**
   * Count Type DestinationCalendarCountOutputType
   */


  export type DestinationCalendarCountOutputType = {
    booking: number
  }

  export type DestinationCalendarCountOutputTypeSelect = {
    booking?: boolean
  }

  export type DestinationCalendarCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DestinationCalendarCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DestinationCalendarCountOutputType
    : S extends undefined
    ? never
    : S extends DestinationCalendarCountOutputTypeArgs
    ?'include' extends U
    ? DestinationCalendarCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DestinationCalendarCountOutputType ? DestinationCalendarCountOutputType[P] : never
  } 
    : DestinationCalendarCountOutputType
  : DestinationCalendarCountOutputType




  // Custom InputTypes

  /**
   * DestinationCalendarCountOutputType without action
   */
  export type DestinationCalendarCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendarCountOutputType
     * 
    **/
    select?: DestinationCalendarCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    eventTypes: number
    credentials: number
    teams: number
    bookings: number
    schedules: number
    selectedCalendars: number
    availability: number
    webhooks: number
    impersonatedUsers: number
    impersonatedBy: number
    apiKeys: number
    accounts: number
    sessions: number
    workflows: number
    routingForms: number
    Feedback: number
  }

  export type UserCountOutputTypeSelect = {
    eventTypes?: boolean
    credentials?: boolean
    teams?: boolean
    bookings?: boolean
    schedules?: boolean
    selectedCalendars?: boolean
    availability?: boolean
    webhooks?: boolean
    impersonatedUsers?: boolean
    impersonatedBy?: boolean
    apiKeys?: boolean
    accounts?: boolean
    sessions?: boolean
    workflows?: boolean
    routingForms?: boolean
    Feedback?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type TeamCountOutputType
   */


  export type TeamCountOutputType = {
    members: number
    eventTypes: number
  }

  export type TeamCountOutputTypeSelect = {
    members?: boolean
    eventTypes?: boolean
  }

  export type TeamCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TeamCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TeamCountOutputType
    : S extends undefined
    ? never
    : S extends TeamCountOutputTypeArgs
    ?'include' extends U
    ? TeamCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TeamCountOutputType ? TeamCountOutputType[P] : never
  } 
    : TeamCountOutputType
  : TeamCountOutputType




  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     * 
    **/
    select?: TeamCountOutputTypeSelect | null
  }



  /**
   * Count Type BookingCountOutputType
   */


  export type BookingCountOutputType = {
    references: number
    attendees: number
    payment: number
    workflowReminders: number
  }

  export type BookingCountOutputTypeSelect = {
    references?: boolean
    attendees?: boolean
    payment?: boolean
    workflowReminders?: boolean
  }

  export type BookingCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BookingCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BookingCountOutputType
    : S extends undefined
    ? never
    : S extends BookingCountOutputTypeArgs
    ?'include' extends U
    ? BookingCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BookingCountOutputType ? BookingCountOutputType[P] : never
  } 
    : BookingCountOutputType
  : BookingCountOutputType




  // Custom InputTypes

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BookingCountOutputType
     * 
    **/
    select?: BookingCountOutputTypeSelect | null
  }



  /**
   * Count Type ScheduleCountOutputType
   */


  export type ScheduleCountOutputType = {
    eventType: number
    availability: number
  }

  export type ScheduleCountOutputTypeSelect = {
    eventType?: boolean
    availability?: boolean
  }

  export type ScheduleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ScheduleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ScheduleCountOutputType
    : S extends undefined
    ? never
    : S extends ScheduleCountOutputTypeArgs
    ?'include' extends U
    ? ScheduleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ScheduleCountOutputType ? ScheduleCountOutputType[P] : never
  } 
    : ScheduleCountOutputType
  : ScheduleCountOutputType




  // Custom InputTypes

  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ScheduleCountOutputType
     * 
    **/
    select?: ScheduleCountOutputTypeSelect | null
  }



  /**
   * Count Type AppCountOutputType
   */


  export type AppCountOutputType = {
    credentials: number
    Webhook: number
    ApiKey: number
  }

  export type AppCountOutputTypeSelect = {
    credentials?: boolean
    Webhook?: boolean
    ApiKey?: boolean
  }

  export type AppCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AppCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AppCountOutputType
    : S extends undefined
    ? never
    : S extends AppCountOutputTypeArgs
    ?'include' extends U
    ? AppCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AppCountOutputType ? AppCountOutputType[P] : never
  } 
    : AppCountOutputType
  : AppCountOutputType




  // Custom InputTypes

  /**
   * AppCountOutputType without action
   */
  export type AppCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppCountOutputType
     * 
    **/
    select?: AppCountOutputTypeSelect | null
  }



  /**
   * Count Type App_RoutingForms_FormCountOutputType
   */


  export type App_RoutingForms_FormCountOutputType = {
    responses: number
  }

  export type App_RoutingForms_FormCountOutputTypeSelect = {
    responses?: boolean
  }

  export type App_RoutingForms_FormCountOutputTypeGetPayload<
    S extends boolean | null | undefined | App_RoutingForms_FormCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? App_RoutingForms_FormCountOutputType
    : S extends undefined
    ? never
    : S extends App_RoutingForms_FormCountOutputTypeArgs
    ?'include' extends U
    ? App_RoutingForms_FormCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof App_RoutingForms_FormCountOutputType ? App_RoutingForms_FormCountOutputType[P] : never
  } 
    : App_RoutingForms_FormCountOutputType
  : App_RoutingForms_FormCountOutputType




  // Custom InputTypes

  /**
   * App_RoutingForms_FormCountOutputType without action
   */
  export type App_RoutingForms_FormCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormCountOutputType
     * 
    **/
    select?: App_RoutingForms_FormCountOutputTypeSelect | null
  }



  /**
   * Count Type WorkflowStepCountOutputType
   */


  export type WorkflowStepCountOutputType = {
    workflowReminders: number
  }

  export type WorkflowStepCountOutputTypeSelect = {
    workflowReminders?: boolean
  }

  export type WorkflowStepCountOutputTypeGetPayload<
    S extends boolean | null | undefined | WorkflowStepCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? WorkflowStepCountOutputType
    : S extends undefined
    ? never
    : S extends WorkflowStepCountOutputTypeArgs
    ?'include' extends U
    ? WorkflowStepCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof WorkflowStepCountOutputType ? WorkflowStepCountOutputType[P] : never
  } 
    : WorkflowStepCountOutputType
  : WorkflowStepCountOutputType




  // Custom InputTypes

  /**
   * WorkflowStepCountOutputType without action
   */
  export type WorkflowStepCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStepCountOutputType
     * 
    **/
    select?: WorkflowStepCountOutputTypeSelect | null
  }



  /**
   * Count Type WorkflowCountOutputType
   */


  export type WorkflowCountOutputType = {
    activeOn: number
    steps: number
  }

  export type WorkflowCountOutputTypeSelect = {
    activeOn?: boolean
    steps?: boolean
  }

  export type WorkflowCountOutputTypeGetPayload<
    S extends boolean | null | undefined | WorkflowCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? WorkflowCountOutputType
    : S extends undefined
    ? never
    : S extends WorkflowCountOutputTypeArgs
    ?'include' extends U
    ? WorkflowCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof WorkflowCountOutputType ? WorkflowCountOutputType[P] : never
  } 
    : WorkflowCountOutputType
  : WorkflowCountOutputType




  // Custom InputTypes

  /**
   * WorkflowCountOutputType without action
   */
  export type WorkflowCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WorkflowCountOutputType
     * 
    **/
    select?: WorkflowCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model EventType
   */


  export type AggregateEventType = {
    _count: EventTypeCountAggregateOutputType | null
    _avg: EventTypeAvgAggregateOutputType | null
    _sum: EventTypeSumAggregateOutputType | null
    _min: EventTypeMinAggregateOutputType | null
    _max: EventTypeMaxAggregateOutputType | null
  }

  export type EventTypeAvgAggregateOutputType = {
    id: number | null
    position: number | null
    length: number | null
    userId: number | null
    teamId: number | null
    periodDays: number | null
    minimumBookingNotice: number | null
    beforeEventBuffer: number | null
    afterEventBuffer: number | null
    seatsPerTimeSlot: number | null
    scheduleId: number | null
    price: number | null
    slotInterval: number | null
  }

  export type EventTypeSumAggregateOutputType = {
    id: number | null
    position: number | null
    length: number | null
    userId: number | null
    teamId: number | null
    periodDays: number | null
    minimumBookingNotice: number | null
    beforeEventBuffer: number | null
    afterEventBuffer: number | null
    seatsPerTimeSlot: number | null
    scheduleId: number | null
    price: number | null
    slotInterval: number | null
  }

  export type EventTypeMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    position: number | null
    length: number | null
    hidden: boolean | null
    userId: number | null
    teamId: number | null
    eventName: string | null
    timeZone: string | null
    periodType: PeriodType | null
    periodStartDate: Date | null
    periodEndDate: Date | null
    periodDays: number | null
    periodCountCalendarDays: boolean | null
    requiresConfirmation: boolean | null
    disableGuests: boolean | null
    hideCalendarNotes: boolean | null
    minimumBookingNotice: number | null
    beforeEventBuffer: number | null
    afterEventBuffer: number | null
    seatsPerTimeSlot: number | null
    schedulingType: SchedulingType | null
    scheduleId: number | null
    price: number | null
    currency: string | null
    slotInterval: number | null
    successRedirectUrl: string | null
  }

  export type EventTypeMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    position: number | null
    length: number | null
    hidden: boolean | null
    userId: number | null
    teamId: number | null
    eventName: string | null
    timeZone: string | null
    periodType: PeriodType | null
    periodStartDate: Date | null
    periodEndDate: Date | null
    periodDays: number | null
    periodCountCalendarDays: boolean | null
    requiresConfirmation: boolean | null
    disableGuests: boolean | null
    hideCalendarNotes: boolean | null
    minimumBookingNotice: number | null
    beforeEventBuffer: number | null
    afterEventBuffer: number | null
    seatsPerTimeSlot: number | null
    schedulingType: SchedulingType | null
    scheduleId: number | null
    price: number | null
    currency: string | null
    slotInterval: number | null
    successRedirectUrl: string | null
  }

  export type EventTypeCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    position: number
    locations: number
    length: number
    hidden: number
    userId: number
    teamId: number
    eventName: number
    timeZone: number
    periodType: number
    periodStartDate: number
    periodEndDate: number
    periodDays: number
    periodCountCalendarDays: number
    requiresConfirmation: number
    recurringEvent: number
    disableGuests: number
    hideCalendarNotes: number
    minimumBookingNotice: number
    beforeEventBuffer: number
    afterEventBuffer: number
    seatsPerTimeSlot: number
    schedulingType: number
    scheduleId: number
    price: number
    currency: number
    slotInterval: number
    metadata: number
    successRedirectUrl: number
    _all: number
  }


  export type EventTypeAvgAggregateInputType = {
    id?: true
    position?: true
    length?: true
    userId?: true
    teamId?: true
    periodDays?: true
    minimumBookingNotice?: true
    beforeEventBuffer?: true
    afterEventBuffer?: true
    seatsPerTimeSlot?: true
    scheduleId?: true
    price?: true
    slotInterval?: true
  }

  export type EventTypeSumAggregateInputType = {
    id?: true
    position?: true
    length?: true
    userId?: true
    teamId?: true
    periodDays?: true
    minimumBookingNotice?: true
    beforeEventBuffer?: true
    afterEventBuffer?: true
    seatsPerTimeSlot?: true
    scheduleId?: true
    price?: true
    slotInterval?: true
  }

  export type EventTypeMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    position?: true
    length?: true
    hidden?: true
    userId?: true
    teamId?: true
    eventName?: true
    timeZone?: true
    periodType?: true
    periodStartDate?: true
    periodEndDate?: true
    periodDays?: true
    periodCountCalendarDays?: true
    requiresConfirmation?: true
    disableGuests?: true
    hideCalendarNotes?: true
    minimumBookingNotice?: true
    beforeEventBuffer?: true
    afterEventBuffer?: true
    seatsPerTimeSlot?: true
    schedulingType?: true
    scheduleId?: true
    price?: true
    currency?: true
    slotInterval?: true
    successRedirectUrl?: true
  }

  export type EventTypeMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    position?: true
    length?: true
    hidden?: true
    userId?: true
    teamId?: true
    eventName?: true
    timeZone?: true
    periodType?: true
    periodStartDate?: true
    periodEndDate?: true
    periodDays?: true
    periodCountCalendarDays?: true
    requiresConfirmation?: true
    disableGuests?: true
    hideCalendarNotes?: true
    minimumBookingNotice?: true
    beforeEventBuffer?: true
    afterEventBuffer?: true
    seatsPerTimeSlot?: true
    schedulingType?: true
    scheduleId?: true
    price?: true
    currency?: true
    slotInterval?: true
    successRedirectUrl?: true
  }

  export type EventTypeCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    position?: true
    locations?: true
    length?: true
    hidden?: true
    userId?: true
    teamId?: true
    eventName?: true
    timeZone?: true
    periodType?: true
    periodStartDate?: true
    periodEndDate?: true
    periodDays?: true
    periodCountCalendarDays?: true
    requiresConfirmation?: true
    recurringEvent?: true
    disableGuests?: true
    hideCalendarNotes?: true
    minimumBookingNotice?: true
    beforeEventBuffer?: true
    afterEventBuffer?: true
    seatsPerTimeSlot?: true
    schedulingType?: true
    scheduleId?: true
    price?: true
    currency?: true
    slotInterval?: true
    metadata?: true
    successRedirectUrl?: true
    _all?: true
  }

  export type EventTypeAggregateArgs = {
    /**
     * Filter which EventType to aggregate.
     * 
    **/
    where?: EventTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<EventTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EventTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventTypes
    **/
    _count?: true | EventTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventTypeMaxAggregateInputType
  }

  export type GetEventTypeAggregateType<T extends EventTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateEventType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventType[P]>
      : GetScalarType<T[P], AggregateEventType[P]>
  }




  export type EventTypeGroupByArgs = {
    where?: EventTypeWhereInput
    orderBy?: Enumerable<EventTypeOrderByWithAggregationInput>
    by: Array<EventTypeScalarFieldEnum>
    having?: EventTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventTypeCountAggregateInputType | true
    _avg?: EventTypeAvgAggregateInputType
    _sum?: EventTypeSumAggregateInputType
    _min?: EventTypeMinAggregateInputType
    _max?: EventTypeMaxAggregateInputType
  }


  export type EventTypeGroupByOutputType = {
    id: number
    title: string
    slug: string
    description: string | null
    position: number
    locations: JsonValue | null
    length: number
    hidden: boolean
    userId: number | null
    teamId: number | null
    eventName: string | null
    timeZone: string | null
    periodType: PeriodType
    periodStartDate: Date | null
    periodEndDate: Date | null
    periodDays: number | null
    periodCountCalendarDays: boolean | null
    requiresConfirmation: boolean
    recurringEvent: JsonValue | null
    disableGuests: boolean
    hideCalendarNotes: boolean
    minimumBookingNotice: number
    beforeEventBuffer: number
    afterEventBuffer: number
    seatsPerTimeSlot: number | null
    schedulingType: SchedulingType | null
    scheduleId: number | null
    price: number
    currency: string
    slotInterval: number | null
    metadata: JsonValue | null
    successRedirectUrl: string | null
    _count: EventTypeCountAggregateOutputType | null
    _avg: EventTypeAvgAggregateOutputType | null
    _sum: EventTypeSumAggregateOutputType | null
    _min: EventTypeMinAggregateOutputType | null
    _max: EventTypeMaxAggregateOutputType | null
  }

  type GetEventTypeGroupByPayload<T extends EventTypeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EventTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventTypeGroupByOutputType[P]>
            : GetScalarType<T[P], EventTypeGroupByOutputType[P]>
        }
      >
    >


  export type EventTypeSelect = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    position?: boolean
    locations?: boolean
    length?: boolean
    hidden?: boolean
    users?: boolean | UserFindManyArgs
    userId?: boolean
    team?: boolean | TeamArgs
    teamId?: boolean
    hashedLink?: boolean | HashedLinkArgs
    bookings?: boolean | BookingFindManyArgs
    availability?: boolean | AvailabilityFindManyArgs
    webhooks?: boolean | WebhookFindManyArgs
    destinationCalendar?: boolean | DestinationCalendarArgs
    eventName?: boolean
    customInputs?: boolean | EventTypeCustomInputFindManyArgs
    timeZone?: boolean
    periodType?: boolean
    periodStartDate?: boolean
    periodEndDate?: boolean
    periodDays?: boolean
    periodCountCalendarDays?: boolean
    requiresConfirmation?: boolean
    recurringEvent?: boolean
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: boolean
    beforeEventBuffer?: boolean
    afterEventBuffer?: boolean
    seatsPerTimeSlot?: boolean
    schedulingType?: boolean
    schedule?: boolean | ScheduleArgs
    scheduleId?: boolean
    price?: boolean
    currency?: boolean
    slotInterval?: boolean
    metadata?: boolean
    successRedirectUrl?: boolean
    workflows?: boolean | WorkflowsOnEventTypesFindManyArgs
    _count?: boolean | EventTypeCountOutputTypeArgs
  }

  export type EventTypeInclude = {
    users?: boolean | UserFindManyArgs
    team?: boolean | TeamArgs
    hashedLink?: boolean | HashedLinkArgs
    bookings?: boolean | BookingFindManyArgs
    availability?: boolean | AvailabilityFindManyArgs
    webhooks?: boolean | WebhookFindManyArgs
    destinationCalendar?: boolean | DestinationCalendarArgs
    customInputs?: boolean | EventTypeCustomInputFindManyArgs
    schedule?: boolean | ScheduleArgs
    workflows?: boolean | WorkflowsOnEventTypesFindManyArgs
    _count?: boolean | EventTypeCountOutputTypeArgs
  }

  export type EventTypeGetPayload<
    S extends boolean | null | undefined | EventTypeArgs,
    U = keyof S
      > = S extends true
        ? EventType
    : S extends undefined
    ? never
    : S extends EventTypeArgs | EventTypeFindManyArgs
    ?'include' extends U
    ? EventType  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'team' ? TeamGetPayload<S['include'][P]> | null :
        P extends 'hashedLink' ? HashedLinkGetPayload<S['include'][P]> | null :
        P extends 'bookings' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'availability' ? Array < AvailabilityGetPayload<S['include'][P]>>  :
        P extends 'webhooks' ? Array < WebhookGetPayload<S['include'][P]>>  :
        P extends 'destinationCalendar' ? DestinationCalendarGetPayload<S['include'][P]> | null :
        P extends 'customInputs' ? Array < EventTypeCustomInputGetPayload<S['include'][P]>>  :
        P extends 'schedule' ? ScheduleGetPayload<S['include'][P]> | null :
        P extends 'workflows' ? Array < WorkflowsOnEventTypesGetPayload<S['include'][P]>>  :
        P extends '_count' ? EventTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'team' ? TeamGetPayload<S['select'][P]> | null :
        P extends 'hashedLink' ? HashedLinkGetPayload<S['select'][P]> | null :
        P extends 'bookings' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'availability' ? Array < AvailabilityGetPayload<S['select'][P]>>  :
        P extends 'webhooks' ? Array < WebhookGetPayload<S['select'][P]>>  :
        P extends 'destinationCalendar' ? DestinationCalendarGetPayload<S['select'][P]> | null :
        P extends 'customInputs' ? Array < EventTypeCustomInputGetPayload<S['select'][P]>>  :
        P extends 'schedule' ? ScheduleGetPayload<S['select'][P]> | null :
        P extends 'workflows' ? Array < WorkflowsOnEventTypesGetPayload<S['select'][P]>>  :
        P extends '_count' ? EventTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof EventType ? EventType[P] : never
  } 
    : EventType
  : EventType


  type EventTypeCountArgs = Merge<
    Omit<EventTypeFindManyArgs, 'select' | 'include'> & {
      select?: EventTypeCountAggregateInputType | true
    }
  >

  export interface EventTypeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one EventType that matches the filter.
     * @param {EventTypeFindUniqueArgs} args - Arguments to find a EventType
     * @example
     * // Get one EventType
     * const eventType = await prisma.eventType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EventType'> extends True ? CheckSelect<T, Prisma__EventTypeClient<EventType>, Prisma__EventTypeClient<EventTypeGetPayload<T>>> : CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>

    /**
     * Find the first EventType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeFindFirstArgs} args - Arguments to find a EventType
     * @example
     * // Get one EventType
     * const eventType = await prisma.eventType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EventType'> extends True ? CheckSelect<T, Prisma__EventTypeClient<EventType>, Prisma__EventTypeClient<EventTypeGetPayload<T>>> : CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>

    /**
     * Find zero or more EventTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventTypes
     * const eventTypes = await prisma.eventType.findMany()
     * 
     * // Get first 10 EventTypes
     * const eventTypes = await prisma.eventType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventTypeWithIdOnly = await prisma.eventType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventTypeFindManyArgs>(
      args?: SelectSubset<T, EventTypeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<EventType>>, PrismaPromise<Array<EventTypeGetPayload<T>>>>

    /**
     * Create a EventType.
     * @param {EventTypeCreateArgs} args - Arguments to create a EventType.
     * @example
     * // Create one EventType
     * const EventType = await prisma.eventType.create({
     *   data: {
     *     // ... data to create a EventType
     *   }
     * })
     * 
    **/
    create<T extends EventTypeCreateArgs>(
      args: SelectSubset<T, EventTypeCreateArgs>
    ): CheckSelect<T, Prisma__EventTypeClient<EventType>, Prisma__EventTypeClient<EventTypeGetPayload<T>>>

    /**
     * Create many EventTypes.
     *     @param {EventTypeCreateManyArgs} args - Arguments to create many EventTypes.
     *     @example
     *     // Create many EventTypes
     *     const eventType = await prisma.eventType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventTypeCreateManyArgs>(
      args?: SelectSubset<T, EventTypeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EventType.
     * @param {EventTypeDeleteArgs} args - Arguments to delete one EventType.
     * @example
     * // Delete one EventType
     * const EventType = await prisma.eventType.delete({
     *   where: {
     *     // ... filter to delete one EventType
     *   }
     * })
     * 
    **/
    delete<T extends EventTypeDeleteArgs>(
      args: SelectSubset<T, EventTypeDeleteArgs>
    ): CheckSelect<T, Prisma__EventTypeClient<EventType>, Prisma__EventTypeClient<EventTypeGetPayload<T>>>

    /**
     * Update one EventType.
     * @param {EventTypeUpdateArgs} args - Arguments to update one EventType.
     * @example
     * // Update one EventType
     * const eventType = await prisma.eventType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventTypeUpdateArgs>(
      args: SelectSubset<T, EventTypeUpdateArgs>
    ): CheckSelect<T, Prisma__EventTypeClient<EventType>, Prisma__EventTypeClient<EventTypeGetPayload<T>>>

    /**
     * Delete zero or more EventTypes.
     * @param {EventTypeDeleteManyArgs} args - Arguments to filter EventTypes to delete.
     * @example
     * // Delete a few EventTypes
     * const { count } = await prisma.eventType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventTypeDeleteManyArgs>(
      args?: SelectSubset<T, EventTypeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventTypes
     * const eventType = await prisma.eventType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventTypeUpdateManyArgs>(
      args: SelectSubset<T, EventTypeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EventType.
     * @param {EventTypeUpsertArgs} args - Arguments to update or create a EventType.
     * @example
     * // Update or create a EventType
     * const eventType = await prisma.eventType.upsert({
     *   create: {
     *     // ... data to create a EventType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventType we want to update
     *   }
     * })
    **/
    upsert<T extends EventTypeUpsertArgs>(
      args: SelectSubset<T, EventTypeUpsertArgs>
    ): CheckSelect<T, Prisma__EventTypeClient<EventType>, Prisma__EventTypeClient<EventTypeGetPayload<T>>>

    /**
     * Count the number of EventTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCountArgs} args - Arguments to filter EventTypes to count.
     * @example
     * // Count the number of EventTypes
     * const count = await prisma.eventType.count({
     *   where: {
     *     // ... the filter for the EventTypes we want to count
     *   }
     * })
    **/
    count<T extends EventTypeCountArgs>(
      args?: Subset<T, EventTypeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventTypeAggregateArgs>(args: Subset<T, EventTypeAggregateArgs>): PrismaPromise<GetEventTypeAggregateType<T>>

    /**
     * Group by EventType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventTypeGroupByArgs['orderBy'] }
        : { orderBy?: EventTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventTypeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventTypeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    team<T extends TeamArgs = {}>(args?: Subset<T, TeamArgs>): CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>;

    hashedLink<T extends HashedLinkArgs = {}>(args?: Subset<T, HashedLinkArgs>): CheckSelect<T, Prisma__HashedLinkClient<HashedLink | null >, Prisma__HashedLinkClient<HashedLinkGetPayload<T> | null >>;

    bookings<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    availability<T extends AvailabilityFindManyArgs = {}>(args?: Subset<T, AvailabilityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Availability>>, PrismaPromise<Array<AvailabilityGetPayload<T>>>>;

    webhooks<T extends WebhookFindManyArgs = {}>(args?: Subset<T, WebhookFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Webhook>>, PrismaPromise<Array<WebhookGetPayload<T>>>>;

    destinationCalendar<T extends DestinationCalendarArgs = {}>(args?: Subset<T, DestinationCalendarArgs>): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar | null >, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T> | null >>;

    customInputs<T extends EventTypeCustomInputFindManyArgs = {}>(args?: Subset<T, EventTypeCustomInputFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EventTypeCustomInput>>, PrismaPromise<Array<EventTypeCustomInputGetPayload<T>>>>;

    schedule<T extends ScheduleArgs = {}>(args?: Subset<T, ScheduleArgs>): CheckSelect<T, Prisma__ScheduleClient<Schedule | null >, Prisma__ScheduleClient<ScheduleGetPayload<T> | null >>;

    workflows<T extends WorkflowsOnEventTypesFindManyArgs = {}>(args?: Subset<T, WorkflowsOnEventTypesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<WorkflowsOnEventTypes>>, PrismaPromise<Array<WorkflowsOnEventTypesGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * EventType findUnique
   */
  export type EventTypeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * Throw an Error if a EventType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EventType to fetch.
     * 
    **/
    where: EventTypeWhereUniqueInput
  }


  /**
   * EventType findFirst
   */
  export type EventTypeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * Throw an Error if a EventType can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EventType to fetch.
     * 
    **/
    where?: EventTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<EventTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventTypes.
     * 
    **/
    cursor?: EventTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventTypes.
     * 
    **/
    distinct?: Enumerable<EventTypeScalarFieldEnum>
  }


  /**
   * EventType findMany
   */
  export type EventTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * Filter, which EventTypes to fetch.
     * 
    **/
    where?: EventTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<EventTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventTypes.
     * 
    **/
    cursor?: EventTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EventTypeScalarFieldEnum>
  }


  /**
   * EventType create
   */
  export type EventTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * The data needed to create a EventType.
     * 
    **/
    data: XOR<EventTypeCreateInput, EventTypeUncheckedCreateInput>
  }


  /**
   * EventType createMany
   */
  export type EventTypeCreateManyArgs = {
    /**
     * The data used to create many EventTypes.
     * 
    **/
    data: Enumerable<EventTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EventType update
   */
  export type EventTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * The data needed to update a EventType.
     * 
    **/
    data: XOR<EventTypeUpdateInput, EventTypeUncheckedUpdateInput>
    /**
     * Choose, which EventType to update.
     * 
    **/
    where: EventTypeWhereUniqueInput
  }


  /**
   * EventType updateMany
   */
  export type EventTypeUpdateManyArgs = {
    /**
     * The data used to update EventTypes.
     * 
    **/
    data: XOR<EventTypeUpdateManyMutationInput, EventTypeUncheckedUpdateManyInput>
    /**
     * Filter which EventTypes to update
     * 
    **/
    where?: EventTypeWhereInput
  }


  /**
   * EventType upsert
   */
  export type EventTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * The filter to search for the EventType to update in case it exists.
     * 
    **/
    where: EventTypeWhereUniqueInput
    /**
     * In case the EventType found by the `where` argument doesn't exist, create a new EventType with this data.
     * 
    **/
    create: XOR<EventTypeCreateInput, EventTypeUncheckedCreateInput>
    /**
     * In case the EventType was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EventTypeUpdateInput, EventTypeUncheckedUpdateInput>
  }


  /**
   * EventType delete
   */
  export type EventTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
    /**
     * Filter which EventType to delete.
     * 
    **/
    where: EventTypeWhereUniqueInput
  }


  /**
   * EventType deleteMany
   */
  export type EventTypeDeleteManyArgs = {
    /**
     * Filter which EventTypes to delete
     * 
    **/
    where?: EventTypeWhereInput
  }


  /**
   * EventType without action
   */
  export type EventTypeArgs = {
    /**
     * Select specific fields to fetch from the EventType
     * 
    **/
    select?: EventTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeInclude | null
  }



  /**
   * Model Credential
   */


  export type AggregateCredential = {
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  export type CredentialAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CredentialSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CredentialMinAggregateOutputType = {
    id: number | null
    type: string | null
    userId: number | null
    appId: string | null
  }

  export type CredentialMaxAggregateOutputType = {
    id: number | null
    type: string | null
    userId: number | null
    appId: string | null
  }

  export type CredentialCountAggregateOutputType = {
    id: number
    type: number
    key: number
    userId: number
    appId: number
    _all: number
  }


  export type CredentialAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CredentialSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CredentialMinAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    appId?: true
  }

  export type CredentialMaxAggregateInputType = {
    id?: true
    type?: true
    userId?: true
    appId?: true
  }

  export type CredentialCountAggregateInputType = {
    id?: true
    type?: true
    key?: true
    userId?: true
    appId?: true
    _all?: true
  }

  export type CredentialAggregateArgs = {
    /**
     * Filter which Credential to aggregate.
     * 
    **/
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     * 
    **/
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credentials
    **/
    _count?: true | CredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CredentialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CredentialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredentialMaxAggregateInputType
  }

  export type GetCredentialAggregateType<T extends CredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredential[P]>
      : GetScalarType<T[P], AggregateCredential[P]>
  }




  export type CredentialGroupByArgs = {
    where?: CredentialWhereInput
    orderBy?: Enumerable<CredentialOrderByWithAggregationInput>
    by: Array<CredentialScalarFieldEnum>
    having?: CredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredentialCountAggregateInputType | true
    _avg?: CredentialAvgAggregateInputType
    _sum?: CredentialSumAggregateInputType
    _min?: CredentialMinAggregateInputType
    _max?: CredentialMaxAggregateInputType
  }


  export type CredentialGroupByOutputType = {
    id: number
    type: string
    key: JsonValue
    userId: number | null
    appId: string | null
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  type GetCredentialGroupByPayload<T extends CredentialGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredentialGroupByOutputType[P]>
            : GetScalarType<T[P], CredentialGroupByOutputType[P]>
        }
      >
    >


  export type CredentialSelect = {
    id?: boolean
    type?: boolean
    key?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    app?: boolean | AppArgs
    appId?: boolean
    destinationCalendars?: boolean | DestinationCalendarFindManyArgs
    _count?: boolean | CredentialCountOutputTypeArgs
  }

  export type CredentialInclude = {
    user?: boolean | UserArgs
    app?: boolean | AppArgs
    destinationCalendars?: boolean | DestinationCalendarFindManyArgs
    _count?: boolean | CredentialCountOutputTypeArgs
  }

  export type CredentialGetPayload<
    S extends boolean | null | undefined | CredentialArgs,
    U = keyof S
      > = S extends true
        ? Credential
    : S extends undefined
    ? never
    : S extends CredentialArgs | CredentialFindManyArgs
    ?'include' extends U
    ? Credential  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'app' ? AppGetPayload<S['include'][P]> | null :
        P extends 'destinationCalendars' ? Array < DestinationCalendarGetPayload<S['include'][P]>>  :
        P extends '_count' ? CredentialCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'app' ? AppGetPayload<S['select'][P]> | null :
        P extends 'destinationCalendars' ? Array < DestinationCalendarGetPayload<S['select'][P]>>  :
        P extends '_count' ? CredentialCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Credential ? Credential[P] : never
  } 
    : Credential
  : Credential


  type CredentialCountArgs = Merge<
    Omit<CredentialFindManyArgs, 'select' | 'include'> & {
      select?: CredentialCountAggregateInputType | true
    }
  >

  export interface CredentialDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Credential that matches the filter.
     * @param {CredentialFindUniqueArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CredentialFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CredentialFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Credential'> extends True ? CheckSelect<T, Prisma__CredentialClient<Credential>, Prisma__CredentialClient<CredentialGetPayload<T>>> : CheckSelect<T, Prisma__CredentialClient<Credential | null >, Prisma__CredentialClient<CredentialGetPayload<T> | null >>

    /**
     * Find the first Credential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CredentialFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CredentialFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Credential'> extends True ? CheckSelect<T, Prisma__CredentialClient<Credential>, Prisma__CredentialClient<CredentialGetPayload<T>>> : CheckSelect<T, Prisma__CredentialClient<Credential | null >, Prisma__CredentialClient<CredentialGetPayload<T> | null >>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credential.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credential.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const credentialWithIdOnly = await prisma.credential.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CredentialFindManyArgs>(
      args?: SelectSubset<T, CredentialFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Credential>>, PrismaPromise<Array<CredentialGetPayload<T>>>>

    /**
     * Create a Credential.
     * @param {CredentialCreateArgs} args - Arguments to create a Credential.
     * @example
     * // Create one Credential
     * const Credential = await prisma.credential.create({
     *   data: {
     *     // ... data to create a Credential
     *   }
     * })
     * 
    **/
    create<T extends CredentialCreateArgs>(
      args: SelectSubset<T, CredentialCreateArgs>
    ): CheckSelect<T, Prisma__CredentialClient<Credential>, Prisma__CredentialClient<CredentialGetPayload<T>>>

    /**
     * Create many Credentials.
     *     @param {CredentialCreateManyArgs} args - Arguments to create many Credentials.
     *     @example
     *     // Create many Credentials
     *     const credential = await prisma.credential.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CredentialCreateManyArgs>(
      args?: SelectSubset<T, CredentialCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Credential.
     * @param {CredentialDeleteArgs} args - Arguments to delete one Credential.
     * @example
     * // Delete one Credential
     * const Credential = await prisma.credential.delete({
     *   where: {
     *     // ... filter to delete one Credential
     *   }
     * })
     * 
    **/
    delete<T extends CredentialDeleteArgs>(
      args: SelectSubset<T, CredentialDeleteArgs>
    ): CheckSelect<T, Prisma__CredentialClient<Credential>, Prisma__CredentialClient<CredentialGetPayload<T>>>

    /**
     * Update one Credential.
     * @param {CredentialUpdateArgs} args - Arguments to update one Credential.
     * @example
     * // Update one Credential
     * const credential = await prisma.credential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CredentialUpdateArgs>(
      args: SelectSubset<T, CredentialUpdateArgs>
    ): CheckSelect<T, Prisma__CredentialClient<Credential>, Prisma__CredentialClient<CredentialGetPayload<T>>>

    /**
     * Delete zero or more Credentials.
     * @param {CredentialDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CredentialDeleteManyArgs>(
      args?: SelectSubset<T, CredentialDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credential = await prisma.credential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CredentialUpdateManyArgs>(
      args: SelectSubset<T, CredentialUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Credential.
     * @param {CredentialUpsertArgs} args - Arguments to update or create a Credential.
     * @example
     * // Update or create a Credential
     * const credential = await prisma.credential.upsert({
     *   create: {
     *     // ... data to create a Credential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credential we want to update
     *   }
     * })
    **/
    upsert<T extends CredentialUpsertArgs>(
      args: SelectSubset<T, CredentialUpsertArgs>
    ): CheckSelect<T, Prisma__CredentialClient<Credential>, Prisma__CredentialClient<CredentialGetPayload<T>>>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credential.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends CredentialCountArgs>(
      args?: Subset<T, CredentialCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialAggregateArgs>(args: Subset<T, CredentialAggregateArgs>): PrismaPromise<GetCredentialAggregateType<T>>

    /**
     * Group by Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CredentialGroupByArgs['orderBy'] }
        : { orderBy?: CredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredentialGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Credential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CredentialClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    app<T extends AppArgs = {}>(args?: Subset<T, AppArgs>): CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>;

    destinationCalendars<T extends DestinationCalendarFindManyArgs = {}>(args?: Subset<T, DestinationCalendarFindManyArgs>): CheckSelect<T, PrismaPromise<Array<DestinationCalendar>>, PrismaPromise<Array<DestinationCalendarGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Credential findUnique
   */
  export type CredentialFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * Throw an Error if a Credential can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Credential to fetch.
     * 
    **/
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential findFirst
   */
  export type CredentialFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * Throw an Error if a Credential can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Credential to fetch.
     * 
    **/
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     * 
    **/
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     * 
    **/
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     * 
    **/
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * Credential findMany
   */
  export type CredentialFindManyArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * Filter, which Credentials to fetch.
     * 
    **/
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     * 
    **/
    orderBy?: Enumerable<CredentialOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credentials.
     * 
    **/
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CredentialScalarFieldEnum>
  }


  /**
   * Credential create
   */
  export type CredentialCreateArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * The data needed to create a Credential.
     * 
    **/
    data: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
  }


  /**
   * Credential createMany
   */
  export type CredentialCreateManyArgs = {
    /**
     * The data used to create many Credentials.
     * 
    **/
    data: Enumerable<CredentialCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Credential update
   */
  export type CredentialUpdateArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * The data needed to update a Credential.
     * 
    **/
    data: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
    /**
     * Choose, which Credential to update.
     * 
    **/
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential updateMany
   */
  export type CredentialUpdateManyArgs = {
    /**
     * The data used to update Credentials.
     * 
    **/
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyInput>
    /**
     * Filter which Credentials to update
     * 
    **/
    where?: CredentialWhereInput
  }


  /**
   * Credential upsert
   */
  export type CredentialUpsertArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * The filter to search for the Credential to update in case it exists.
     * 
    **/
    where: CredentialWhereUniqueInput
    /**
     * In case the Credential found by the `where` argument doesn't exist, create a new Credential with this data.
     * 
    **/
    create: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
    /**
     * In case the Credential was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
  }


  /**
   * Credential delete
   */
  export type CredentialDeleteArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
    /**
     * Filter which Credential to delete.
     * 
    **/
    where: CredentialWhereUniqueInput
  }


  /**
   * Credential deleteMany
   */
  export type CredentialDeleteManyArgs = {
    /**
     * Filter which Credentials to delete
     * 
    **/
    where?: CredentialWhereInput
  }


  /**
   * Credential without action
   */
  export type CredentialArgs = {
    /**
     * Select specific fields to fetch from the Credential
     * 
    **/
    select?: CredentialSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CredentialInclude | null
  }



  /**
   * Model DestinationCalendar
   */


  export type AggregateDestinationCalendar = {
    _count: DestinationCalendarCountAggregateOutputType | null
    _avg: DestinationCalendarAvgAggregateOutputType | null
    _sum: DestinationCalendarSumAggregateOutputType | null
    _min: DestinationCalendarMinAggregateOutputType | null
    _max: DestinationCalendarMaxAggregateOutputType | null
  }

  export type DestinationCalendarAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    credentialId: number | null
  }

  export type DestinationCalendarSumAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    credentialId: number | null
  }

  export type DestinationCalendarMinAggregateOutputType = {
    id: number | null
    integration: string | null
    externalId: string | null
    userId: number | null
    eventTypeId: number | null
    credentialId: number | null
  }

  export type DestinationCalendarMaxAggregateOutputType = {
    id: number | null
    integration: string | null
    externalId: string | null
    userId: number | null
    eventTypeId: number | null
    credentialId: number | null
  }

  export type DestinationCalendarCountAggregateOutputType = {
    id: number
    integration: number
    externalId: number
    userId: number
    eventTypeId: number
    credentialId: number
    _all: number
  }


  export type DestinationCalendarAvgAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    credentialId?: true
  }

  export type DestinationCalendarSumAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    credentialId?: true
  }

  export type DestinationCalendarMinAggregateInputType = {
    id?: true
    integration?: true
    externalId?: true
    userId?: true
    eventTypeId?: true
    credentialId?: true
  }

  export type DestinationCalendarMaxAggregateInputType = {
    id?: true
    integration?: true
    externalId?: true
    userId?: true
    eventTypeId?: true
    credentialId?: true
  }

  export type DestinationCalendarCountAggregateInputType = {
    id?: true
    integration?: true
    externalId?: true
    userId?: true
    eventTypeId?: true
    credentialId?: true
    _all?: true
  }

  export type DestinationCalendarAggregateArgs = {
    /**
     * Filter which DestinationCalendar to aggregate.
     * 
    **/
    where?: DestinationCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinationCalendars to fetch.
     * 
    **/
    orderBy?: Enumerable<DestinationCalendarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DestinationCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinationCalendars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinationCalendars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DestinationCalendars
    **/
    _count?: true | DestinationCalendarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DestinationCalendarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DestinationCalendarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DestinationCalendarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DestinationCalendarMaxAggregateInputType
  }

  export type GetDestinationCalendarAggregateType<T extends DestinationCalendarAggregateArgs> = {
        [P in keyof T & keyof AggregateDestinationCalendar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDestinationCalendar[P]>
      : GetScalarType<T[P], AggregateDestinationCalendar[P]>
  }




  export type DestinationCalendarGroupByArgs = {
    where?: DestinationCalendarWhereInput
    orderBy?: Enumerable<DestinationCalendarOrderByWithAggregationInput>
    by: Array<DestinationCalendarScalarFieldEnum>
    having?: DestinationCalendarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DestinationCalendarCountAggregateInputType | true
    _avg?: DestinationCalendarAvgAggregateInputType
    _sum?: DestinationCalendarSumAggregateInputType
    _min?: DestinationCalendarMinAggregateInputType
    _max?: DestinationCalendarMaxAggregateInputType
  }


  export type DestinationCalendarGroupByOutputType = {
    id: number
    integration: string
    externalId: string
    userId: number | null
    eventTypeId: number | null
    credentialId: number | null
    _count: DestinationCalendarCountAggregateOutputType | null
    _avg: DestinationCalendarAvgAggregateOutputType | null
    _sum: DestinationCalendarSumAggregateOutputType | null
    _min: DestinationCalendarMinAggregateOutputType | null
    _max: DestinationCalendarMaxAggregateOutputType | null
  }

  type GetDestinationCalendarGroupByPayload<T extends DestinationCalendarGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DestinationCalendarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DestinationCalendarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DestinationCalendarGroupByOutputType[P]>
            : GetScalarType<T[P], DestinationCalendarGroupByOutputType[P]>
        }
      >
    >


  export type DestinationCalendarSelect = {
    id?: boolean
    integration?: boolean
    externalId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    booking?: boolean | BookingFindManyArgs
    eventType?: boolean | EventTypeArgs
    eventTypeId?: boolean
    credentialId?: boolean
    credential?: boolean | CredentialArgs
    _count?: boolean | DestinationCalendarCountOutputTypeArgs
  }

  export type DestinationCalendarInclude = {
    user?: boolean | UserArgs
    booking?: boolean | BookingFindManyArgs
    eventType?: boolean | EventTypeArgs
    credential?: boolean | CredentialArgs
    _count?: boolean | DestinationCalendarCountOutputTypeArgs
  }

  export type DestinationCalendarGetPayload<
    S extends boolean | null | undefined | DestinationCalendarArgs,
    U = keyof S
      > = S extends true
        ? DestinationCalendar
    : S extends undefined
    ? never
    : S extends DestinationCalendarArgs | DestinationCalendarFindManyArgs
    ?'include' extends U
    ? DestinationCalendar  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'booking' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> | null :
        P extends 'credential' ? CredentialGetPayload<S['include'][P]> | null :
        P extends '_count' ? DestinationCalendarCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'booking' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> | null :
        P extends 'credential' ? CredentialGetPayload<S['select'][P]> | null :
        P extends '_count' ? DestinationCalendarCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof DestinationCalendar ? DestinationCalendar[P] : never
  } 
    : DestinationCalendar
  : DestinationCalendar


  type DestinationCalendarCountArgs = Merge<
    Omit<DestinationCalendarFindManyArgs, 'select' | 'include'> & {
      select?: DestinationCalendarCountAggregateInputType | true
    }
  >

  export interface DestinationCalendarDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DestinationCalendar that matches the filter.
     * @param {DestinationCalendarFindUniqueArgs} args - Arguments to find a DestinationCalendar
     * @example
     * // Get one DestinationCalendar
     * const destinationCalendar = await prisma.destinationCalendar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DestinationCalendarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DestinationCalendarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DestinationCalendar'> extends True ? CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar>, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T>>> : CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar | null >, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T> | null >>

    /**
     * Find the first DestinationCalendar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCalendarFindFirstArgs} args - Arguments to find a DestinationCalendar
     * @example
     * // Get one DestinationCalendar
     * const destinationCalendar = await prisma.destinationCalendar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DestinationCalendarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DestinationCalendarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DestinationCalendar'> extends True ? CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar>, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T>>> : CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar | null >, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T> | null >>

    /**
     * Find zero or more DestinationCalendars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCalendarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DestinationCalendars
     * const destinationCalendars = await prisma.destinationCalendar.findMany()
     * 
     * // Get first 10 DestinationCalendars
     * const destinationCalendars = await prisma.destinationCalendar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const destinationCalendarWithIdOnly = await prisma.destinationCalendar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DestinationCalendarFindManyArgs>(
      args?: SelectSubset<T, DestinationCalendarFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DestinationCalendar>>, PrismaPromise<Array<DestinationCalendarGetPayload<T>>>>

    /**
     * Create a DestinationCalendar.
     * @param {DestinationCalendarCreateArgs} args - Arguments to create a DestinationCalendar.
     * @example
     * // Create one DestinationCalendar
     * const DestinationCalendar = await prisma.destinationCalendar.create({
     *   data: {
     *     // ... data to create a DestinationCalendar
     *   }
     * })
     * 
    **/
    create<T extends DestinationCalendarCreateArgs>(
      args: SelectSubset<T, DestinationCalendarCreateArgs>
    ): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar>, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T>>>

    /**
     * Create many DestinationCalendars.
     *     @param {DestinationCalendarCreateManyArgs} args - Arguments to create many DestinationCalendars.
     *     @example
     *     // Create many DestinationCalendars
     *     const destinationCalendar = await prisma.destinationCalendar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DestinationCalendarCreateManyArgs>(
      args?: SelectSubset<T, DestinationCalendarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DestinationCalendar.
     * @param {DestinationCalendarDeleteArgs} args - Arguments to delete one DestinationCalendar.
     * @example
     * // Delete one DestinationCalendar
     * const DestinationCalendar = await prisma.destinationCalendar.delete({
     *   where: {
     *     // ... filter to delete one DestinationCalendar
     *   }
     * })
     * 
    **/
    delete<T extends DestinationCalendarDeleteArgs>(
      args: SelectSubset<T, DestinationCalendarDeleteArgs>
    ): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar>, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T>>>

    /**
     * Update one DestinationCalendar.
     * @param {DestinationCalendarUpdateArgs} args - Arguments to update one DestinationCalendar.
     * @example
     * // Update one DestinationCalendar
     * const destinationCalendar = await prisma.destinationCalendar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DestinationCalendarUpdateArgs>(
      args: SelectSubset<T, DestinationCalendarUpdateArgs>
    ): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar>, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T>>>

    /**
     * Delete zero or more DestinationCalendars.
     * @param {DestinationCalendarDeleteManyArgs} args - Arguments to filter DestinationCalendars to delete.
     * @example
     * // Delete a few DestinationCalendars
     * const { count } = await prisma.destinationCalendar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DestinationCalendarDeleteManyArgs>(
      args?: SelectSubset<T, DestinationCalendarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DestinationCalendars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCalendarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DestinationCalendars
     * const destinationCalendar = await prisma.destinationCalendar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DestinationCalendarUpdateManyArgs>(
      args: SelectSubset<T, DestinationCalendarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DestinationCalendar.
     * @param {DestinationCalendarUpsertArgs} args - Arguments to update or create a DestinationCalendar.
     * @example
     * // Update or create a DestinationCalendar
     * const destinationCalendar = await prisma.destinationCalendar.upsert({
     *   create: {
     *     // ... data to create a DestinationCalendar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DestinationCalendar we want to update
     *   }
     * })
    **/
    upsert<T extends DestinationCalendarUpsertArgs>(
      args: SelectSubset<T, DestinationCalendarUpsertArgs>
    ): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar>, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T>>>

    /**
     * Count the number of DestinationCalendars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCalendarCountArgs} args - Arguments to filter DestinationCalendars to count.
     * @example
     * // Count the number of DestinationCalendars
     * const count = await prisma.destinationCalendar.count({
     *   where: {
     *     // ... the filter for the DestinationCalendars we want to count
     *   }
     * })
    **/
    count<T extends DestinationCalendarCountArgs>(
      args?: Subset<T, DestinationCalendarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DestinationCalendarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DestinationCalendar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DestinationCalendarAggregateArgs>(args: Subset<T, DestinationCalendarAggregateArgs>): PrismaPromise<GetDestinationCalendarAggregateType<T>>

    /**
     * Group by DestinationCalendar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DestinationCalendarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DestinationCalendarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DestinationCalendarGroupByArgs['orderBy'] }
        : { orderBy?: DestinationCalendarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DestinationCalendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestinationCalendarGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DestinationCalendar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DestinationCalendarClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    booking<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    credential<T extends CredentialArgs = {}>(args?: Subset<T, CredentialArgs>): CheckSelect<T, Prisma__CredentialClient<Credential | null >, Prisma__CredentialClient<CredentialGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DestinationCalendar findUnique
   */
  export type DestinationCalendarFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * Throw an Error if a DestinationCalendar can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DestinationCalendar to fetch.
     * 
    **/
    where: DestinationCalendarWhereUniqueInput
  }


  /**
   * DestinationCalendar findFirst
   */
  export type DestinationCalendarFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * Throw an Error if a DestinationCalendar can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DestinationCalendar to fetch.
     * 
    **/
    where?: DestinationCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinationCalendars to fetch.
     * 
    **/
    orderBy?: Enumerable<DestinationCalendarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DestinationCalendars.
     * 
    **/
    cursor?: DestinationCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinationCalendars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinationCalendars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DestinationCalendars.
     * 
    **/
    distinct?: Enumerable<DestinationCalendarScalarFieldEnum>
  }


  /**
   * DestinationCalendar findMany
   */
  export type DestinationCalendarFindManyArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * Filter, which DestinationCalendars to fetch.
     * 
    **/
    where?: DestinationCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DestinationCalendars to fetch.
     * 
    **/
    orderBy?: Enumerable<DestinationCalendarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DestinationCalendars.
     * 
    **/
    cursor?: DestinationCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DestinationCalendars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DestinationCalendars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DestinationCalendarScalarFieldEnum>
  }


  /**
   * DestinationCalendar create
   */
  export type DestinationCalendarCreateArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * The data needed to create a DestinationCalendar.
     * 
    **/
    data: XOR<DestinationCalendarCreateInput, DestinationCalendarUncheckedCreateInput>
  }


  /**
   * DestinationCalendar createMany
   */
  export type DestinationCalendarCreateManyArgs = {
    /**
     * The data used to create many DestinationCalendars.
     * 
    **/
    data: Enumerable<DestinationCalendarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DestinationCalendar update
   */
  export type DestinationCalendarUpdateArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * The data needed to update a DestinationCalendar.
     * 
    **/
    data: XOR<DestinationCalendarUpdateInput, DestinationCalendarUncheckedUpdateInput>
    /**
     * Choose, which DestinationCalendar to update.
     * 
    **/
    where: DestinationCalendarWhereUniqueInput
  }


  /**
   * DestinationCalendar updateMany
   */
  export type DestinationCalendarUpdateManyArgs = {
    /**
     * The data used to update DestinationCalendars.
     * 
    **/
    data: XOR<DestinationCalendarUpdateManyMutationInput, DestinationCalendarUncheckedUpdateManyInput>
    /**
     * Filter which DestinationCalendars to update
     * 
    **/
    where?: DestinationCalendarWhereInput
  }


  /**
   * DestinationCalendar upsert
   */
  export type DestinationCalendarUpsertArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * The filter to search for the DestinationCalendar to update in case it exists.
     * 
    **/
    where: DestinationCalendarWhereUniqueInput
    /**
     * In case the DestinationCalendar found by the `where` argument doesn't exist, create a new DestinationCalendar with this data.
     * 
    **/
    create: XOR<DestinationCalendarCreateInput, DestinationCalendarUncheckedCreateInput>
    /**
     * In case the DestinationCalendar was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DestinationCalendarUpdateInput, DestinationCalendarUncheckedUpdateInput>
  }


  /**
   * DestinationCalendar delete
   */
  export type DestinationCalendarDeleteArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
    /**
     * Filter which DestinationCalendar to delete.
     * 
    **/
    where: DestinationCalendarWhereUniqueInput
  }


  /**
   * DestinationCalendar deleteMany
   */
  export type DestinationCalendarDeleteManyArgs = {
    /**
     * Filter which DestinationCalendars to delete
     * 
    **/
    where?: DestinationCalendarWhereInput
  }


  /**
   * DestinationCalendar without action
   */
  export type DestinationCalendarArgs = {
    /**
     * Select specific fields to fetch from the DestinationCalendar
     * 
    **/
    select?: DestinationCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DestinationCalendarInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    startTime: number | null
    endTime: number | null
    bufferTime: number | null
    defaultScheduleId: number | null
    timeFormat: number | null
    invitedTo: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    startTime: number | null
    endTime: number | null
    bufferTime: number | null
    defaultScheduleId: number | null
    timeFormat: number | null
    invitedTo: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    bio: string | null
    avatar: string | null
    timeZone: string | null
    weekStart: string | null
    startTime: number | null
    endTime: number | null
    bufferTime: number | null
    hideBranding: boolean | null
    theme: string | null
    createdDate: Date | null
    trialEndsAt: Date | null
    defaultScheduleId: number | null
    completedOnboarding: boolean | null
    locale: string | null
    timeFormat: number | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean | null
    identityProvider: IdentityProvider | null
    identityProviderId: string | null
    invitedTo: number | null
    plan: UserPlan | null
    brandColor: string | null
    darkBrandColor: string | null
    away: boolean | null
    allowDynamicBooking: boolean | null
    verified: boolean | null
    role: UserPermissionRole | null
    disableImpersonation: boolean | null
    emailVerificationToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    bio: string | null
    avatar: string | null
    timeZone: string | null
    weekStart: string | null
    startTime: number | null
    endTime: number | null
    bufferTime: number | null
    hideBranding: boolean | null
    theme: string | null
    createdDate: Date | null
    trialEndsAt: Date | null
    defaultScheduleId: number | null
    completedOnboarding: boolean | null
    locale: string | null
    timeFormat: number | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean | null
    identityProvider: IdentityProvider | null
    identityProviderId: string | null
    invitedTo: number | null
    plan: UserPlan | null
    brandColor: string | null
    darkBrandColor: string | null
    away: boolean | null
    allowDynamicBooking: boolean | null
    verified: boolean | null
    role: UserPermissionRole | null
    disableImpersonation: boolean | null
    emailVerificationToken: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    name: number
    email: number
    emailVerified: number
    password: number
    bio: number
    avatar: number
    timeZone: number
    weekStart: number
    startTime: number
    endTime: number
    bufferTime: number
    hideBranding: number
    theme: number
    createdDate: number
    trialEndsAt: number
    defaultScheduleId: number
    completedOnboarding: number
    locale: number
    timeFormat: number
    twoFactorSecret: number
    twoFactorEnabled: number
    identityProvider: number
    identityProviderId: number
    invitedTo: number
    plan: number
    brandColor: number
    darkBrandColor: number
    away: number
    allowDynamicBooking: number
    metadata: number
    verified: number
    role: number
    disableImpersonation: number
    emailVerificationToken: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    bufferTime?: true
    defaultScheduleId?: true
    timeFormat?: true
    invitedTo?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    startTime?: true
    endTime?: true
    bufferTime?: true
    defaultScheduleId?: true
    timeFormat?: true
    invitedTo?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    bio?: true
    avatar?: true
    timeZone?: true
    weekStart?: true
    startTime?: true
    endTime?: true
    bufferTime?: true
    hideBranding?: true
    theme?: true
    createdDate?: true
    trialEndsAt?: true
    defaultScheduleId?: true
    completedOnboarding?: true
    locale?: true
    timeFormat?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    identityProvider?: true
    identityProviderId?: true
    invitedTo?: true
    plan?: true
    brandColor?: true
    darkBrandColor?: true
    away?: true
    allowDynamicBooking?: true
    verified?: true
    role?: true
    disableImpersonation?: true
    emailVerificationToken?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    bio?: true
    avatar?: true
    timeZone?: true
    weekStart?: true
    startTime?: true
    endTime?: true
    bufferTime?: true
    hideBranding?: true
    theme?: true
    createdDate?: true
    trialEndsAt?: true
    defaultScheduleId?: true
    completedOnboarding?: true
    locale?: true
    timeFormat?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    identityProvider?: true
    identityProviderId?: true
    invitedTo?: true
    plan?: true
    brandColor?: true
    darkBrandColor?: true
    away?: true
    allowDynamicBooking?: true
    verified?: true
    role?: true
    disableImpersonation?: true
    emailVerificationToken?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    bio?: true
    avatar?: true
    timeZone?: true
    weekStart?: true
    startTime?: true
    endTime?: true
    bufferTime?: true
    hideBranding?: true
    theme?: true
    createdDate?: true
    trialEndsAt?: true
    defaultScheduleId?: true
    completedOnboarding?: true
    locale?: true
    timeFormat?: true
    twoFactorSecret?: true
    twoFactorEnabled?: true
    identityProvider?: true
    identityProviderId?: true
    invitedTo?: true
    plan?: true
    brandColor?: true
    darkBrandColor?: true
    away?: true
    allowDynamicBooking?: true
    metadata?: true
    verified?: true
    role?: true
    disableImpersonation?: true
    emailVerificationToken?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string | null
    name: string | null
    email: string
    emailVerified: Date | null
    password: string | null
    bio: string | null
    avatar: string | null
    timeZone: string
    weekStart: string
    startTime: number
    endTime: number
    bufferTime: number
    hideBranding: boolean
    theme: string | null
    createdDate: Date
    trialEndsAt: Date | null
    defaultScheduleId: number | null
    completedOnboarding: boolean
    locale: string | null
    timeFormat: number | null
    twoFactorSecret: string | null
    twoFactorEnabled: boolean
    identityProvider: IdentityProvider
    identityProviderId: string | null
    invitedTo: number | null
    plan: UserPlan
    brandColor: string
    darkBrandColor: string
    away: boolean
    allowDynamicBooking: boolean | null
    metadata: JsonValue | null
    verified: boolean | null
    role: UserPermissionRole
    disableImpersonation: boolean
    emailVerificationToken: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    bio?: boolean
    avatar?: boolean
    timeZone?: boolean
    weekStart?: boolean
    startTime?: boolean
    endTime?: boolean
    bufferTime?: boolean
    hideBranding?: boolean
    theme?: boolean
    createdDate?: boolean
    trialEndsAt?: boolean
    eventTypes?: boolean | EventTypeFindManyArgs
    credentials?: boolean | CredentialFindManyArgs
    teams?: boolean | MembershipFindManyArgs
    bookings?: boolean | BookingFindManyArgs
    schedules?: boolean | ScheduleFindManyArgs
    defaultScheduleId?: boolean
    selectedCalendars?: boolean | SelectedCalendarFindManyArgs
    completedOnboarding?: boolean
    locale?: boolean
    timeFormat?: boolean
    twoFactorSecret?: boolean
    twoFactorEnabled?: boolean
    identityProvider?: boolean
    identityProviderId?: boolean
    availability?: boolean | AvailabilityFindManyArgs
    invitedTo?: boolean
    plan?: boolean
    webhooks?: boolean | WebhookFindManyArgs
    brandColor?: boolean
    darkBrandColor?: boolean
    destinationCalendar?: boolean | DestinationCalendarArgs
    away?: boolean
    allowDynamicBooking?: boolean
    metadata?: boolean
    verified?: boolean
    role?: boolean
    disableImpersonation?: boolean
    impersonatedUsers?: boolean | ImpersonationsFindManyArgs
    impersonatedBy?: boolean | ImpersonationsFindManyArgs
    apiKeys?: boolean | ApiKeyFindManyArgs
    accounts?: boolean | AccountFindManyArgs
    sessions?: boolean | SessionFindManyArgs
    workflows?: boolean | WorkflowFindManyArgs
    routingForms?: boolean | App_RoutingForms_FormFindManyArgs
    Feedback?: boolean | FeedbackFindManyArgs
    emailVerificationToken?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    eventTypes?: boolean | EventTypeFindManyArgs
    credentials?: boolean | CredentialFindManyArgs
    teams?: boolean | MembershipFindManyArgs
    bookings?: boolean | BookingFindManyArgs
    schedules?: boolean | ScheduleFindManyArgs
    selectedCalendars?: boolean | SelectedCalendarFindManyArgs
    availability?: boolean | AvailabilityFindManyArgs
    webhooks?: boolean | WebhookFindManyArgs
    destinationCalendar?: boolean | DestinationCalendarArgs
    impersonatedUsers?: boolean | ImpersonationsFindManyArgs
    impersonatedBy?: boolean | ImpersonationsFindManyArgs
    apiKeys?: boolean | ApiKeyFindManyArgs
    accounts?: boolean | AccountFindManyArgs
    sessions?: boolean | SessionFindManyArgs
    workflows?: boolean | WorkflowFindManyArgs
    routingForms?: boolean | App_RoutingForms_FormFindManyArgs
    Feedback?: boolean | FeedbackFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'eventTypes' ? Array < EventTypeGetPayload<S['include'][P]>>  :
        P extends 'credentials' ? Array < CredentialGetPayload<S['include'][P]>>  :
        P extends 'teams' ? Array < MembershipGetPayload<S['include'][P]>>  :
        P extends 'bookings' ? Array < BookingGetPayload<S['include'][P]>>  :
        P extends 'schedules' ? Array < ScheduleGetPayload<S['include'][P]>>  :
        P extends 'selectedCalendars' ? Array < SelectedCalendarGetPayload<S['include'][P]>>  :
        P extends 'availability' ? Array < AvailabilityGetPayload<S['include'][P]>>  :
        P extends 'webhooks' ? Array < WebhookGetPayload<S['include'][P]>>  :
        P extends 'destinationCalendar' ? DestinationCalendarGetPayload<S['include'][P]> | null :
        P extends 'impersonatedUsers' ? Array < ImpersonationsGetPayload<S['include'][P]>>  :
        P extends 'impersonatedBy' ? Array < ImpersonationsGetPayload<S['include'][P]>>  :
        P extends 'apiKeys' ? Array < ApiKeyGetPayload<S['include'][P]>>  :
        P extends 'accounts' ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'workflows' ? Array < WorkflowGetPayload<S['include'][P]>>  :
        P extends 'routingForms' ? Array < App_RoutingForms_FormGetPayload<S['include'][P]>>  :
        P extends 'Feedback' ? Array < FeedbackGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'eventTypes' ? Array < EventTypeGetPayload<S['select'][P]>>  :
        P extends 'credentials' ? Array < CredentialGetPayload<S['select'][P]>>  :
        P extends 'teams' ? Array < MembershipGetPayload<S['select'][P]>>  :
        P extends 'bookings' ? Array < BookingGetPayload<S['select'][P]>>  :
        P extends 'schedules' ? Array < ScheduleGetPayload<S['select'][P]>>  :
        P extends 'selectedCalendars' ? Array < SelectedCalendarGetPayload<S['select'][P]>>  :
        P extends 'availability' ? Array < AvailabilityGetPayload<S['select'][P]>>  :
        P extends 'webhooks' ? Array < WebhookGetPayload<S['select'][P]>>  :
        P extends 'destinationCalendar' ? DestinationCalendarGetPayload<S['select'][P]> | null :
        P extends 'impersonatedUsers' ? Array < ImpersonationsGetPayload<S['select'][P]>>  :
        P extends 'impersonatedBy' ? Array < ImpersonationsGetPayload<S['select'][P]>>  :
        P extends 'apiKeys' ? Array < ApiKeyGetPayload<S['select'][P]>>  :
        P extends 'accounts' ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'workflows' ? Array < WorkflowGetPayload<S['select'][P]>>  :
        P extends 'routingForms' ? Array < App_RoutingForms_FormGetPayload<S['select'][P]>>  :
        P extends 'Feedback' ? Array < FeedbackGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    eventTypes<T extends EventTypeFindManyArgs = {}>(args?: Subset<T, EventTypeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EventType>>, PrismaPromise<Array<EventTypeGetPayload<T>>>>;

    credentials<T extends CredentialFindManyArgs = {}>(args?: Subset<T, CredentialFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Credential>>, PrismaPromise<Array<CredentialGetPayload<T>>>>;

    teams<T extends MembershipFindManyArgs = {}>(args?: Subset<T, MembershipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Membership>>, PrismaPromise<Array<MembershipGetPayload<T>>>>;

    bookings<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    schedules<T extends ScheduleFindManyArgs = {}>(args?: Subset<T, ScheduleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Schedule>>, PrismaPromise<Array<ScheduleGetPayload<T>>>>;

    selectedCalendars<T extends SelectedCalendarFindManyArgs = {}>(args?: Subset<T, SelectedCalendarFindManyArgs>): CheckSelect<T, PrismaPromise<Array<SelectedCalendar>>, PrismaPromise<Array<SelectedCalendarGetPayload<T>>>>;

    availability<T extends AvailabilityFindManyArgs = {}>(args?: Subset<T, AvailabilityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Availability>>, PrismaPromise<Array<AvailabilityGetPayload<T>>>>;

    webhooks<T extends WebhookFindManyArgs = {}>(args?: Subset<T, WebhookFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Webhook>>, PrismaPromise<Array<WebhookGetPayload<T>>>>;

    destinationCalendar<T extends DestinationCalendarArgs = {}>(args?: Subset<T, DestinationCalendarArgs>): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar | null >, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T> | null >>;

    impersonatedUsers<T extends ImpersonationsFindManyArgs = {}>(args?: Subset<T, ImpersonationsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Impersonations>>, PrismaPromise<Array<ImpersonationsGetPayload<T>>>>;

    impersonatedBy<T extends ImpersonationsFindManyArgs = {}>(args?: Subset<T, ImpersonationsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Impersonations>>, PrismaPromise<Array<ImpersonationsGetPayload<T>>>>;

    apiKeys<T extends ApiKeyFindManyArgs = {}>(args?: Subset<T, ApiKeyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>;

    accounts<T extends AccountFindManyArgs = {}>(args?: Subset<T, AccountFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>;

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    workflows<T extends WorkflowFindManyArgs = {}>(args?: Subset<T, WorkflowFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Workflow>>, PrismaPromise<Array<WorkflowGetPayload<T>>>>;

    routingForms<T extends App_RoutingForms_FormFindManyArgs = {}>(args?: Subset<T, App_RoutingForms_FormFindManyArgs>): CheckSelect<T, PrismaPromise<Array<App_RoutingForms_Form>>, PrismaPromise<Array<App_RoutingForms_FormGetPayload<T>>>>;

    Feedback<T extends FeedbackFindManyArgs = {}>(args?: Subset<T, FeedbackFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Feedback>>, PrismaPromise<Array<FeedbackGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Team
   */


  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    logo: string | null
    bio: string | null
    hideBranding: boolean | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    logo: string | null
    bio: string | null
    hideBranding: boolean | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    logo: number
    bio: number
    hideBranding: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    bio?: true
    hideBranding?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    bio?: true
    hideBranding?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    bio?: true
    hideBranding?: true
    _all?: true
  }

  export type TeamAggregateArgs = {
    /**
     * Filter which Team to aggregate.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs = {
    where?: TeamWhereInput
    orderBy?: Enumerable<TeamOrderByWithAggregationInput>
    by: Array<TeamScalarFieldEnum>
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }


  export type TeamGroupByOutputType = {
    id: number
    name: string | null
    slug: string | null
    logo: string | null
    bio: string | null
    hideBranding: boolean
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect = {
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    bio?: boolean
    hideBranding?: boolean
    members?: boolean | MembershipFindManyArgs
    eventTypes?: boolean | EventTypeFindManyArgs
    _count?: boolean | TeamCountOutputTypeArgs
  }

  export type TeamInclude = {
    members?: boolean | MembershipFindManyArgs
    eventTypes?: boolean | EventTypeFindManyArgs
    _count?: boolean | TeamCountOutputTypeArgs
  }

  export type TeamGetPayload<
    S extends boolean | null | undefined | TeamArgs,
    U = keyof S
      > = S extends true
        ? Team
    : S extends undefined
    ? never
    : S extends TeamArgs | TeamFindManyArgs
    ?'include' extends U
    ? Team  & {
    [P in TrueKeys<S['include']>]:
        P extends 'members' ? Array < MembershipGetPayload<S['include'][P]>>  :
        P extends 'eventTypes' ? Array < EventTypeGetPayload<S['include'][P]>>  :
        P extends '_count' ? TeamCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'members' ? Array < MembershipGetPayload<S['select'][P]>>  :
        P extends 'eventTypes' ? Array < EventTypeGetPayload<S['select'][P]>>  :
        P extends '_count' ? TeamCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Team ? Team[P] : never
  } 
    : Team
  : Team


  type TeamCountArgs = Merge<
    Omit<TeamFindManyArgs, 'select' | 'include'> & {
      select?: TeamCountAggregateInputType | true
    }
  >

  export interface TeamDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Team'> extends True ? CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>> : CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Team'> extends True ? CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>> : CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs>(
      args?: SelectSubset<T, TeamFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Team>>, PrismaPromise<Array<TeamGetPayload<T>>>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs>(
      args: SelectSubset<T, TeamCreateArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs>(
      args?: SelectSubset<T, TeamCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs>(
      args: SelectSubset<T, TeamDeleteArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs>(
      args: SelectSubset<T, TeamUpdateArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs>(
      args?: SelectSubset<T, TeamDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs>(
      args: SelectSubset<T, TeamUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs>(
      args: SelectSubset<T, TeamUpsertArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    members<T extends MembershipFindManyArgs = {}>(args?: Subset<T, MembershipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Membership>>, PrismaPromise<Array<MembershipGetPayload<T>>>>;

    eventTypes<T extends EventTypeFindManyArgs = {}>(args?: Subset<T, EventTypeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EventType>>, PrismaPromise<Array<EventTypeGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Throw an Error if a Team can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Throw an Error if a Team can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     * 
    **/
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Teams to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team create
   */
  export type TeamCreateArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The data needed to create a Team.
     * 
    **/
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs = {
    /**
     * The data used to create many Teams.
     * 
    **/
    data: Enumerable<TeamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The data needed to update a Team.
     * 
    **/
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs = {
    /**
     * The data used to update Teams.
     * 
    **/
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     * 
    **/
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The filter to search for the Team to update in case it exists.
     * 
    **/
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     * 
    **/
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter which Team to delete.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs = {
    /**
     * Filter which Teams to delete
     * 
    **/
    where?: TeamWhereInput
  }


  /**
   * Team without action
   */
  export type TeamArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
  }



  /**
   * Model Membership
   */


  export type AggregateMembership = {
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  export type MembershipAvgAggregateOutputType = {
    teamId: number | null
    userId: number | null
  }

  export type MembershipSumAggregateOutputType = {
    teamId: number | null
    userId: number | null
  }

  export type MembershipMinAggregateOutputType = {
    teamId: number | null
    userId: number | null
    accepted: boolean | null
    role: MembershipRole | null
  }

  export type MembershipMaxAggregateOutputType = {
    teamId: number | null
    userId: number | null
    accepted: boolean | null
    role: MembershipRole | null
  }

  export type MembershipCountAggregateOutputType = {
    teamId: number
    userId: number
    accepted: number
    role: number
    _all: number
  }


  export type MembershipAvgAggregateInputType = {
    teamId?: true
    userId?: true
  }

  export type MembershipSumAggregateInputType = {
    teamId?: true
    userId?: true
  }

  export type MembershipMinAggregateInputType = {
    teamId?: true
    userId?: true
    accepted?: true
    role?: true
  }

  export type MembershipMaxAggregateInputType = {
    teamId?: true
    userId?: true
    accepted?: true
    role?: true
  }

  export type MembershipCountAggregateInputType = {
    teamId?: true
    userId?: true
    accepted?: true
    role?: true
    _all?: true
  }

  export type MembershipAggregateArgs = {
    /**
     * Filter which Membership to aggregate.
     * 
    **/
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Memberships
    **/
    _count?: true | MembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembershipMaxAggregateInputType
  }

  export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembership[P]>
      : GetScalarType<T[P], AggregateMembership[P]>
  }




  export type MembershipGroupByArgs = {
    where?: MembershipWhereInput
    orderBy?: Enumerable<MembershipOrderByWithAggregationInput>
    by: Array<MembershipScalarFieldEnum>
    having?: MembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembershipCountAggregateInputType | true
    _avg?: MembershipAvgAggregateInputType
    _sum?: MembershipSumAggregateInputType
    _min?: MembershipMinAggregateInputType
    _max?: MembershipMaxAggregateInputType
  }


  export type MembershipGroupByOutputType = {
    teamId: number
    userId: number
    accepted: boolean
    role: MembershipRole
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembershipGroupByOutputType[P]>
            : GetScalarType<T[P], MembershipGroupByOutputType[P]>
        }
      >
    >


  export type MembershipSelect = {
    teamId?: boolean
    userId?: boolean
    accepted?: boolean
    role?: boolean
    team?: boolean | TeamArgs
    user?: boolean | UserArgs
  }

  export type MembershipInclude = {
    team?: boolean | TeamArgs
    user?: boolean | UserArgs
  }

  export type MembershipGetPayload<
    S extends boolean | null | undefined | MembershipArgs,
    U = keyof S
      > = S extends true
        ? Membership
    : S extends undefined
    ? never
    : S extends MembershipArgs | MembershipFindManyArgs
    ?'include' extends U
    ? Membership  & {
    [P in TrueKeys<S['include']>]:
        P extends 'team' ? TeamGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'team' ? TeamGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Membership ? Membership[P] : never
  } 
    : Membership
  : Membership


  type MembershipCountArgs = Merge<
    Omit<MembershipFindManyArgs, 'select' | 'include'> & {
      select?: MembershipCountAggregateInputType | true
    }
  >

  export interface MembershipDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Membership that matches the filter.
     * @param {MembershipFindUniqueArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MembershipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MembershipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Membership'> extends True ? CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>> : CheckSelect<T, Prisma__MembershipClient<Membership | null >, Prisma__MembershipClient<MembershipGetPayload<T> | null >>

    /**
     * Find the first Membership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindFirstArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MembershipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MembershipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Membership'> extends True ? CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>> : CheckSelect<T, Prisma__MembershipClient<Membership | null >, Prisma__MembershipClient<MembershipGetPayload<T> | null >>

    /**
     * Find zero or more Memberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memberships
     * const memberships = await prisma.membership.findMany()
     * 
     * // Get first 10 Memberships
     * const memberships = await prisma.membership.findMany({ take: 10 })
     * 
     * // Only select the `teamId`
     * const membershipWithTeamIdOnly = await prisma.membership.findMany({ select: { teamId: true } })
     * 
    **/
    findMany<T extends MembershipFindManyArgs>(
      args?: SelectSubset<T, MembershipFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Membership>>, PrismaPromise<Array<MembershipGetPayload<T>>>>

    /**
     * Create a Membership.
     * @param {MembershipCreateArgs} args - Arguments to create a Membership.
     * @example
     * // Create one Membership
     * const Membership = await prisma.membership.create({
     *   data: {
     *     // ... data to create a Membership
     *   }
     * })
     * 
    **/
    create<T extends MembershipCreateArgs>(
      args: SelectSubset<T, MembershipCreateArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Create many Memberships.
     *     @param {MembershipCreateManyArgs} args - Arguments to create many Memberships.
     *     @example
     *     // Create many Memberships
     *     const membership = await prisma.membership.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MembershipCreateManyArgs>(
      args?: SelectSubset<T, MembershipCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Membership.
     * @param {MembershipDeleteArgs} args - Arguments to delete one Membership.
     * @example
     * // Delete one Membership
     * const Membership = await prisma.membership.delete({
     *   where: {
     *     // ... filter to delete one Membership
     *   }
     * })
     * 
    **/
    delete<T extends MembershipDeleteArgs>(
      args: SelectSubset<T, MembershipDeleteArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Update one Membership.
     * @param {MembershipUpdateArgs} args - Arguments to update one Membership.
     * @example
     * // Update one Membership
     * const membership = await prisma.membership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MembershipUpdateArgs>(
      args: SelectSubset<T, MembershipUpdateArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Delete zero or more Memberships.
     * @param {MembershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
     * @example
     * // Delete a few Memberships
     * const { count } = await prisma.membership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MembershipDeleteManyArgs>(
      args?: SelectSubset<T, MembershipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MembershipUpdateManyArgs>(
      args: SelectSubset<T, MembershipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Membership.
     * @param {MembershipUpsertArgs} args - Arguments to update or create a Membership.
     * @example
     * // Update or create a Membership
     * const membership = await prisma.membership.upsert({
     *   create: {
     *     // ... data to create a Membership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membership we want to update
     *   }
     * })
    **/
    upsert<T extends MembershipUpsertArgs>(
      args: SelectSubset<T, MembershipUpsertArgs>
    ): CheckSelect<T, Prisma__MembershipClient<Membership>, Prisma__MembershipClient<MembershipGetPayload<T>>>

    /**
     * Count the number of Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipCountArgs} args - Arguments to filter Memberships to count.
     * @example
     * // Count the number of Memberships
     * const count = await prisma.membership.count({
     *   where: {
     *     // ... the filter for the Memberships we want to count
     *   }
     * })
    **/
    count<T extends MembershipCountArgs>(
      args?: Subset<T, MembershipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembershipAggregateArgs>(args: Subset<T, MembershipAggregateArgs>): PrismaPromise<GetMembershipAggregateType<T>>

    /**
     * Group by Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembershipGroupByArgs['orderBy'] }
        : { orderBy?: MembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembershipGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Membership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MembershipClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    team<T extends TeamArgs = {}>(args?: Subset<T, TeamArgs>): CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Membership findUnique
   */
  export type MembershipFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Throw an Error if a Membership can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Membership to fetch.
     * 
    **/
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership findFirst
   */
  export type MembershipFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Throw an Error if a Membership can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Membership to fetch.
     * 
    **/
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memberships.
     * 
    **/
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memberships.
     * 
    **/
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Membership findMany
   */
  export type MembershipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Filter, which Memberships to fetch.
     * 
    **/
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Memberships.
     * 
    **/
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Membership create
   */
  export type MembershipCreateArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * The data needed to create a Membership.
     * 
    **/
    data: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
  }


  /**
   * Membership createMany
   */
  export type MembershipCreateManyArgs = {
    /**
     * The data used to create many Memberships.
     * 
    **/
    data: Enumerable<MembershipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Membership update
   */
  export type MembershipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * The data needed to update a Membership.
     * 
    **/
    data: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
    /**
     * Choose, which Membership to update.
     * 
    **/
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership updateMany
   */
  export type MembershipUpdateManyArgs = {
    /**
     * The data used to update Memberships.
     * 
    **/
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyInput>
    /**
     * Filter which Memberships to update
     * 
    **/
    where?: MembershipWhereInput
  }


  /**
   * Membership upsert
   */
  export type MembershipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * The filter to search for the Membership to update in case it exists.
     * 
    **/
    where: MembershipWhereUniqueInput
    /**
     * In case the Membership found by the `where` argument doesn't exist, create a new Membership with this data.
     * 
    **/
    create: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
    /**
     * In case the Membership was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
  }


  /**
   * Membership delete
   */
  export type MembershipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
    /**
     * Filter which Membership to delete.
     * 
    **/
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership deleteMany
   */
  export type MembershipDeleteManyArgs = {
    /**
     * Filter which Memberships to delete
     * 
    **/
    where?: MembershipWhereInput
  }


  /**
   * Membership without action
   */
  export type MembershipArgs = {
    /**
     * Select specific fields to fetch from the Membership
     * 
    **/
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MembershipInclude | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _avg: VerificationTokenAvgAggregateOutputType | null
    _sum: VerificationTokenSumAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type VerificationTokenSumAggregateOutputType = {
    id: number | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    id: number | null
    identifier: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    id: number | null
    identifier: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    id: number
    identifier: number
    token: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationTokenAvgAggregateInputType = {
    id?: true
  }

  export type VerificationTokenSumAggregateInputType = {
    id?: true
  }

  export type VerificationTokenMinAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    id?: true
    identifier?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs = {
    /**
     * Filter which VerificationToken to aggregate.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerificationTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerificationTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: Array<VerificationTokenScalarFieldEnum>
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _avg?: VerificationTokenAvgAggregateInputType
    _sum?: VerificationTokenSumAggregateInputType
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    id: number
    identifier: string
    token: string
    expires: Date
    createdAt: Date
    updatedAt: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _avg: VerificationTokenAvgAggregateOutputType | null
    _sum: VerificationTokenSumAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect = {
    id?: boolean
    identifier?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationTokenGetPayload<
    S extends boolean | null | undefined | VerificationTokenArgs,
    U = keyof S
      > = S extends true
        ? VerificationToken
    : S extends undefined
    ? never
    : S extends VerificationTokenArgs | VerificationTokenFindManyArgs
    ?'include' extends U
    ? VerificationToken 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VerificationToken ? VerificationToken[P] : never
  } 
    : VerificationToken
  : VerificationToken


  type VerificationTokenCountArgs = Merge<
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }
  >

  export interface VerificationTokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken | null >, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null >>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken | null >, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null >>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationTokenWithIdOnly = await prisma.verificationToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<VerificationToken>>, PrismaPromise<Array<VerificationTokenGetPayload<T>>>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs>(
      args: SelectSubset<T, VerificationTokenCreateArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs>(
      args: SelectSubset<T, VerificationTokenDeleteArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs>(
      args: SelectSubset<T, VerificationTokenUpdateArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs>(
      args: SelectSubset<T, VerificationTokenUpsertArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Throw an Error if a VerificationToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which VerificationToken to fetch.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Throw an Error if a VerificationToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which VerificationToken to fetch.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     * 
    **/
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationTokens to fetch.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The data needed to create a VerificationToken.
     * 
    **/
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs = {
    /**
     * The data used to create many VerificationTokens.
     * 
    **/
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The data needed to update a VerificationToken.
     * 
    **/
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs = {
    /**
     * The data used to update VerificationTokens.
     * 
    **/
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     * 
    **/
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     * 
    **/
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter which VerificationToken to delete.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs = {
    /**
     * Filter which VerificationTokens to delete
     * 
    **/
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
  }



  /**
   * Model BookingReference
   */


  export type AggregateBookingReference = {
    _count: BookingReferenceCountAggregateOutputType | null
    _avg: BookingReferenceAvgAggregateOutputType | null
    _sum: BookingReferenceSumAggregateOutputType | null
    _min: BookingReferenceMinAggregateOutputType | null
    _max: BookingReferenceMaxAggregateOutputType | null
  }

  export type BookingReferenceAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
    credentialId: number | null
  }

  export type BookingReferenceSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
    credentialId: number | null
  }

  export type BookingReferenceMinAggregateOutputType = {
    id: number | null
    type: string | null
    uid: string | null
    meetingId: string | null
    meetingPassword: string | null
    meetingUrl: string | null
    bookingId: number | null
    externalCalendarId: string | null
    deleted: boolean | null
    credentialId: number | null
  }

  export type BookingReferenceMaxAggregateOutputType = {
    id: number | null
    type: string | null
    uid: string | null
    meetingId: string | null
    meetingPassword: string | null
    meetingUrl: string | null
    bookingId: number | null
    externalCalendarId: string | null
    deleted: boolean | null
    credentialId: number | null
  }

  export type BookingReferenceCountAggregateOutputType = {
    id: number
    type: number
    uid: number
    meetingId: number
    meetingPassword: number
    meetingUrl: number
    bookingId: number
    externalCalendarId: number
    deleted: number
    credentialId: number
    _all: number
  }


  export type BookingReferenceAvgAggregateInputType = {
    id?: true
    bookingId?: true
    credentialId?: true
  }

  export type BookingReferenceSumAggregateInputType = {
    id?: true
    bookingId?: true
    credentialId?: true
  }

  export type BookingReferenceMinAggregateInputType = {
    id?: true
    type?: true
    uid?: true
    meetingId?: true
    meetingPassword?: true
    meetingUrl?: true
    bookingId?: true
    externalCalendarId?: true
    deleted?: true
    credentialId?: true
  }

  export type BookingReferenceMaxAggregateInputType = {
    id?: true
    type?: true
    uid?: true
    meetingId?: true
    meetingPassword?: true
    meetingUrl?: true
    bookingId?: true
    externalCalendarId?: true
    deleted?: true
    credentialId?: true
  }

  export type BookingReferenceCountAggregateInputType = {
    id?: true
    type?: true
    uid?: true
    meetingId?: true
    meetingPassword?: true
    meetingUrl?: true
    bookingId?: true
    externalCalendarId?: true
    deleted?: true
    credentialId?: true
    _all?: true
  }

  export type BookingReferenceAggregateArgs = {
    /**
     * Filter which BookingReference to aggregate.
     * 
    **/
    where?: BookingReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookingReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingReferences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookingReferences
    **/
    _count?: true | BookingReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingReferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingReferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingReferenceMaxAggregateInputType
  }

  export type GetBookingReferenceAggregateType<T extends BookingReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateBookingReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookingReference[P]>
      : GetScalarType<T[P], AggregateBookingReference[P]>
  }




  export type BookingReferenceGroupByArgs = {
    where?: BookingReferenceWhereInput
    orderBy?: Enumerable<BookingReferenceOrderByWithAggregationInput>
    by: Array<BookingReferenceScalarFieldEnum>
    having?: BookingReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingReferenceCountAggregateInputType | true
    _avg?: BookingReferenceAvgAggregateInputType
    _sum?: BookingReferenceSumAggregateInputType
    _min?: BookingReferenceMinAggregateInputType
    _max?: BookingReferenceMaxAggregateInputType
  }


  export type BookingReferenceGroupByOutputType = {
    id: number
    type: string
    uid: string
    meetingId: string | null
    meetingPassword: string | null
    meetingUrl: string | null
    bookingId: number | null
    externalCalendarId: string | null
    deleted: boolean | null
    credentialId: number | null
    _count: BookingReferenceCountAggregateOutputType | null
    _avg: BookingReferenceAvgAggregateOutputType | null
    _sum: BookingReferenceSumAggregateOutputType | null
    _min: BookingReferenceMinAggregateOutputType | null
    _max: BookingReferenceMaxAggregateOutputType | null
  }

  type GetBookingReferenceGroupByPayload<T extends BookingReferenceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookingReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], BookingReferenceGroupByOutputType[P]>
        }
      >
    >


  export type BookingReferenceSelect = {
    id?: boolean
    type?: boolean
    uid?: boolean
    meetingId?: boolean
    meetingPassword?: boolean
    meetingUrl?: boolean
    booking?: boolean | BookingArgs
    bookingId?: boolean
    externalCalendarId?: boolean
    deleted?: boolean
    credentialId?: boolean
  }

  export type BookingReferenceInclude = {
    booking?: boolean | BookingArgs
  }

  export type BookingReferenceGetPayload<
    S extends boolean | null | undefined | BookingReferenceArgs,
    U = keyof S
      > = S extends true
        ? BookingReference
    : S extends undefined
    ? never
    : S extends BookingReferenceArgs | BookingReferenceFindManyArgs
    ?'include' extends U
    ? BookingReference  & {
    [P in TrueKeys<S['include']>]:
        P extends 'booking' ? BookingGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'booking' ? BookingGetPayload<S['select'][P]> | null :  P extends keyof BookingReference ? BookingReference[P] : never
  } 
    : BookingReference
  : BookingReference


  type BookingReferenceCountArgs = Merge<
    Omit<BookingReferenceFindManyArgs, 'select' | 'include'> & {
      select?: BookingReferenceCountAggregateInputType | true
    }
  >

  export interface BookingReferenceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BookingReference that matches the filter.
     * @param {BookingReferenceFindUniqueArgs} args - Arguments to find a BookingReference
     * @example
     * // Get one BookingReference
     * const bookingReference = await prisma.bookingReference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingReferenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookingReferenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BookingReference'> extends True ? CheckSelect<T, Prisma__BookingReferenceClient<BookingReference>, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T>>> : CheckSelect<T, Prisma__BookingReferenceClient<BookingReference | null >, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T> | null >>

    /**
     * Find the first BookingReference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingReferenceFindFirstArgs} args - Arguments to find a BookingReference
     * @example
     * // Get one BookingReference
     * const bookingReference = await prisma.bookingReference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingReferenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookingReferenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BookingReference'> extends True ? CheckSelect<T, Prisma__BookingReferenceClient<BookingReference>, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T>>> : CheckSelect<T, Prisma__BookingReferenceClient<BookingReference | null >, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T> | null >>

    /**
     * Find zero or more BookingReferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingReferenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookingReferences
     * const bookingReferences = await prisma.bookingReference.findMany()
     * 
     * // Get first 10 BookingReferences
     * const bookingReferences = await prisma.bookingReference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingReferenceWithIdOnly = await prisma.bookingReference.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookingReferenceFindManyArgs>(
      args?: SelectSubset<T, BookingReferenceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BookingReference>>, PrismaPromise<Array<BookingReferenceGetPayload<T>>>>

    /**
     * Create a BookingReference.
     * @param {BookingReferenceCreateArgs} args - Arguments to create a BookingReference.
     * @example
     * // Create one BookingReference
     * const BookingReference = await prisma.bookingReference.create({
     *   data: {
     *     // ... data to create a BookingReference
     *   }
     * })
     * 
    **/
    create<T extends BookingReferenceCreateArgs>(
      args: SelectSubset<T, BookingReferenceCreateArgs>
    ): CheckSelect<T, Prisma__BookingReferenceClient<BookingReference>, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T>>>

    /**
     * Create many BookingReferences.
     *     @param {BookingReferenceCreateManyArgs} args - Arguments to create many BookingReferences.
     *     @example
     *     // Create many BookingReferences
     *     const bookingReference = await prisma.bookingReference.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingReferenceCreateManyArgs>(
      args?: SelectSubset<T, BookingReferenceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BookingReference.
     * @param {BookingReferenceDeleteArgs} args - Arguments to delete one BookingReference.
     * @example
     * // Delete one BookingReference
     * const BookingReference = await prisma.bookingReference.delete({
     *   where: {
     *     // ... filter to delete one BookingReference
     *   }
     * })
     * 
    **/
    delete<T extends BookingReferenceDeleteArgs>(
      args: SelectSubset<T, BookingReferenceDeleteArgs>
    ): CheckSelect<T, Prisma__BookingReferenceClient<BookingReference>, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T>>>

    /**
     * Update one BookingReference.
     * @param {BookingReferenceUpdateArgs} args - Arguments to update one BookingReference.
     * @example
     * // Update one BookingReference
     * const bookingReference = await prisma.bookingReference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingReferenceUpdateArgs>(
      args: SelectSubset<T, BookingReferenceUpdateArgs>
    ): CheckSelect<T, Prisma__BookingReferenceClient<BookingReference>, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T>>>

    /**
     * Delete zero or more BookingReferences.
     * @param {BookingReferenceDeleteManyArgs} args - Arguments to filter BookingReferences to delete.
     * @example
     * // Delete a few BookingReferences
     * const { count } = await prisma.bookingReference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingReferenceDeleteManyArgs>(
      args?: SelectSubset<T, BookingReferenceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookingReferences
     * const bookingReference = await prisma.bookingReference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingReferenceUpdateManyArgs>(
      args: SelectSubset<T, BookingReferenceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BookingReference.
     * @param {BookingReferenceUpsertArgs} args - Arguments to update or create a BookingReference.
     * @example
     * // Update or create a BookingReference
     * const bookingReference = await prisma.bookingReference.upsert({
     *   create: {
     *     // ... data to create a BookingReference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookingReference we want to update
     *   }
     * })
    **/
    upsert<T extends BookingReferenceUpsertArgs>(
      args: SelectSubset<T, BookingReferenceUpsertArgs>
    ): CheckSelect<T, Prisma__BookingReferenceClient<BookingReference>, Prisma__BookingReferenceClient<BookingReferenceGetPayload<T>>>

    /**
     * Count the number of BookingReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingReferenceCountArgs} args - Arguments to filter BookingReferences to count.
     * @example
     * // Count the number of BookingReferences
     * const count = await prisma.bookingReference.count({
     *   where: {
     *     // ... the filter for the BookingReferences we want to count
     *   }
     * })
    **/
    count<T extends BookingReferenceCountArgs>(
      args?: Subset<T, BookingReferenceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookingReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingReferenceAggregateArgs>(args: Subset<T, BookingReferenceAggregateArgs>): PrismaPromise<GetBookingReferenceAggregateType<T>>

    /**
     * Group by BookingReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingReferenceGroupByArgs['orderBy'] }
        : { orderBy?: BookingReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingReferenceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookingReference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookingReferenceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    booking<T extends BookingArgs = {}>(args?: Subset<T, BookingArgs>): CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BookingReference findUnique
   */
  export type BookingReferenceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * Throw an Error if a BookingReference can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BookingReference to fetch.
     * 
    **/
    where: BookingReferenceWhereUniqueInput
  }


  /**
   * BookingReference findFirst
   */
  export type BookingReferenceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * Throw an Error if a BookingReference can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BookingReference to fetch.
     * 
    **/
    where?: BookingReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingReferences.
     * 
    **/
    cursor?: BookingReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingReferences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingReferences.
     * 
    **/
    distinct?: Enumerable<BookingReferenceScalarFieldEnum>
  }


  /**
   * BookingReference findMany
   */
  export type BookingReferenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * Filter, which BookingReferences to fetch.
     * 
    **/
    where?: BookingReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookingReferences.
     * 
    **/
    cursor?: BookingReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingReferences.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookingReferenceScalarFieldEnum>
  }


  /**
   * BookingReference create
   */
  export type BookingReferenceCreateArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * The data needed to create a BookingReference.
     * 
    **/
    data: XOR<BookingReferenceCreateInput, BookingReferenceUncheckedCreateInput>
  }


  /**
   * BookingReference createMany
   */
  export type BookingReferenceCreateManyArgs = {
    /**
     * The data used to create many BookingReferences.
     * 
    **/
    data: Enumerable<BookingReferenceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BookingReference update
   */
  export type BookingReferenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * The data needed to update a BookingReference.
     * 
    **/
    data: XOR<BookingReferenceUpdateInput, BookingReferenceUncheckedUpdateInput>
    /**
     * Choose, which BookingReference to update.
     * 
    **/
    where: BookingReferenceWhereUniqueInput
  }


  /**
   * BookingReference updateMany
   */
  export type BookingReferenceUpdateManyArgs = {
    /**
     * The data used to update BookingReferences.
     * 
    **/
    data: XOR<BookingReferenceUpdateManyMutationInput, BookingReferenceUncheckedUpdateManyInput>
    /**
     * Filter which BookingReferences to update
     * 
    **/
    where?: BookingReferenceWhereInput
  }


  /**
   * BookingReference upsert
   */
  export type BookingReferenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * The filter to search for the BookingReference to update in case it exists.
     * 
    **/
    where: BookingReferenceWhereUniqueInput
    /**
     * In case the BookingReference found by the `where` argument doesn't exist, create a new BookingReference with this data.
     * 
    **/
    create: XOR<BookingReferenceCreateInput, BookingReferenceUncheckedCreateInput>
    /**
     * In case the BookingReference was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookingReferenceUpdateInput, BookingReferenceUncheckedUpdateInput>
  }


  /**
   * BookingReference delete
   */
  export type BookingReferenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
    /**
     * Filter which BookingReference to delete.
     * 
    **/
    where: BookingReferenceWhereUniqueInput
  }


  /**
   * BookingReference deleteMany
   */
  export type BookingReferenceDeleteManyArgs = {
    /**
     * Filter which BookingReferences to delete
     * 
    **/
    where?: BookingReferenceWhereInput
  }


  /**
   * BookingReference without action
   */
  export type BookingReferenceArgs = {
    /**
     * Select specific fields to fetch from the BookingReference
     * 
    **/
    select?: BookingReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingReferenceInclude | null
  }



  /**
   * Model Attendee
   */


  export type AggregateAttendee = {
    _count: AttendeeCountAggregateOutputType | null
    _avg: AttendeeAvgAggregateOutputType | null
    _sum: AttendeeSumAggregateOutputType | null
    _min: AttendeeMinAggregateOutputType | null
    _max: AttendeeMaxAggregateOutputType | null
  }

  export type AttendeeAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
  }

  export type AttendeeSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
  }

  export type AttendeeMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    timeZone: string | null
    locale: string | null
    bookingId: number | null
  }

  export type AttendeeMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    timeZone: string | null
    locale: string | null
    bookingId: number | null
  }

  export type AttendeeCountAggregateOutputType = {
    id: number
    email: number
    name: number
    timeZone: number
    locale: number
    bookingId: number
    _all: number
  }


  export type AttendeeAvgAggregateInputType = {
    id?: true
    bookingId?: true
  }

  export type AttendeeSumAggregateInputType = {
    id?: true
    bookingId?: true
  }

  export type AttendeeMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    timeZone?: true
    locale?: true
    bookingId?: true
  }

  export type AttendeeMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    timeZone?: true
    locale?: true
    bookingId?: true
  }

  export type AttendeeCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    timeZone?: true
    locale?: true
    bookingId?: true
    _all?: true
  }

  export type AttendeeAggregateArgs = {
    /**
     * Filter which Attendee to aggregate.
     * 
    **/
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     * 
    **/
    orderBy?: Enumerable<AttendeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendees
    **/
    _count?: true | AttendeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendeeMaxAggregateInputType
  }

  export type GetAttendeeAggregateType<T extends AttendeeAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendee[P]>
      : GetScalarType<T[P], AggregateAttendee[P]>
  }




  export type AttendeeGroupByArgs = {
    where?: AttendeeWhereInput
    orderBy?: Enumerable<AttendeeOrderByWithAggregationInput>
    by: Array<AttendeeScalarFieldEnum>
    having?: AttendeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendeeCountAggregateInputType | true
    _avg?: AttendeeAvgAggregateInputType
    _sum?: AttendeeSumAggregateInputType
    _min?: AttendeeMinAggregateInputType
    _max?: AttendeeMaxAggregateInputType
  }


  export type AttendeeGroupByOutputType = {
    id: number
    email: string
    name: string
    timeZone: string
    locale: string | null
    bookingId: number | null
    _count: AttendeeCountAggregateOutputType | null
    _avg: AttendeeAvgAggregateOutputType | null
    _sum: AttendeeSumAggregateOutputType | null
    _min: AttendeeMinAggregateOutputType | null
    _max: AttendeeMaxAggregateOutputType | null
  }

  type GetAttendeeGroupByPayload<T extends AttendeeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AttendeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendeeGroupByOutputType[P]>
            : GetScalarType<T[P], AttendeeGroupByOutputType[P]>
        }
      >
    >


  export type AttendeeSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    timeZone?: boolean
    locale?: boolean
    booking?: boolean | BookingArgs
    bookingId?: boolean
  }

  export type AttendeeInclude = {
    booking?: boolean | BookingArgs
  }

  export type AttendeeGetPayload<
    S extends boolean | null | undefined | AttendeeArgs,
    U = keyof S
      > = S extends true
        ? Attendee
    : S extends undefined
    ? never
    : S extends AttendeeArgs | AttendeeFindManyArgs
    ?'include' extends U
    ? Attendee  & {
    [P in TrueKeys<S['include']>]:
        P extends 'booking' ? BookingGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'booking' ? BookingGetPayload<S['select'][P]> | null :  P extends keyof Attendee ? Attendee[P] : never
  } 
    : Attendee
  : Attendee


  type AttendeeCountArgs = Merge<
    Omit<AttendeeFindManyArgs, 'select' | 'include'> & {
      select?: AttendeeCountAggregateInputType | true
    }
  >

  export interface AttendeeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Attendee that matches the filter.
     * @param {AttendeeFindUniqueArgs} args - Arguments to find a Attendee
     * @example
     * // Get one Attendee
     * const attendee = await prisma.attendee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AttendeeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AttendeeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Attendee'> extends True ? CheckSelect<T, Prisma__AttendeeClient<Attendee>, Prisma__AttendeeClient<AttendeeGetPayload<T>>> : CheckSelect<T, Prisma__AttendeeClient<Attendee | null >, Prisma__AttendeeClient<AttendeeGetPayload<T> | null >>

    /**
     * Find the first Attendee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeFindFirstArgs} args - Arguments to find a Attendee
     * @example
     * // Get one Attendee
     * const attendee = await prisma.attendee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AttendeeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AttendeeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Attendee'> extends True ? CheckSelect<T, Prisma__AttendeeClient<Attendee>, Prisma__AttendeeClient<AttendeeGetPayload<T>>> : CheckSelect<T, Prisma__AttendeeClient<Attendee | null >, Prisma__AttendeeClient<AttendeeGetPayload<T> | null >>

    /**
     * Find zero or more Attendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendees
     * const attendees = await prisma.attendee.findMany()
     * 
     * // Get first 10 Attendees
     * const attendees = await prisma.attendee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendeeWithIdOnly = await prisma.attendee.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AttendeeFindManyArgs>(
      args?: SelectSubset<T, AttendeeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Attendee>>, PrismaPromise<Array<AttendeeGetPayload<T>>>>

    /**
     * Create a Attendee.
     * @param {AttendeeCreateArgs} args - Arguments to create a Attendee.
     * @example
     * // Create one Attendee
     * const Attendee = await prisma.attendee.create({
     *   data: {
     *     // ... data to create a Attendee
     *   }
     * })
     * 
    **/
    create<T extends AttendeeCreateArgs>(
      args: SelectSubset<T, AttendeeCreateArgs>
    ): CheckSelect<T, Prisma__AttendeeClient<Attendee>, Prisma__AttendeeClient<AttendeeGetPayload<T>>>

    /**
     * Create many Attendees.
     *     @param {AttendeeCreateManyArgs} args - Arguments to create many Attendees.
     *     @example
     *     // Create many Attendees
     *     const attendee = await prisma.attendee.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AttendeeCreateManyArgs>(
      args?: SelectSubset<T, AttendeeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Attendee.
     * @param {AttendeeDeleteArgs} args - Arguments to delete one Attendee.
     * @example
     * // Delete one Attendee
     * const Attendee = await prisma.attendee.delete({
     *   where: {
     *     // ... filter to delete one Attendee
     *   }
     * })
     * 
    **/
    delete<T extends AttendeeDeleteArgs>(
      args: SelectSubset<T, AttendeeDeleteArgs>
    ): CheckSelect<T, Prisma__AttendeeClient<Attendee>, Prisma__AttendeeClient<AttendeeGetPayload<T>>>

    /**
     * Update one Attendee.
     * @param {AttendeeUpdateArgs} args - Arguments to update one Attendee.
     * @example
     * // Update one Attendee
     * const attendee = await prisma.attendee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AttendeeUpdateArgs>(
      args: SelectSubset<T, AttendeeUpdateArgs>
    ): CheckSelect<T, Prisma__AttendeeClient<Attendee>, Prisma__AttendeeClient<AttendeeGetPayload<T>>>

    /**
     * Delete zero or more Attendees.
     * @param {AttendeeDeleteManyArgs} args - Arguments to filter Attendees to delete.
     * @example
     * // Delete a few Attendees
     * const { count } = await prisma.attendee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AttendeeDeleteManyArgs>(
      args?: SelectSubset<T, AttendeeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendees
     * const attendee = await prisma.attendee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AttendeeUpdateManyArgs>(
      args: SelectSubset<T, AttendeeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendee.
     * @param {AttendeeUpsertArgs} args - Arguments to update or create a Attendee.
     * @example
     * // Update or create a Attendee
     * const attendee = await prisma.attendee.upsert({
     *   create: {
     *     // ... data to create a Attendee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendee we want to update
     *   }
     * })
    **/
    upsert<T extends AttendeeUpsertArgs>(
      args: SelectSubset<T, AttendeeUpsertArgs>
    ): CheckSelect<T, Prisma__AttendeeClient<Attendee>, Prisma__AttendeeClient<AttendeeGetPayload<T>>>

    /**
     * Count the number of Attendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeCountArgs} args - Arguments to filter Attendees to count.
     * @example
     * // Count the number of Attendees
     * const count = await prisma.attendee.count({
     *   where: {
     *     // ... the filter for the Attendees we want to count
     *   }
     * })
    **/
    count<T extends AttendeeCountArgs>(
      args?: Subset<T, AttendeeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendeeAggregateArgs>(args: Subset<T, AttendeeAggregateArgs>): PrismaPromise<GetAttendeeAggregateType<T>>

    /**
     * Group by Attendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendeeGroupByArgs['orderBy'] }
        : { orderBy?: AttendeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendeeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AttendeeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    booking<T extends BookingArgs = {}>(args?: Subset<T, BookingArgs>): CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Attendee findUnique
   */
  export type AttendeeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * Throw an Error if a Attendee can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Attendee to fetch.
     * 
    **/
    where: AttendeeWhereUniqueInput
  }


  /**
   * Attendee findFirst
   */
  export type AttendeeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * Throw an Error if a Attendee can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Attendee to fetch.
     * 
    **/
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     * 
    **/
    orderBy?: Enumerable<AttendeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendees.
     * 
    **/
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendees.
     * 
    **/
    distinct?: Enumerable<AttendeeScalarFieldEnum>
  }


  /**
   * Attendee findMany
   */
  export type AttendeeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * Filter, which Attendees to fetch.
     * 
    **/
    where?: AttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendees to fetch.
     * 
    **/
    orderBy?: Enumerable<AttendeeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendees.
     * 
    **/
    cursor?: AttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendees from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendees.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AttendeeScalarFieldEnum>
  }


  /**
   * Attendee create
   */
  export type AttendeeCreateArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * The data needed to create a Attendee.
     * 
    **/
    data: XOR<AttendeeCreateInput, AttendeeUncheckedCreateInput>
  }


  /**
   * Attendee createMany
   */
  export type AttendeeCreateManyArgs = {
    /**
     * The data used to create many Attendees.
     * 
    **/
    data: Enumerable<AttendeeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Attendee update
   */
  export type AttendeeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * The data needed to update a Attendee.
     * 
    **/
    data: XOR<AttendeeUpdateInput, AttendeeUncheckedUpdateInput>
    /**
     * Choose, which Attendee to update.
     * 
    **/
    where: AttendeeWhereUniqueInput
  }


  /**
   * Attendee updateMany
   */
  export type AttendeeUpdateManyArgs = {
    /**
     * The data used to update Attendees.
     * 
    **/
    data: XOR<AttendeeUpdateManyMutationInput, AttendeeUncheckedUpdateManyInput>
    /**
     * Filter which Attendees to update
     * 
    **/
    where?: AttendeeWhereInput
  }


  /**
   * Attendee upsert
   */
  export type AttendeeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * The filter to search for the Attendee to update in case it exists.
     * 
    **/
    where: AttendeeWhereUniqueInput
    /**
     * In case the Attendee found by the `where` argument doesn't exist, create a new Attendee with this data.
     * 
    **/
    create: XOR<AttendeeCreateInput, AttendeeUncheckedCreateInput>
    /**
     * In case the Attendee was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AttendeeUpdateInput, AttendeeUncheckedUpdateInput>
  }


  /**
   * Attendee delete
   */
  export type AttendeeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
    /**
     * Filter which Attendee to delete.
     * 
    **/
    where: AttendeeWhereUniqueInput
  }


  /**
   * Attendee deleteMany
   */
  export type AttendeeDeleteManyArgs = {
    /**
     * Filter which Attendees to delete
     * 
    **/
    where?: AttendeeWhereInput
  }


  /**
   * Attendee without action
   */
  export type AttendeeArgs = {
    /**
     * Select specific fields to fetch from the Attendee
     * 
    **/
    select?: AttendeeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AttendeeInclude | null
  }



  /**
   * Model DailyEventReference
   */


  export type AggregateDailyEventReference = {
    _count: DailyEventReferenceCountAggregateOutputType | null
    _avg: DailyEventReferenceAvgAggregateOutputType | null
    _sum: DailyEventReferenceSumAggregateOutputType | null
    _min: DailyEventReferenceMinAggregateOutputType | null
    _max: DailyEventReferenceMaxAggregateOutputType | null
  }

  export type DailyEventReferenceAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
  }

  export type DailyEventReferenceSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
  }

  export type DailyEventReferenceMinAggregateOutputType = {
    id: number | null
    dailyurl: string | null
    dailytoken: string | null
    bookingId: number | null
  }

  export type DailyEventReferenceMaxAggregateOutputType = {
    id: number | null
    dailyurl: string | null
    dailytoken: string | null
    bookingId: number | null
  }

  export type DailyEventReferenceCountAggregateOutputType = {
    id: number
    dailyurl: number
    dailytoken: number
    bookingId: number
    _all: number
  }


  export type DailyEventReferenceAvgAggregateInputType = {
    id?: true
    bookingId?: true
  }

  export type DailyEventReferenceSumAggregateInputType = {
    id?: true
    bookingId?: true
  }

  export type DailyEventReferenceMinAggregateInputType = {
    id?: true
    dailyurl?: true
    dailytoken?: true
    bookingId?: true
  }

  export type DailyEventReferenceMaxAggregateInputType = {
    id?: true
    dailyurl?: true
    dailytoken?: true
    bookingId?: true
  }

  export type DailyEventReferenceCountAggregateInputType = {
    id?: true
    dailyurl?: true
    dailytoken?: true
    bookingId?: true
    _all?: true
  }

  export type DailyEventReferenceAggregateArgs = {
    /**
     * Filter which DailyEventReference to aggregate.
     * 
    **/
    where?: DailyEventReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyEventReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyEventReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DailyEventReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyEventReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyEventReferences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyEventReferences
    **/
    _count?: true | DailyEventReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyEventReferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyEventReferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyEventReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyEventReferenceMaxAggregateInputType
  }

  export type GetDailyEventReferenceAggregateType<T extends DailyEventReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyEventReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyEventReference[P]>
      : GetScalarType<T[P], AggregateDailyEventReference[P]>
  }




  export type DailyEventReferenceGroupByArgs = {
    where?: DailyEventReferenceWhereInput
    orderBy?: Enumerable<DailyEventReferenceOrderByWithAggregationInput>
    by: Array<DailyEventReferenceScalarFieldEnum>
    having?: DailyEventReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyEventReferenceCountAggregateInputType | true
    _avg?: DailyEventReferenceAvgAggregateInputType
    _sum?: DailyEventReferenceSumAggregateInputType
    _min?: DailyEventReferenceMinAggregateInputType
    _max?: DailyEventReferenceMaxAggregateInputType
  }


  export type DailyEventReferenceGroupByOutputType = {
    id: number
    dailyurl: string
    dailytoken: string
    bookingId: number | null
    _count: DailyEventReferenceCountAggregateOutputType | null
    _avg: DailyEventReferenceAvgAggregateOutputType | null
    _sum: DailyEventReferenceSumAggregateOutputType | null
    _min: DailyEventReferenceMinAggregateOutputType | null
    _max: DailyEventReferenceMaxAggregateOutputType | null
  }

  type GetDailyEventReferenceGroupByPayload<T extends DailyEventReferenceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DailyEventReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyEventReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyEventReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], DailyEventReferenceGroupByOutputType[P]>
        }
      >
    >


  export type DailyEventReferenceSelect = {
    id?: boolean
    dailyurl?: boolean
    dailytoken?: boolean
    booking?: boolean | BookingArgs
    bookingId?: boolean
  }

  export type DailyEventReferenceInclude = {
    booking?: boolean | BookingArgs
  }

  export type DailyEventReferenceGetPayload<
    S extends boolean | null | undefined | DailyEventReferenceArgs,
    U = keyof S
      > = S extends true
        ? DailyEventReference
    : S extends undefined
    ? never
    : S extends DailyEventReferenceArgs | DailyEventReferenceFindManyArgs
    ?'include' extends U
    ? DailyEventReference  & {
    [P in TrueKeys<S['include']>]:
        P extends 'booking' ? BookingGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'booking' ? BookingGetPayload<S['select'][P]> | null :  P extends keyof DailyEventReference ? DailyEventReference[P] : never
  } 
    : DailyEventReference
  : DailyEventReference


  type DailyEventReferenceCountArgs = Merge<
    Omit<DailyEventReferenceFindManyArgs, 'select' | 'include'> & {
      select?: DailyEventReferenceCountAggregateInputType | true
    }
  >

  export interface DailyEventReferenceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DailyEventReference that matches the filter.
     * @param {DailyEventReferenceFindUniqueArgs} args - Arguments to find a DailyEventReference
     * @example
     * // Get one DailyEventReference
     * const dailyEventReference = await prisma.dailyEventReference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DailyEventReferenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DailyEventReferenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DailyEventReference'> extends True ? CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference>, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T>>> : CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference | null >, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T> | null >>

    /**
     * Find the first DailyEventReference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyEventReferenceFindFirstArgs} args - Arguments to find a DailyEventReference
     * @example
     * // Get one DailyEventReference
     * const dailyEventReference = await prisma.dailyEventReference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DailyEventReferenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DailyEventReferenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DailyEventReference'> extends True ? CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference>, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T>>> : CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference | null >, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T> | null >>

    /**
     * Find zero or more DailyEventReferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyEventReferenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyEventReferences
     * const dailyEventReferences = await prisma.dailyEventReference.findMany()
     * 
     * // Get first 10 DailyEventReferences
     * const dailyEventReferences = await prisma.dailyEventReference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyEventReferenceWithIdOnly = await prisma.dailyEventReference.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DailyEventReferenceFindManyArgs>(
      args?: SelectSubset<T, DailyEventReferenceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<DailyEventReference>>, PrismaPromise<Array<DailyEventReferenceGetPayload<T>>>>

    /**
     * Create a DailyEventReference.
     * @param {DailyEventReferenceCreateArgs} args - Arguments to create a DailyEventReference.
     * @example
     * // Create one DailyEventReference
     * const DailyEventReference = await prisma.dailyEventReference.create({
     *   data: {
     *     // ... data to create a DailyEventReference
     *   }
     * })
     * 
    **/
    create<T extends DailyEventReferenceCreateArgs>(
      args: SelectSubset<T, DailyEventReferenceCreateArgs>
    ): CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference>, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T>>>

    /**
     * Create many DailyEventReferences.
     *     @param {DailyEventReferenceCreateManyArgs} args - Arguments to create many DailyEventReferences.
     *     @example
     *     // Create many DailyEventReferences
     *     const dailyEventReference = await prisma.dailyEventReference.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DailyEventReferenceCreateManyArgs>(
      args?: SelectSubset<T, DailyEventReferenceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DailyEventReference.
     * @param {DailyEventReferenceDeleteArgs} args - Arguments to delete one DailyEventReference.
     * @example
     * // Delete one DailyEventReference
     * const DailyEventReference = await prisma.dailyEventReference.delete({
     *   where: {
     *     // ... filter to delete one DailyEventReference
     *   }
     * })
     * 
    **/
    delete<T extends DailyEventReferenceDeleteArgs>(
      args: SelectSubset<T, DailyEventReferenceDeleteArgs>
    ): CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference>, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T>>>

    /**
     * Update one DailyEventReference.
     * @param {DailyEventReferenceUpdateArgs} args - Arguments to update one DailyEventReference.
     * @example
     * // Update one DailyEventReference
     * const dailyEventReference = await prisma.dailyEventReference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DailyEventReferenceUpdateArgs>(
      args: SelectSubset<T, DailyEventReferenceUpdateArgs>
    ): CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference>, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T>>>

    /**
     * Delete zero or more DailyEventReferences.
     * @param {DailyEventReferenceDeleteManyArgs} args - Arguments to filter DailyEventReferences to delete.
     * @example
     * // Delete a few DailyEventReferences
     * const { count } = await prisma.dailyEventReference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DailyEventReferenceDeleteManyArgs>(
      args?: SelectSubset<T, DailyEventReferenceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyEventReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyEventReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyEventReferences
     * const dailyEventReference = await prisma.dailyEventReference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DailyEventReferenceUpdateManyArgs>(
      args: SelectSubset<T, DailyEventReferenceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyEventReference.
     * @param {DailyEventReferenceUpsertArgs} args - Arguments to update or create a DailyEventReference.
     * @example
     * // Update or create a DailyEventReference
     * const dailyEventReference = await prisma.dailyEventReference.upsert({
     *   create: {
     *     // ... data to create a DailyEventReference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyEventReference we want to update
     *   }
     * })
    **/
    upsert<T extends DailyEventReferenceUpsertArgs>(
      args: SelectSubset<T, DailyEventReferenceUpsertArgs>
    ): CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference>, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T>>>

    /**
     * Count the number of DailyEventReferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyEventReferenceCountArgs} args - Arguments to filter DailyEventReferences to count.
     * @example
     * // Count the number of DailyEventReferences
     * const count = await prisma.dailyEventReference.count({
     *   where: {
     *     // ... the filter for the DailyEventReferences we want to count
     *   }
     * })
    **/
    count<T extends DailyEventReferenceCountArgs>(
      args?: Subset<T, DailyEventReferenceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyEventReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyEventReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyEventReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyEventReferenceAggregateArgs>(args: Subset<T, DailyEventReferenceAggregateArgs>): PrismaPromise<GetDailyEventReferenceAggregateType<T>>

    /**
     * Group by DailyEventReference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyEventReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyEventReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyEventReferenceGroupByArgs['orderBy'] }
        : { orderBy?: DailyEventReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyEventReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyEventReferenceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyEventReference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DailyEventReferenceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    booking<T extends BookingArgs = {}>(args?: Subset<T, BookingArgs>): CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * DailyEventReference findUnique
   */
  export type DailyEventReferenceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * Throw an Error if a DailyEventReference can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DailyEventReference to fetch.
     * 
    **/
    where: DailyEventReferenceWhereUniqueInput
  }


  /**
   * DailyEventReference findFirst
   */
  export type DailyEventReferenceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * Throw an Error if a DailyEventReference can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which DailyEventReference to fetch.
     * 
    **/
    where?: DailyEventReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyEventReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyEventReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyEventReferences.
     * 
    **/
    cursor?: DailyEventReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyEventReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyEventReferences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyEventReferences.
     * 
    **/
    distinct?: Enumerable<DailyEventReferenceScalarFieldEnum>
  }


  /**
   * DailyEventReference findMany
   */
  export type DailyEventReferenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * Filter, which DailyEventReferences to fetch.
     * 
    **/
    where?: DailyEventReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyEventReferences to fetch.
     * 
    **/
    orderBy?: Enumerable<DailyEventReferenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyEventReferences.
     * 
    **/
    cursor?: DailyEventReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyEventReferences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyEventReferences.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DailyEventReferenceScalarFieldEnum>
  }


  /**
   * DailyEventReference create
   */
  export type DailyEventReferenceCreateArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * The data needed to create a DailyEventReference.
     * 
    **/
    data: XOR<DailyEventReferenceCreateInput, DailyEventReferenceUncheckedCreateInput>
  }


  /**
   * DailyEventReference createMany
   */
  export type DailyEventReferenceCreateManyArgs = {
    /**
     * The data used to create many DailyEventReferences.
     * 
    **/
    data: Enumerable<DailyEventReferenceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DailyEventReference update
   */
  export type DailyEventReferenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * The data needed to update a DailyEventReference.
     * 
    **/
    data: XOR<DailyEventReferenceUpdateInput, DailyEventReferenceUncheckedUpdateInput>
    /**
     * Choose, which DailyEventReference to update.
     * 
    **/
    where: DailyEventReferenceWhereUniqueInput
  }


  /**
   * DailyEventReference updateMany
   */
  export type DailyEventReferenceUpdateManyArgs = {
    /**
     * The data used to update DailyEventReferences.
     * 
    **/
    data: XOR<DailyEventReferenceUpdateManyMutationInput, DailyEventReferenceUncheckedUpdateManyInput>
    /**
     * Filter which DailyEventReferences to update
     * 
    **/
    where?: DailyEventReferenceWhereInput
  }


  /**
   * DailyEventReference upsert
   */
  export type DailyEventReferenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * The filter to search for the DailyEventReference to update in case it exists.
     * 
    **/
    where: DailyEventReferenceWhereUniqueInput
    /**
     * In case the DailyEventReference found by the `where` argument doesn't exist, create a new DailyEventReference with this data.
     * 
    **/
    create: XOR<DailyEventReferenceCreateInput, DailyEventReferenceUncheckedCreateInput>
    /**
     * In case the DailyEventReference was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DailyEventReferenceUpdateInput, DailyEventReferenceUncheckedUpdateInput>
  }


  /**
   * DailyEventReference delete
   */
  export type DailyEventReferenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
    /**
     * Filter which DailyEventReference to delete.
     * 
    **/
    where: DailyEventReferenceWhereUniqueInput
  }


  /**
   * DailyEventReference deleteMany
   */
  export type DailyEventReferenceDeleteManyArgs = {
    /**
     * Filter which DailyEventReferences to delete
     * 
    **/
    where?: DailyEventReferenceWhereInput
  }


  /**
   * DailyEventReference without action
   */
  export type DailyEventReferenceArgs = {
    /**
     * Select specific fields to fetch from the DailyEventReference
     * 
    **/
    select?: DailyEventReferenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DailyEventReferenceInclude | null
  }



  /**
   * Model Booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    destinationCalendarId: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    destinationCalendarId: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: number | null
    uid: string | null
    userId: number | null
    eventTypeId: number | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: BookingStatus | null
    paid: boolean | null
    destinationCalendarId: number | null
    cancellationReason: string | null
    rejectionReason: string | null
    dynamicEventSlugRef: string | null
    dynamicGroupSlugRef: string | null
    rescheduled: boolean | null
    fromReschedule: string | null
    recurringEventId: string | null
    smsReminderNumber: string | null
  }

  export type BookingMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    userId: number | null
    eventTypeId: number | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    location: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: BookingStatus | null
    paid: boolean | null
    destinationCalendarId: number | null
    cancellationReason: string | null
    rejectionReason: string | null
    dynamicEventSlugRef: string | null
    dynamicGroupSlugRef: string | null
    rescheduled: boolean | null
    fromReschedule: string | null
    recurringEventId: string | null
    smsReminderNumber: string | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    uid: number
    userId: number
    eventTypeId: number
    title: number
    description: number
    customInputs: number
    startTime: number
    endTime: number
    location: number
    createdAt: number
    updatedAt: number
    status: number
    paid: number
    destinationCalendarId: number
    cancellationReason: number
    rejectionReason: number
    dynamicEventSlugRef: number
    dynamicGroupSlugRef: number
    rescheduled: number
    fromReschedule: number
    recurringEventId: number
    smsReminderNumber: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    destinationCalendarId?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    destinationCalendarId?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    uid?: true
    userId?: true
    eventTypeId?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    paid?: true
    destinationCalendarId?: true
    cancellationReason?: true
    rejectionReason?: true
    dynamicEventSlugRef?: true
    dynamicGroupSlugRef?: true
    rescheduled?: true
    fromReschedule?: true
    recurringEventId?: true
    smsReminderNumber?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    uid?: true
    userId?: true
    eventTypeId?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    paid?: true
    destinationCalendarId?: true
    cancellationReason?: true
    rejectionReason?: true
    dynamicEventSlugRef?: true
    dynamicGroupSlugRef?: true
    rescheduled?: true
    fromReschedule?: true
    recurringEventId?: true
    smsReminderNumber?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    uid?: true
    userId?: true
    eventTypeId?: true
    title?: true
    description?: true
    customInputs?: true
    startTime?: true
    endTime?: true
    location?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    paid?: true
    destinationCalendarId?: true
    cancellationReason?: true
    rejectionReason?: true
    dynamicEventSlugRef?: true
    dynamicGroupSlugRef?: true
    rescheduled?: true
    fromReschedule?: true
    recurringEventId?: true
    smsReminderNumber?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which Booking to aggregate.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithAggregationInput>
    by: Array<BookingScalarFieldEnum>
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    id: number
    uid: string
    userId: number | null
    eventTypeId: number | null
    title: string
    description: string | null
    customInputs: JsonValue | null
    startTime: Date
    endTime: Date
    location: string | null
    createdAt: Date
    updatedAt: Date | null
    status: BookingStatus
    paid: boolean
    destinationCalendarId: number | null
    cancellationReason: string | null
    rejectionReason: string | null
    dynamicEventSlugRef: string | null
    dynamicGroupSlugRef: string | null
    rescheduled: boolean | null
    fromReschedule: string | null
    recurringEventId: string | null
    smsReminderNumber: string | null
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect = {
    id?: boolean
    uid?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    references?: boolean | BookingReferenceFindManyArgs
    eventType?: boolean | EventTypeArgs
    eventTypeId?: boolean
    title?: boolean
    description?: boolean
    customInputs?: boolean
    startTime?: boolean
    endTime?: boolean
    attendees?: boolean | AttendeeFindManyArgs
    location?: boolean
    dailyRef?: boolean | DailyEventReferenceArgs
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    paid?: boolean
    payment?: boolean | PaymentFindManyArgs
    destinationCalendar?: boolean | DestinationCalendarArgs
    destinationCalendarId?: boolean
    cancellationReason?: boolean
    rejectionReason?: boolean
    dynamicEventSlugRef?: boolean
    dynamicGroupSlugRef?: boolean
    rescheduled?: boolean
    fromReschedule?: boolean
    recurringEventId?: boolean
    smsReminderNumber?: boolean
    workflowReminders?: boolean | WorkflowReminderFindManyArgs
    _count?: boolean | BookingCountOutputTypeArgs
  }

  export type BookingInclude = {
    user?: boolean | UserArgs
    references?: boolean | BookingReferenceFindManyArgs
    eventType?: boolean | EventTypeArgs
    attendees?: boolean | AttendeeFindManyArgs
    dailyRef?: boolean | DailyEventReferenceArgs
    payment?: boolean | PaymentFindManyArgs
    destinationCalendar?: boolean | DestinationCalendarArgs
    workflowReminders?: boolean | WorkflowReminderFindManyArgs
    _count?: boolean | BookingCountOutputTypeArgs
  }

  export type BookingGetPayload<
    S extends boolean | null | undefined | BookingArgs,
    U = keyof S
      > = S extends true
        ? Booking
    : S extends undefined
    ? never
    : S extends BookingArgs | BookingFindManyArgs
    ?'include' extends U
    ? Booking  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'references' ? Array < BookingReferenceGetPayload<S['include'][P]>>  :
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> | null :
        P extends 'attendees' ? Array < AttendeeGetPayload<S['include'][P]>>  :
        P extends 'dailyRef' ? DailyEventReferenceGetPayload<S['include'][P]> | null :
        P extends 'payment' ? Array < PaymentGetPayload<S['include'][P]>>  :
        P extends 'destinationCalendar' ? DestinationCalendarGetPayload<S['include'][P]> | null :
        P extends 'workflowReminders' ? Array < WorkflowReminderGetPayload<S['include'][P]>>  :
        P extends '_count' ? BookingCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'references' ? Array < BookingReferenceGetPayload<S['select'][P]>>  :
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> | null :
        P extends 'attendees' ? Array < AttendeeGetPayload<S['select'][P]>>  :
        P extends 'dailyRef' ? DailyEventReferenceGetPayload<S['select'][P]> | null :
        P extends 'payment' ? Array < PaymentGetPayload<S['select'][P]>>  :
        P extends 'destinationCalendar' ? DestinationCalendarGetPayload<S['select'][P]> | null :
        P extends 'workflowReminders' ? Array < WorkflowReminderGetPayload<S['select'][P]>>  :
        P extends '_count' ? BookingCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Booking ? Booking[P] : never
  } 
    : Booking
  : Booking


  type BookingCountArgs = Merge<
    Omit<BookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }
  >

  export interface BookingDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookingFindManyArgs>(
      args?: SelectSubset<T, BookingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends BookingCreateArgs>(
      args: SelectSubset<T, BookingCreateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Create many Bookings.
     *     @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingCreateManyArgs>(
      args?: SelectSubset<T, BookingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends BookingDeleteArgs>(
      args: SelectSubset<T, BookingDeleteArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingUpdateArgs>(
      args: SelectSubset<T, BookingUpdateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingDeleteManyArgs>(
      args?: SelectSubset<T, BookingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingUpdateManyArgs>(
      args: SelectSubset<T, BookingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends BookingUpsertArgs>(
      args: SelectSubset<T, BookingUpsertArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    references<T extends BookingReferenceFindManyArgs = {}>(args?: Subset<T, BookingReferenceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BookingReference>>, PrismaPromise<Array<BookingReferenceGetPayload<T>>>>;

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    attendees<T extends AttendeeFindManyArgs = {}>(args?: Subset<T, AttendeeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Attendee>>, PrismaPromise<Array<AttendeeGetPayload<T>>>>;

    dailyRef<T extends DailyEventReferenceArgs = {}>(args?: Subset<T, DailyEventReferenceArgs>): CheckSelect<T, Prisma__DailyEventReferenceClient<DailyEventReference | null >, Prisma__DailyEventReferenceClient<DailyEventReferenceGetPayload<T> | null >>;

    payment<T extends PaymentFindManyArgs = {}>(args?: Subset<T, PaymentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Payment>>, PrismaPromise<Array<PaymentGetPayload<T>>>>;

    destinationCalendar<T extends DestinationCalendarArgs = {}>(args?: Subset<T, DestinationCalendarArgs>): CheckSelect<T, Prisma__DestinationCalendarClient<DestinationCalendar | null >, Prisma__DestinationCalendarClient<DestinationCalendarGetPayload<T> | null >>;

    workflowReminders<T extends WorkflowReminderFindManyArgs = {}>(args?: Subset<T, WorkflowReminderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<WorkflowReminder>>, PrismaPromise<Array<WorkflowReminderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Throw an Error if a Booking can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Throw an Error if a Booking can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     * 
    **/
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking findMany
   */
  export type BookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Bookings to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking create
   */
  export type BookingCreateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to create a Booking.
     * 
    **/
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }


  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs = {
    /**
     * The data used to create many Bookings.
     * 
    **/
    data: Enumerable<BookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Booking update
   */
  export type BookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to update a Booking.
     * 
    **/
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs = {
    /**
     * The data used to update Bookings.
     * 
    **/
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking upsert
   */
  export type BookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The filter to search for the Booking to update in case it exists.
     * 
    **/
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     * 
    **/
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }


  /**
   * Booking delete
   */
  export type BookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter which Booking to delete.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs = {
    /**
     * Filter which Bookings to delete
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking without action
   */
  export type BookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
  }



  /**
   * Model Schedule
   */


  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    timeZone: string | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    timeZone: string | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    timeZone: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    timeZone?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    timeZone?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    timeZone?: true
    _all?: true
  }

  export type ScheduleAggregateArgs = {
    /**
     * Filter which Schedule to aggregate.
     * 
    **/
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     * 
    **/
    orderBy?: Enumerable<ScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs = {
    where?: ScheduleWhereInput
    orderBy?: Enumerable<ScheduleOrderByWithAggregationInput>
    by: Array<ScheduleScalarFieldEnum>
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }


  export type ScheduleGroupByOutputType = {
    id: number
    userId: number
    name: string
    timeZone: string | null
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    eventType?: boolean | EventTypeFindManyArgs
    name?: boolean
    timeZone?: boolean
    availability?: boolean | AvailabilityFindManyArgs
    _count?: boolean | ScheduleCountOutputTypeArgs
  }

  export type ScheduleInclude = {
    user?: boolean | UserArgs
    eventType?: boolean | EventTypeFindManyArgs
    availability?: boolean | AvailabilityFindManyArgs
    _count?: boolean | ScheduleCountOutputTypeArgs
  }

  export type ScheduleGetPayload<
    S extends boolean | null | undefined | ScheduleArgs,
    U = keyof S
      > = S extends true
        ? Schedule
    : S extends undefined
    ? never
    : S extends ScheduleArgs | ScheduleFindManyArgs
    ?'include' extends U
    ? Schedule  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'eventType' ? Array < EventTypeGetPayload<S['include'][P]>>  :
        P extends 'availability' ? Array < AvailabilityGetPayload<S['include'][P]>>  :
        P extends '_count' ? ScheduleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'eventType' ? Array < EventTypeGetPayload<S['select'][P]>>  :
        P extends 'availability' ? Array < AvailabilityGetPayload<S['select'][P]>>  :
        P extends '_count' ? ScheduleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Schedule ? Schedule[P] : never
  } 
    : Schedule
  : Schedule


  type ScheduleCountArgs = Merge<
    Omit<ScheduleFindManyArgs, 'select' | 'include'> & {
      select?: ScheduleCountAggregateInputType | true
    }
  >

  export interface ScheduleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ScheduleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ScheduleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Schedule'> extends True ? CheckSelect<T, Prisma__ScheduleClient<Schedule>, Prisma__ScheduleClient<ScheduleGetPayload<T>>> : CheckSelect<T, Prisma__ScheduleClient<Schedule | null >, Prisma__ScheduleClient<ScheduleGetPayload<T> | null >>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ScheduleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ScheduleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Schedule'> extends True ? CheckSelect<T, Prisma__ScheduleClient<Schedule>, Prisma__ScheduleClient<ScheduleGetPayload<T>>> : CheckSelect<T, Prisma__ScheduleClient<Schedule | null >, Prisma__ScheduleClient<ScheduleGetPayload<T> | null >>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ScheduleFindManyArgs>(
      args?: SelectSubset<T, ScheduleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Schedule>>, PrismaPromise<Array<ScheduleGetPayload<T>>>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
    **/
    create<T extends ScheduleCreateArgs>(
      args: SelectSubset<T, ScheduleCreateArgs>
    ): CheckSelect<T, Prisma__ScheduleClient<Schedule>, Prisma__ScheduleClient<ScheduleGetPayload<T>>>

    /**
     * Create many Schedules.
     *     @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     *     @example
     *     // Create many Schedules
     *     const schedule = await prisma.schedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ScheduleCreateManyArgs>(
      args?: SelectSubset<T, ScheduleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
    **/
    delete<T extends ScheduleDeleteArgs>(
      args: SelectSubset<T, ScheduleDeleteArgs>
    ): CheckSelect<T, Prisma__ScheduleClient<Schedule>, Prisma__ScheduleClient<ScheduleGetPayload<T>>>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ScheduleUpdateArgs>(
      args: SelectSubset<T, ScheduleUpdateArgs>
    ): CheckSelect<T, Prisma__ScheduleClient<Schedule>, Prisma__ScheduleClient<ScheduleGetPayload<T>>>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ScheduleDeleteManyArgs>(
      args?: SelectSubset<T, ScheduleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ScheduleUpdateManyArgs>(
      args: SelectSubset<T, ScheduleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
    **/
    upsert<T extends ScheduleUpsertArgs>(
      args: SelectSubset<T, ScheduleUpsertArgs>
    ): CheckSelect<T, Prisma__ScheduleClient<Schedule>, Prisma__ScheduleClient<ScheduleGetPayload<T>>>

    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ScheduleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    eventType<T extends EventTypeFindManyArgs = {}>(args?: Subset<T, EventTypeFindManyArgs>): CheckSelect<T, PrismaPromise<Array<EventType>>, PrismaPromise<Array<EventTypeGetPayload<T>>>>;

    availability<T extends AvailabilityFindManyArgs = {}>(args?: Subset<T, AvailabilityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Availability>>, PrismaPromise<Array<AvailabilityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * Throw an Error if a Schedule can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Schedule to fetch.
     * 
    **/
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * Throw an Error if a Schedule can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Schedule to fetch.
     * 
    **/
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     * 
    **/
    orderBy?: Enumerable<ScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     * 
    **/
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     * 
    **/
    distinct?: Enumerable<ScheduleScalarFieldEnum>
  }


  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * Filter, which Schedules to fetch.
     * 
    **/
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     * 
    **/
    orderBy?: Enumerable<ScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     * 
    **/
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ScheduleScalarFieldEnum>
  }


  /**
   * Schedule create
   */
  export type ScheduleCreateArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * The data needed to create a Schedule.
     * 
    **/
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }


  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs = {
    /**
     * The data used to create many Schedules.
     * 
    **/
    data: Enumerable<ScheduleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * The data needed to update a Schedule.
     * 
    **/
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     * 
    **/
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs = {
    /**
     * The data used to update Schedules.
     * 
    **/
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     * 
    **/
    where?: ScheduleWhereInput
  }


  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     * 
    **/
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     * 
    **/
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }


  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
    /**
     * Filter which Schedule to delete.
     * 
    **/
    where: ScheduleWhereUniqueInput
  }


  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs = {
    /**
     * Filter which Schedules to delete
     * 
    **/
    where?: ScheduleWhereInput
  }


  /**
   * Schedule without action
   */
  export type ScheduleArgs = {
    /**
     * Select specific fields to fetch from the Schedule
     * 
    **/
    select?: ScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ScheduleInclude | null
  }



  /**
   * Model Availability
   */


  export type AggregateAvailability = {
    _count: AvailabilityCountAggregateOutputType | null
    _avg: AvailabilityAvgAggregateOutputType | null
    _sum: AvailabilitySumAggregateOutputType | null
    _min: AvailabilityMinAggregateOutputType | null
    _max: AvailabilityMaxAggregateOutputType | null
  }

  export type AvailabilityAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    days: number | null
    scheduleId: number | null
  }

  export type AvailabilitySumAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    days: number[] | null
    scheduleId: number | null
  }

  export type AvailabilityMinAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    startTime: Date | null
    endTime: Date | null
    date: Date | null
    scheduleId: number | null
  }

  export type AvailabilityMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    eventTypeId: number | null
    startTime: Date | null
    endTime: Date | null
    date: Date | null
    scheduleId: number | null
  }

  export type AvailabilityCountAggregateOutputType = {
    id: number
    userId: number
    eventTypeId: number
    days: number
    startTime: number
    endTime: number
    date: number
    scheduleId: number
    _all: number
  }


  export type AvailabilityAvgAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    days?: true
    scheduleId?: true
  }

  export type AvailabilitySumAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    days?: true
    scheduleId?: true
  }

  export type AvailabilityMinAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    startTime?: true
    endTime?: true
    date?: true
    scheduleId?: true
  }

  export type AvailabilityMaxAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    startTime?: true
    endTime?: true
    date?: true
    scheduleId?: true
  }

  export type AvailabilityCountAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    days?: true
    startTime?: true
    endTime?: true
    date?: true
    scheduleId?: true
    _all?: true
  }

  export type AvailabilityAggregateArgs = {
    /**
     * Filter which Availability to aggregate.
     * 
    **/
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     * 
    **/
    orderBy?: Enumerable<AvailabilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Availabilities
    **/
    _count?: true | AvailabilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvailabilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvailabilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvailabilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvailabilityMaxAggregateInputType
  }

  export type GetAvailabilityAggregateType<T extends AvailabilityAggregateArgs> = {
        [P in keyof T & keyof AggregateAvailability]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvailability[P]>
      : GetScalarType<T[P], AggregateAvailability[P]>
  }




  export type AvailabilityGroupByArgs = {
    where?: AvailabilityWhereInput
    orderBy?: Enumerable<AvailabilityOrderByWithAggregationInput>
    by: Array<AvailabilityScalarFieldEnum>
    having?: AvailabilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvailabilityCountAggregateInputType | true
    _avg?: AvailabilityAvgAggregateInputType
    _sum?: AvailabilitySumAggregateInputType
    _min?: AvailabilityMinAggregateInputType
    _max?: AvailabilityMaxAggregateInputType
  }


  export type AvailabilityGroupByOutputType = {
    id: number
    userId: number | null
    eventTypeId: number | null
    days: number[]
    startTime: Date
    endTime: Date
    date: Date | null
    scheduleId: number | null
    _count: AvailabilityCountAggregateOutputType | null
    _avg: AvailabilityAvgAggregateOutputType | null
    _sum: AvailabilitySumAggregateOutputType | null
    _min: AvailabilityMinAggregateOutputType | null
    _max: AvailabilityMaxAggregateOutputType | null
  }

  type GetAvailabilityGroupByPayload<T extends AvailabilityGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AvailabilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvailabilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvailabilityGroupByOutputType[P]>
            : GetScalarType<T[P], AvailabilityGroupByOutputType[P]>
        }
      >
    >


  export type AvailabilitySelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    eventType?: boolean | EventTypeArgs
    eventTypeId?: boolean
    days?: boolean
    startTime?: boolean
    endTime?: boolean
    date?: boolean
    Schedule?: boolean | ScheduleArgs
    scheduleId?: boolean
  }

  export type AvailabilityInclude = {
    user?: boolean | UserArgs
    eventType?: boolean | EventTypeArgs
    Schedule?: boolean | ScheduleArgs
  }

  export type AvailabilityGetPayload<
    S extends boolean | null | undefined | AvailabilityArgs,
    U = keyof S
      > = S extends true
        ? Availability
    : S extends undefined
    ? never
    : S extends AvailabilityArgs | AvailabilityFindManyArgs
    ?'include' extends U
    ? Availability  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> | null :
        P extends 'Schedule' ? ScheduleGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> | null :
        P extends 'Schedule' ? ScheduleGetPayload<S['select'][P]> | null :  P extends keyof Availability ? Availability[P] : never
  } 
    : Availability
  : Availability


  type AvailabilityCountArgs = Merge<
    Omit<AvailabilityFindManyArgs, 'select' | 'include'> & {
      select?: AvailabilityCountAggregateInputType | true
    }
  >

  export interface AvailabilityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Availability that matches the filter.
     * @param {AvailabilityFindUniqueArgs} args - Arguments to find a Availability
     * @example
     * // Get one Availability
     * const availability = await prisma.availability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AvailabilityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AvailabilityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Availability'> extends True ? CheckSelect<T, Prisma__AvailabilityClient<Availability>, Prisma__AvailabilityClient<AvailabilityGetPayload<T>>> : CheckSelect<T, Prisma__AvailabilityClient<Availability | null >, Prisma__AvailabilityClient<AvailabilityGetPayload<T> | null >>

    /**
     * Find the first Availability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityFindFirstArgs} args - Arguments to find a Availability
     * @example
     * // Get one Availability
     * const availability = await prisma.availability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AvailabilityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AvailabilityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Availability'> extends True ? CheckSelect<T, Prisma__AvailabilityClient<Availability>, Prisma__AvailabilityClient<AvailabilityGetPayload<T>>> : CheckSelect<T, Prisma__AvailabilityClient<Availability | null >, Prisma__AvailabilityClient<AvailabilityGetPayload<T> | null >>

    /**
     * Find zero or more Availabilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Availabilities
     * const availabilities = await prisma.availability.findMany()
     * 
     * // Get first 10 Availabilities
     * const availabilities = await prisma.availability.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const availabilityWithIdOnly = await prisma.availability.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AvailabilityFindManyArgs>(
      args?: SelectSubset<T, AvailabilityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Availability>>, PrismaPromise<Array<AvailabilityGetPayload<T>>>>

    /**
     * Create a Availability.
     * @param {AvailabilityCreateArgs} args - Arguments to create a Availability.
     * @example
     * // Create one Availability
     * const Availability = await prisma.availability.create({
     *   data: {
     *     // ... data to create a Availability
     *   }
     * })
     * 
    **/
    create<T extends AvailabilityCreateArgs>(
      args: SelectSubset<T, AvailabilityCreateArgs>
    ): CheckSelect<T, Prisma__AvailabilityClient<Availability>, Prisma__AvailabilityClient<AvailabilityGetPayload<T>>>

    /**
     * Create many Availabilities.
     *     @param {AvailabilityCreateManyArgs} args - Arguments to create many Availabilities.
     *     @example
     *     // Create many Availabilities
     *     const availability = await prisma.availability.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AvailabilityCreateManyArgs>(
      args?: SelectSubset<T, AvailabilityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Availability.
     * @param {AvailabilityDeleteArgs} args - Arguments to delete one Availability.
     * @example
     * // Delete one Availability
     * const Availability = await prisma.availability.delete({
     *   where: {
     *     // ... filter to delete one Availability
     *   }
     * })
     * 
    **/
    delete<T extends AvailabilityDeleteArgs>(
      args: SelectSubset<T, AvailabilityDeleteArgs>
    ): CheckSelect<T, Prisma__AvailabilityClient<Availability>, Prisma__AvailabilityClient<AvailabilityGetPayload<T>>>

    /**
     * Update one Availability.
     * @param {AvailabilityUpdateArgs} args - Arguments to update one Availability.
     * @example
     * // Update one Availability
     * const availability = await prisma.availability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AvailabilityUpdateArgs>(
      args: SelectSubset<T, AvailabilityUpdateArgs>
    ): CheckSelect<T, Prisma__AvailabilityClient<Availability>, Prisma__AvailabilityClient<AvailabilityGetPayload<T>>>

    /**
     * Delete zero or more Availabilities.
     * @param {AvailabilityDeleteManyArgs} args - Arguments to filter Availabilities to delete.
     * @example
     * // Delete a few Availabilities
     * const { count } = await prisma.availability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AvailabilityDeleteManyArgs>(
      args?: SelectSubset<T, AvailabilityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Availabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Availabilities
     * const availability = await prisma.availability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AvailabilityUpdateManyArgs>(
      args: SelectSubset<T, AvailabilityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Availability.
     * @param {AvailabilityUpsertArgs} args - Arguments to update or create a Availability.
     * @example
     * // Update or create a Availability
     * const availability = await prisma.availability.upsert({
     *   create: {
     *     // ... data to create a Availability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Availability we want to update
     *   }
     * })
    **/
    upsert<T extends AvailabilityUpsertArgs>(
      args: SelectSubset<T, AvailabilityUpsertArgs>
    ): CheckSelect<T, Prisma__AvailabilityClient<Availability>, Prisma__AvailabilityClient<AvailabilityGetPayload<T>>>

    /**
     * Count the number of Availabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityCountArgs} args - Arguments to filter Availabilities to count.
     * @example
     * // Count the number of Availabilities
     * const count = await prisma.availability.count({
     *   where: {
     *     // ... the filter for the Availabilities we want to count
     *   }
     * })
    **/
    count<T extends AvailabilityCountArgs>(
      args?: Subset<T, AvailabilityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvailabilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Availability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvailabilityAggregateArgs>(args: Subset<T, AvailabilityAggregateArgs>): PrismaPromise<GetAvailabilityAggregateType<T>>

    /**
     * Group by Availability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvailabilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvailabilityGroupByArgs['orderBy'] }
        : { orderBy?: AvailabilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvailabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvailabilityGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Availability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AvailabilityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    Schedule<T extends ScheduleArgs = {}>(args?: Subset<T, ScheduleArgs>): CheckSelect<T, Prisma__ScheduleClient<Schedule | null >, Prisma__ScheduleClient<ScheduleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Availability findUnique
   */
  export type AvailabilityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * Throw an Error if a Availability can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Availability to fetch.
     * 
    **/
    where: AvailabilityWhereUniqueInput
  }


  /**
   * Availability findFirst
   */
  export type AvailabilityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * Throw an Error if a Availability can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Availability to fetch.
     * 
    **/
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     * 
    **/
    orderBy?: Enumerable<AvailabilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Availabilities.
     * 
    **/
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Availabilities.
     * 
    **/
    distinct?: Enumerable<AvailabilityScalarFieldEnum>
  }


  /**
   * Availability findMany
   */
  export type AvailabilityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * Filter, which Availabilities to fetch.
     * 
    **/
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     * 
    **/
    orderBy?: Enumerable<AvailabilityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Availabilities.
     * 
    **/
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AvailabilityScalarFieldEnum>
  }


  /**
   * Availability create
   */
  export type AvailabilityCreateArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * The data needed to create a Availability.
     * 
    **/
    data: XOR<AvailabilityCreateInput, AvailabilityUncheckedCreateInput>
  }


  /**
   * Availability createMany
   */
  export type AvailabilityCreateManyArgs = {
    /**
     * The data used to create many Availabilities.
     * 
    **/
    data: Enumerable<AvailabilityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Availability update
   */
  export type AvailabilityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * The data needed to update a Availability.
     * 
    **/
    data: XOR<AvailabilityUpdateInput, AvailabilityUncheckedUpdateInput>
    /**
     * Choose, which Availability to update.
     * 
    **/
    where: AvailabilityWhereUniqueInput
  }


  /**
   * Availability updateMany
   */
  export type AvailabilityUpdateManyArgs = {
    /**
     * The data used to update Availabilities.
     * 
    **/
    data: XOR<AvailabilityUpdateManyMutationInput, AvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which Availabilities to update
     * 
    **/
    where?: AvailabilityWhereInput
  }


  /**
   * Availability upsert
   */
  export type AvailabilityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * The filter to search for the Availability to update in case it exists.
     * 
    **/
    where: AvailabilityWhereUniqueInput
    /**
     * In case the Availability found by the `where` argument doesn't exist, create a new Availability with this data.
     * 
    **/
    create: XOR<AvailabilityCreateInput, AvailabilityUncheckedCreateInput>
    /**
     * In case the Availability was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AvailabilityUpdateInput, AvailabilityUncheckedUpdateInput>
  }


  /**
   * Availability delete
   */
  export type AvailabilityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
    /**
     * Filter which Availability to delete.
     * 
    **/
    where: AvailabilityWhereUniqueInput
  }


  /**
   * Availability deleteMany
   */
  export type AvailabilityDeleteManyArgs = {
    /**
     * Filter which Availabilities to delete
     * 
    **/
    where?: AvailabilityWhereInput
  }


  /**
   * Availability without action
   */
  export type AvailabilityArgs = {
    /**
     * Select specific fields to fetch from the Availability
     * 
    **/
    select?: AvailabilitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AvailabilityInclude | null
  }



  /**
   * Model SelectedCalendar
   */


  export type AggregateSelectedCalendar = {
    _count: SelectedCalendarCountAggregateOutputType | null
    _avg: SelectedCalendarAvgAggregateOutputType | null
    _sum: SelectedCalendarSumAggregateOutputType | null
    _min: SelectedCalendarMinAggregateOutputType | null
    _max: SelectedCalendarMaxAggregateOutputType | null
  }

  export type SelectedCalendarAvgAggregateOutputType = {
    userId: number | null
  }

  export type SelectedCalendarSumAggregateOutputType = {
    userId: number | null
  }

  export type SelectedCalendarMinAggregateOutputType = {
    userId: number | null
    integration: string | null
    externalId: string | null
  }

  export type SelectedCalendarMaxAggregateOutputType = {
    userId: number | null
    integration: string | null
    externalId: string | null
  }

  export type SelectedCalendarCountAggregateOutputType = {
    userId: number
    integration: number
    externalId: number
    _all: number
  }


  export type SelectedCalendarAvgAggregateInputType = {
    userId?: true
  }

  export type SelectedCalendarSumAggregateInputType = {
    userId?: true
  }

  export type SelectedCalendarMinAggregateInputType = {
    userId?: true
    integration?: true
    externalId?: true
  }

  export type SelectedCalendarMaxAggregateInputType = {
    userId?: true
    integration?: true
    externalId?: true
  }

  export type SelectedCalendarCountAggregateInputType = {
    userId?: true
    integration?: true
    externalId?: true
    _all?: true
  }

  export type SelectedCalendarAggregateArgs = {
    /**
     * Filter which SelectedCalendar to aggregate.
     * 
    **/
    where?: SelectedCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedCalendars to fetch.
     * 
    **/
    orderBy?: Enumerable<SelectedCalendarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SelectedCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedCalendars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedCalendars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SelectedCalendars
    **/
    _count?: true | SelectedCalendarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SelectedCalendarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SelectedCalendarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SelectedCalendarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SelectedCalendarMaxAggregateInputType
  }

  export type GetSelectedCalendarAggregateType<T extends SelectedCalendarAggregateArgs> = {
        [P in keyof T & keyof AggregateSelectedCalendar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSelectedCalendar[P]>
      : GetScalarType<T[P], AggregateSelectedCalendar[P]>
  }




  export type SelectedCalendarGroupByArgs = {
    where?: SelectedCalendarWhereInput
    orderBy?: Enumerable<SelectedCalendarOrderByWithAggregationInput>
    by: Array<SelectedCalendarScalarFieldEnum>
    having?: SelectedCalendarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SelectedCalendarCountAggregateInputType | true
    _avg?: SelectedCalendarAvgAggregateInputType
    _sum?: SelectedCalendarSumAggregateInputType
    _min?: SelectedCalendarMinAggregateInputType
    _max?: SelectedCalendarMaxAggregateInputType
  }


  export type SelectedCalendarGroupByOutputType = {
    userId: number
    integration: string
    externalId: string
    _count: SelectedCalendarCountAggregateOutputType | null
    _avg: SelectedCalendarAvgAggregateOutputType | null
    _sum: SelectedCalendarSumAggregateOutputType | null
    _min: SelectedCalendarMinAggregateOutputType | null
    _max: SelectedCalendarMaxAggregateOutputType | null
  }

  type GetSelectedCalendarGroupByPayload<T extends SelectedCalendarGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SelectedCalendarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SelectedCalendarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SelectedCalendarGroupByOutputType[P]>
            : GetScalarType<T[P], SelectedCalendarGroupByOutputType[P]>
        }
      >
    >


  export type SelectedCalendarSelect = {
    user?: boolean | UserArgs
    userId?: boolean
    integration?: boolean
    externalId?: boolean
  }

  export type SelectedCalendarInclude = {
    user?: boolean | UserArgs
  }

  export type SelectedCalendarGetPayload<
    S extends boolean | null | undefined | SelectedCalendarArgs,
    U = keyof S
      > = S extends true
        ? SelectedCalendar
    : S extends undefined
    ? never
    : S extends SelectedCalendarArgs | SelectedCalendarFindManyArgs
    ?'include' extends U
    ? SelectedCalendar  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof SelectedCalendar ? SelectedCalendar[P] : never
  } 
    : SelectedCalendar
  : SelectedCalendar


  type SelectedCalendarCountArgs = Merge<
    Omit<SelectedCalendarFindManyArgs, 'select' | 'include'> & {
      select?: SelectedCalendarCountAggregateInputType | true
    }
  >

  export interface SelectedCalendarDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SelectedCalendar that matches the filter.
     * @param {SelectedCalendarFindUniqueArgs} args - Arguments to find a SelectedCalendar
     * @example
     * // Get one SelectedCalendar
     * const selectedCalendar = await prisma.selectedCalendar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SelectedCalendarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SelectedCalendarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SelectedCalendar'> extends True ? CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar>, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T>>> : CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar | null >, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T> | null >>

    /**
     * Find the first SelectedCalendar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedCalendarFindFirstArgs} args - Arguments to find a SelectedCalendar
     * @example
     * // Get one SelectedCalendar
     * const selectedCalendar = await prisma.selectedCalendar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SelectedCalendarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SelectedCalendarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SelectedCalendar'> extends True ? CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar>, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T>>> : CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar | null >, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T> | null >>

    /**
     * Find zero or more SelectedCalendars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedCalendarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SelectedCalendars
     * const selectedCalendars = await prisma.selectedCalendar.findMany()
     * 
     * // Get first 10 SelectedCalendars
     * const selectedCalendars = await prisma.selectedCalendar.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const selectedCalendarWithUserIdOnly = await prisma.selectedCalendar.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends SelectedCalendarFindManyArgs>(
      args?: SelectSubset<T, SelectedCalendarFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SelectedCalendar>>, PrismaPromise<Array<SelectedCalendarGetPayload<T>>>>

    /**
     * Create a SelectedCalendar.
     * @param {SelectedCalendarCreateArgs} args - Arguments to create a SelectedCalendar.
     * @example
     * // Create one SelectedCalendar
     * const SelectedCalendar = await prisma.selectedCalendar.create({
     *   data: {
     *     // ... data to create a SelectedCalendar
     *   }
     * })
     * 
    **/
    create<T extends SelectedCalendarCreateArgs>(
      args: SelectSubset<T, SelectedCalendarCreateArgs>
    ): CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar>, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T>>>

    /**
     * Create many SelectedCalendars.
     *     @param {SelectedCalendarCreateManyArgs} args - Arguments to create many SelectedCalendars.
     *     @example
     *     // Create many SelectedCalendars
     *     const selectedCalendar = await prisma.selectedCalendar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SelectedCalendarCreateManyArgs>(
      args?: SelectSubset<T, SelectedCalendarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SelectedCalendar.
     * @param {SelectedCalendarDeleteArgs} args - Arguments to delete one SelectedCalendar.
     * @example
     * // Delete one SelectedCalendar
     * const SelectedCalendar = await prisma.selectedCalendar.delete({
     *   where: {
     *     // ... filter to delete one SelectedCalendar
     *   }
     * })
     * 
    **/
    delete<T extends SelectedCalendarDeleteArgs>(
      args: SelectSubset<T, SelectedCalendarDeleteArgs>
    ): CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar>, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T>>>

    /**
     * Update one SelectedCalendar.
     * @param {SelectedCalendarUpdateArgs} args - Arguments to update one SelectedCalendar.
     * @example
     * // Update one SelectedCalendar
     * const selectedCalendar = await prisma.selectedCalendar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SelectedCalendarUpdateArgs>(
      args: SelectSubset<T, SelectedCalendarUpdateArgs>
    ): CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar>, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T>>>

    /**
     * Delete zero or more SelectedCalendars.
     * @param {SelectedCalendarDeleteManyArgs} args - Arguments to filter SelectedCalendars to delete.
     * @example
     * // Delete a few SelectedCalendars
     * const { count } = await prisma.selectedCalendar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SelectedCalendarDeleteManyArgs>(
      args?: SelectSubset<T, SelectedCalendarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SelectedCalendars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedCalendarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SelectedCalendars
     * const selectedCalendar = await prisma.selectedCalendar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SelectedCalendarUpdateManyArgs>(
      args: SelectSubset<T, SelectedCalendarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SelectedCalendar.
     * @param {SelectedCalendarUpsertArgs} args - Arguments to update or create a SelectedCalendar.
     * @example
     * // Update or create a SelectedCalendar
     * const selectedCalendar = await prisma.selectedCalendar.upsert({
     *   create: {
     *     // ... data to create a SelectedCalendar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SelectedCalendar we want to update
     *   }
     * })
    **/
    upsert<T extends SelectedCalendarUpsertArgs>(
      args: SelectSubset<T, SelectedCalendarUpsertArgs>
    ): CheckSelect<T, Prisma__SelectedCalendarClient<SelectedCalendar>, Prisma__SelectedCalendarClient<SelectedCalendarGetPayload<T>>>

    /**
     * Count the number of SelectedCalendars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedCalendarCountArgs} args - Arguments to filter SelectedCalendars to count.
     * @example
     * // Count the number of SelectedCalendars
     * const count = await prisma.selectedCalendar.count({
     *   where: {
     *     // ... the filter for the SelectedCalendars we want to count
     *   }
     * })
    **/
    count<T extends SelectedCalendarCountArgs>(
      args?: Subset<T, SelectedCalendarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SelectedCalendarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SelectedCalendar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedCalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SelectedCalendarAggregateArgs>(args: Subset<T, SelectedCalendarAggregateArgs>): PrismaPromise<GetSelectedCalendarAggregateType<T>>

    /**
     * Group by SelectedCalendar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SelectedCalendarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SelectedCalendarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SelectedCalendarGroupByArgs['orderBy'] }
        : { orderBy?: SelectedCalendarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SelectedCalendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSelectedCalendarGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SelectedCalendar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SelectedCalendarClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SelectedCalendar findUnique
   */
  export type SelectedCalendarFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * Throw an Error if a SelectedCalendar can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SelectedCalendar to fetch.
     * 
    **/
    where: SelectedCalendarWhereUniqueInput
  }


  /**
   * SelectedCalendar findFirst
   */
  export type SelectedCalendarFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * Throw an Error if a SelectedCalendar can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SelectedCalendar to fetch.
     * 
    **/
    where?: SelectedCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedCalendars to fetch.
     * 
    **/
    orderBy?: Enumerable<SelectedCalendarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SelectedCalendars.
     * 
    **/
    cursor?: SelectedCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedCalendars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedCalendars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SelectedCalendars.
     * 
    **/
    distinct?: Enumerable<SelectedCalendarScalarFieldEnum>
  }


  /**
   * SelectedCalendar findMany
   */
  export type SelectedCalendarFindManyArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * Filter, which SelectedCalendars to fetch.
     * 
    **/
    where?: SelectedCalendarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SelectedCalendars to fetch.
     * 
    **/
    orderBy?: Enumerable<SelectedCalendarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SelectedCalendars.
     * 
    **/
    cursor?: SelectedCalendarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SelectedCalendars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SelectedCalendars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SelectedCalendarScalarFieldEnum>
  }


  /**
   * SelectedCalendar create
   */
  export type SelectedCalendarCreateArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * The data needed to create a SelectedCalendar.
     * 
    **/
    data: XOR<SelectedCalendarCreateInput, SelectedCalendarUncheckedCreateInput>
  }


  /**
   * SelectedCalendar createMany
   */
  export type SelectedCalendarCreateManyArgs = {
    /**
     * The data used to create many SelectedCalendars.
     * 
    **/
    data: Enumerable<SelectedCalendarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SelectedCalendar update
   */
  export type SelectedCalendarUpdateArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * The data needed to update a SelectedCalendar.
     * 
    **/
    data: XOR<SelectedCalendarUpdateInput, SelectedCalendarUncheckedUpdateInput>
    /**
     * Choose, which SelectedCalendar to update.
     * 
    **/
    where: SelectedCalendarWhereUniqueInput
  }


  /**
   * SelectedCalendar updateMany
   */
  export type SelectedCalendarUpdateManyArgs = {
    /**
     * The data used to update SelectedCalendars.
     * 
    **/
    data: XOR<SelectedCalendarUpdateManyMutationInput, SelectedCalendarUncheckedUpdateManyInput>
    /**
     * Filter which SelectedCalendars to update
     * 
    **/
    where?: SelectedCalendarWhereInput
  }


  /**
   * SelectedCalendar upsert
   */
  export type SelectedCalendarUpsertArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * The filter to search for the SelectedCalendar to update in case it exists.
     * 
    **/
    where: SelectedCalendarWhereUniqueInput
    /**
     * In case the SelectedCalendar found by the `where` argument doesn't exist, create a new SelectedCalendar with this data.
     * 
    **/
    create: XOR<SelectedCalendarCreateInput, SelectedCalendarUncheckedCreateInput>
    /**
     * In case the SelectedCalendar was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SelectedCalendarUpdateInput, SelectedCalendarUncheckedUpdateInput>
  }


  /**
   * SelectedCalendar delete
   */
  export type SelectedCalendarDeleteArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
    /**
     * Filter which SelectedCalendar to delete.
     * 
    **/
    where: SelectedCalendarWhereUniqueInput
  }


  /**
   * SelectedCalendar deleteMany
   */
  export type SelectedCalendarDeleteManyArgs = {
    /**
     * Filter which SelectedCalendars to delete
     * 
    **/
    where?: SelectedCalendarWhereInput
  }


  /**
   * SelectedCalendar without action
   */
  export type SelectedCalendarArgs = {
    /**
     * Select specific fields to fetch from the SelectedCalendar
     * 
    **/
    select?: SelectedCalendarSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SelectedCalendarInclude | null
  }



  /**
   * Model EventTypeCustomInput
   */


  export type AggregateEventTypeCustomInput = {
    _count: EventTypeCustomInputCountAggregateOutputType | null
    _avg: EventTypeCustomInputAvgAggregateOutputType | null
    _sum: EventTypeCustomInputSumAggregateOutputType | null
    _min: EventTypeCustomInputMinAggregateOutputType | null
    _max: EventTypeCustomInputMaxAggregateOutputType | null
  }

  export type EventTypeCustomInputAvgAggregateOutputType = {
    id: number | null
    eventTypeId: number | null
  }

  export type EventTypeCustomInputSumAggregateOutputType = {
    id: number | null
    eventTypeId: number | null
  }

  export type EventTypeCustomInputMinAggregateOutputType = {
    id: number | null
    eventTypeId: number | null
    label: string | null
    type: EventTypeCustomInputType | null
    required: boolean | null
    placeholder: string | null
  }

  export type EventTypeCustomInputMaxAggregateOutputType = {
    id: number | null
    eventTypeId: number | null
    label: string | null
    type: EventTypeCustomInputType | null
    required: boolean | null
    placeholder: string | null
  }

  export type EventTypeCustomInputCountAggregateOutputType = {
    id: number
    eventTypeId: number
    label: number
    type: number
    required: number
    placeholder: number
    _all: number
  }


  export type EventTypeCustomInputAvgAggregateInputType = {
    id?: true
    eventTypeId?: true
  }

  export type EventTypeCustomInputSumAggregateInputType = {
    id?: true
    eventTypeId?: true
  }

  export type EventTypeCustomInputMinAggregateInputType = {
    id?: true
    eventTypeId?: true
    label?: true
    type?: true
    required?: true
    placeholder?: true
  }

  export type EventTypeCustomInputMaxAggregateInputType = {
    id?: true
    eventTypeId?: true
    label?: true
    type?: true
    required?: true
    placeholder?: true
  }

  export type EventTypeCustomInputCountAggregateInputType = {
    id?: true
    eventTypeId?: true
    label?: true
    type?: true
    required?: true
    placeholder?: true
    _all?: true
  }

  export type EventTypeCustomInputAggregateArgs = {
    /**
     * Filter which EventTypeCustomInput to aggregate.
     * 
    **/
    where?: EventTypeCustomInputWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTypeCustomInputs to fetch.
     * 
    **/
    orderBy?: Enumerable<EventTypeCustomInputOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EventTypeCustomInputWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTypeCustomInputs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTypeCustomInputs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventTypeCustomInputs
    **/
    _count?: true | EventTypeCustomInputCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventTypeCustomInputAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventTypeCustomInputSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventTypeCustomInputMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventTypeCustomInputMaxAggregateInputType
  }

  export type GetEventTypeCustomInputAggregateType<T extends EventTypeCustomInputAggregateArgs> = {
        [P in keyof T & keyof AggregateEventTypeCustomInput]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventTypeCustomInput[P]>
      : GetScalarType<T[P], AggregateEventTypeCustomInput[P]>
  }




  export type EventTypeCustomInputGroupByArgs = {
    where?: EventTypeCustomInputWhereInput
    orderBy?: Enumerable<EventTypeCustomInputOrderByWithAggregationInput>
    by: Array<EventTypeCustomInputScalarFieldEnum>
    having?: EventTypeCustomInputScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventTypeCustomInputCountAggregateInputType | true
    _avg?: EventTypeCustomInputAvgAggregateInputType
    _sum?: EventTypeCustomInputSumAggregateInputType
    _min?: EventTypeCustomInputMinAggregateInputType
    _max?: EventTypeCustomInputMaxAggregateInputType
  }


  export type EventTypeCustomInputGroupByOutputType = {
    id: number
    eventTypeId: number
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder: string
    _count: EventTypeCustomInputCountAggregateOutputType | null
    _avg: EventTypeCustomInputAvgAggregateOutputType | null
    _sum: EventTypeCustomInputSumAggregateOutputType | null
    _min: EventTypeCustomInputMinAggregateOutputType | null
    _max: EventTypeCustomInputMaxAggregateOutputType | null
  }

  type GetEventTypeCustomInputGroupByPayload<T extends EventTypeCustomInputGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EventTypeCustomInputGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventTypeCustomInputGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventTypeCustomInputGroupByOutputType[P]>
            : GetScalarType<T[P], EventTypeCustomInputGroupByOutputType[P]>
        }
      >
    >


  export type EventTypeCustomInputSelect = {
    id?: boolean
    eventTypeId?: boolean
    eventType?: boolean | EventTypeArgs
    label?: boolean
    type?: boolean
    required?: boolean
    placeholder?: boolean
  }

  export type EventTypeCustomInputInclude = {
    eventType?: boolean | EventTypeArgs
  }

  export type EventTypeCustomInputGetPayload<
    S extends boolean | null | undefined | EventTypeCustomInputArgs,
    U = keyof S
      > = S extends true
        ? EventTypeCustomInput
    : S extends undefined
    ? never
    : S extends EventTypeCustomInputArgs | EventTypeCustomInputFindManyArgs
    ?'include' extends U
    ? EventTypeCustomInput  & {
    [P in TrueKeys<S['include']>]:
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> :  P extends keyof EventTypeCustomInput ? EventTypeCustomInput[P] : never
  } 
    : EventTypeCustomInput
  : EventTypeCustomInput


  type EventTypeCustomInputCountArgs = Merge<
    Omit<EventTypeCustomInputFindManyArgs, 'select' | 'include'> & {
      select?: EventTypeCustomInputCountAggregateInputType | true
    }
  >

  export interface EventTypeCustomInputDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one EventTypeCustomInput that matches the filter.
     * @param {EventTypeCustomInputFindUniqueArgs} args - Arguments to find a EventTypeCustomInput
     * @example
     * // Get one EventTypeCustomInput
     * const eventTypeCustomInput = await prisma.eventTypeCustomInput.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventTypeCustomInputFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventTypeCustomInputFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EventTypeCustomInput'> extends True ? CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput>, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T>>> : CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput | null >, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T> | null >>

    /**
     * Find the first EventTypeCustomInput that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCustomInputFindFirstArgs} args - Arguments to find a EventTypeCustomInput
     * @example
     * // Get one EventTypeCustomInput
     * const eventTypeCustomInput = await prisma.eventTypeCustomInput.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventTypeCustomInputFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventTypeCustomInputFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EventTypeCustomInput'> extends True ? CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput>, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T>>> : CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput | null >, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T> | null >>

    /**
     * Find zero or more EventTypeCustomInputs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCustomInputFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventTypeCustomInputs
     * const eventTypeCustomInputs = await prisma.eventTypeCustomInput.findMany()
     * 
     * // Get first 10 EventTypeCustomInputs
     * const eventTypeCustomInputs = await prisma.eventTypeCustomInput.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventTypeCustomInputWithIdOnly = await prisma.eventTypeCustomInput.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventTypeCustomInputFindManyArgs>(
      args?: SelectSubset<T, EventTypeCustomInputFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<EventTypeCustomInput>>, PrismaPromise<Array<EventTypeCustomInputGetPayload<T>>>>

    /**
     * Create a EventTypeCustomInput.
     * @param {EventTypeCustomInputCreateArgs} args - Arguments to create a EventTypeCustomInput.
     * @example
     * // Create one EventTypeCustomInput
     * const EventTypeCustomInput = await prisma.eventTypeCustomInput.create({
     *   data: {
     *     // ... data to create a EventTypeCustomInput
     *   }
     * })
     * 
    **/
    create<T extends EventTypeCustomInputCreateArgs>(
      args: SelectSubset<T, EventTypeCustomInputCreateArgs>
    ): CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput>, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T>>>

    /**
     * Create many EventTypeCustomInputs.
     *     @param {EventTypeCustomInputCreateManyArgs} args - Arguments to create many EventTypeCustomInputs.
     *     @example
     *     // Create many EventTypeCustomInputs
     *     const eventTypeCustomInput = await prisma.eventTypeCustomInput.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventTypeCustomInputCreateManyArgs>(
      args?: SelectSubset<T, EventTypeCustomInputCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EventTypeCustomInput.
     * @param {EventTypeCustomInputDeleteArgs} args - Arguments to delete one EventTypeCustomInput.
     * @example
     * // Delete one EventTypeCustomInput
     * const EventTypeCustomInput = await prisma.eventTypeCustomInput.delete({
     *   where: {
     *     // ... filter to delete one EventTypeCustomInput
     *   }
     * })
     * 
    **/
    delete<T extends EventTypeCustomInputDeleteArgs>(
      args: SelectSubset<T, EventTypeCustomInputDeleteArgs>
    ): CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput>, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T>>>

    /**
     * Update one EventTypeCustomInput.
     * @param {EventTypeCustomInputUpdateArgs} args - Arguments to update one EventTypeCustomInput.
     * @example
     * // Update one EventTypeCustomInput
     * const eventTypeCustomInput = await prisma.eventTypeCustomInput.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventTypeCustomInputUpdateArgs>(
      args: SelectSubset<T, EventTypeCustomInputUpdateArgs>
    ): CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput>, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T>>>

    /**
     * Delete zero or more EventTypeCustomInputs.
     * @param {EventTypeCustomInputDeleteManyArgs} args - Arguments to filter EventTypeCustomInputs to delete.
     * @example
     * // Delete a few EventTypeCustomInputs
     * const { count } = await prisma.eventTypeCustomInput.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventTypeCustomInputDeleteManyArgs>(
      args?: SelectSubset<T, EventTypeCustomInputDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventTypeCustomInputs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCustomInputUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventTypeCustomInputs
     * const eventTypeCustomInput = await prisma.eventTypeCustomInput.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventTypeCustomInputUpdateManyArgs>(
      args: SelectSubset<T, EventTypeCustomInputUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EventTypeCustomInput.
     * @param {EventTypeCustomInputUpsertArgs} args - Arguments to update or create a EventTypeCustomInput.
     * @example
     * // Update or create a EventTypeCustomInput
     * const eventTypeCustomInput = await prisma.eventTypeCustomInput.upsert({
     *   create: {
     *     // ... data to create a EventTypeCustomInput
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventTypeCustomInput we want to update
     *   }
     * })
    **/
    upsert<T extends EventTypeCustomInputUpsertArgs>(
      args: SelectSubset<T, EventTypeCustomInputUpsertArgs>
    ): CheckSelect<T, Prisma__EventTypeCustomInputClient<EventTypeCustomInput>, Prisma__EventTypeCustomInputClient<EventTypeCustomInputGetPayload<T>>>

    /**
     * Count the number of EventTypeCustomInputs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCustomInputCountArgs} args - Arguments to filter EventTypeCustomInputs to count.
     * @example
     * // Count the number of EventTypeCustomInputs
     * const count = await prisma.eventTypeCustomInput.count({
     *   where: {
     *     // ... the filter for the EventTypeCustomInputs we want to count
     *   }
     * })
    **/
    count<T extends EventTypeCustomInputCountArgs>(
      args?: Subset<T, EventTypeCustomInputCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventTypeCustomInputCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventTypeCustomInput.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCustomInputAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventTypeCustomInputAggregateArgs>(args: Subset<T, EventTypeCustomInputAggregateArgs>): PrismaPromise<GetEventTypeCustomInputAggregateType<T>>

    /**
     * Group by EventTypeCustomInput.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventTypeCustomInputGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventTypeCustomInputGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventTypeCustomInputGroupByArgs['orderBy'] }
        : { orderBy?: EventTypeCustomInputGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventTypeCustomInputGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventTypeCustomInputGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventTypeCustomInput.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventTypeCustomInputClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * EventTypeCustomInput findUnique
   */
  export type EventTypeCustomInputFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * Throw an Error if a EventTypeCustomInput can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EventTypeCustomInput to fetch.
     * 
    **/
    where: EventTypeCustomInputWhereUniqueInput
  }


  /**
   * EventTypeCustomInput findFirst
   */
  export type EventTypeCustomInputFindFirstArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * Throw an Error if a EventTypeCustomInput can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which EventTypeCustomInput to fetch.
     * 
    **/
    where?: EventTypeCustomInputWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTypeCustomInputs to fetch.
     * 
    **/
    orderBy?: Enumerable<EventTypeCustomInputOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventTypeCustomInputs.
     * 
    **/
    cursor?: EventTypeCustomInputWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTypeCustomInputs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTypeCustomInputs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventTypeCustomInputs.
     * 
    **/
    distinct?: Enumerable<EventTypeCustomInputScalarFieldEnum>
  }


  /**
   * EventTypeCustomInput findMany
   */
  export type EventTypeCustomInputFindManyArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * Filter, which EventTypeCustomInputs to fetch.
     * 
    **/
    where?: EventTypeCustomInputWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventTypeCustomInputs to fetch.
     * 
    **/
    orderBy?: Enumerable<EventTypeCustomInputOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventTypeCustomInputs.
     * 
    **/
    cursor?: EventTypeCustomInputWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventTypeCustomInputs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventTypeCustomInputs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EventTypeCustomInputScalarFieldEnum>
  }


  /**
   * EventTypeCustomInput create
   */
  export type EventTypeCustomInputCreateArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * The data needed to create a EventTypeCustomInput.
     * 
    **/
    data: XOR<EventTypeCustomInputCreateInput, EventTypeCustomInputUncheckedCreateInput>
  }


  /**
   * EventTypeCustomInput createMany
   */
  export type EventTypeCustomInputCreateManyArgs = {
    /**
     * The data used to create many EventTypeCustomInputs.
     * 
    **/
    data: Enumerable<EventTypeCustomInputCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EventTypeCustomInput update
   */
  export type EventTypeCustomInputUpdateArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * The data needed to update a EventTypeCustomInput.
     * 
    **/
    data: XOR<EventTypeCustomInputUpdateInput, EventTypeCustomInputUncheckedUpdateInput>
    /**
     * Choose, which EventTypeCustomInput to update.
     * 
    **/
    where: EventTypeCustomInputWhereUniqueInput
  }


  /**
   * EventTypeCustomInput updateMany
   */
  export type EventTypeCustomInputUpdateManyArgs = {
    /**
     * The data used to update EventTypeCustomInputs.
     * 
    **/
    data: XOR<EventTypeCustomInputUpdateManyMutationInput, EventTypeCustomInputUncheckedUpdateManyInput>
    /**
     * Filter which EventTypeCustomInputs to update
     * 
    **/
    where?: EventTypeCustomInputWhereInput
  }


  /**
   * EventTypeCustomInput upsert
   */
  export type EventTypeCustomInputUpsertArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * The filter to search for the EventTypeCustomInput to update in case it exists.
     * 
    **/
    where: EventTypeCustomInputWhereUniqueInput
    /**
     * In case the EventTypeCustomInput found by the `where` argument doesn't exist, create a new EventTypeCustomInput with this data.
     * 
    **/
    create: XOR<EventTypeCustomInputCreateInput, EventTypeCustomInputUncheckedCreateInput>
    /**
     * In case the EventTypeCustomInput was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EventTypeCustomInputUpdateInput, EventTypeCustomInputUncheckedUpdateInput>
  }


  /**
   * EventTypeCustomInput delete
   */
  export type EventTypeCustomInputDeleteArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
    /**
     * Filter which EventTypeCustomInput to delete.
     * 
    **/
    where: EventTypeCustomInputWhereUniqueInput
  }


  /**
   * EventTypeCustomInput deleteMany
   */
  export type EventTypeCustomInputDeleteManyArgs = {
    /**
     * Filter which EventTypeCustomInputs to delete
     * 
    **/
    where?: EventTypeCustomInputWhereInput
  }


  /**
   * EventTypeCustomInput without action
   */
  export type EventTypeCustomInputArgs = {
    /**
     * Select specific fields to fetch from the EventTypeCustomInput
     * 
    **/
    select?: EventTypeCustomInputSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventTypeCustomInputInclude | null
  }



  /**
   * Model ResetPasswordRequest
   */


  export type AggregateResetPasswordRequest = {
    _count: ResetPasswordRequestCountAggregateOutputType | null
    _min: ResetPasswordRequestMinAggregateOutputType | null
    _max: ResetPasswordRequestMaxAggregateOutputType | null
  }

  export type ResetPasswordRequestMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    expires: Date | null
  }

  export type ResetPasswordRequestMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    expires: Date | null
  }

  export type ResetPasswordRequestCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    expires: number
    _all: number
  }


  export type ResetPasswordRequestMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    expires?: true
  }

  export type ResetPasswordRequestMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    expires?: true
  }

  export type ResetPasswordRequestCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    expires?: true
    _all?: true
  }

  export type ResetPasswordRequestAggregateArgs = {
    /**
     * Filter which ResetPasswordRequest to aggregate.
     * 
    **/
    where?: ResetPasswordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetPasswordRequests to fetch.
     * 
    **/
    orderBy?: Enumerable<ResetPasswordRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ResetPasswordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetPasswordRequests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetPasswordRequests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResetPasswordRequests
    **/
    _count?: true | ResetPasswordRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResetPasswordRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResetPasswordRequestMaxAggregateInputType
  }

  export type GetResetPasswordRequestAggregateType<T extends ResetPasswordRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateResetPasswordRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResetPasswordRequest[P]>
      : GetScalarType<T[P], AggregateResetPasswordRequest[P]>
  }




  export type ResetPasswordRequestGroupByArgs = {
    where?: ResetPasswordRequestWhereInput
    orderBy?: Enumerable<ResetPasswordRequestOrderByWithAggregationInput>
    by: Array<ResetPasswordRequestScalarFieldEnum>
    having?: ResetPasswordRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResetPasswordRequestCountAggregateInputType | true
    _min?: ResetPasswordRequestMinAggregateInputType
    _max?: ResetPasswordRequestMaxAggregateInputType
  }


  export type ResetPasswordRequestGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    expires: Date
    _count: ResetPasswordRequestCountAggregateOutputType | null
    _min: ResetPasswordRequestMinAggregateOutputType | null
    _max: ResetPasswordRequestMaxAggregateOutputType | null
  }

  type GetResetPasswordRequestGroupByPayload<T extends ResetPasswordRequestGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ResetPasswordRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResetPasswordRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResetPasswordRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ResetPasswordRequestGroupByOutputType[P]>
        }
      >
    >


  export type ResetPasswordRequestSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    expires?: boolean
  }

  export type ResetPasswordRequestGetPayload<
    S extends boolean | null | undefined | ResetPasswordRequestArgs,
    U = keyof S
      > = S extends true
        ? ResetPasswordRequest
    : S extends undefined
    ? never
    : S extends ResetPasswordRequestArgs | ResetPasswordRequestFindManyArgs
    ?'include' extends U
    ? ResetPasswordRequest 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ResetPasswordRequest ? ResetPasswordRequest[P] : never
  } 
    : ResetPasswordRequest
  : ResetPasswordRequest


  type ResetPasswordRequestCountArgs = Merge<
    Omit<ResetPasswordRequestFindManyArgs, 'select' | 'include'> & {
      select?: ResetPasswordRequestCountAggregateInputType | true
    }
  >

  export interface ResetPasswordRequestDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ResetPasswordRequest that matches the filter.
     * @param {ResetPasswordRequestFindUniqueArgs} args - Arguments to find a ResetPasswordRequest
     * @example
     * // Get one ResetPasswordRequest
     * const resetPasswordRequest = await prisma.resetPasswordRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResetPasswordRequestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResetPasswordRequestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ResetPasswordRequest'> extends True ? CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest>, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T>>> : CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest | null >, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T> | null >>

    /**
     * Find the first ResetPasswordRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetPasswordRequestFindFirstArgs} args - Arguments to find a ResetPasswordRequest
     * @example
     * // Get one ResetPasswordRequest
     * const resetPasswordRequest = await prisma.resetPasswordRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResetPasswordRequestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResetPasswordRequestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ResetPasswordRequest'> extends True ? CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest>, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T>>> : CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest | null >, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T> | null >>

    /**
     * Find zero or more ResetPasswordRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetPasswordRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResetPasswordRequests
     * const resetPasswordRequests = await prisma.resetPasswordRequest.findMany()
     * 
     * // Get first 10 ResetPasswordRequests
     * const resetPasswordRequests = await prisma.resetPasswordRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resetPasswordRequestWithIdOnly = await prisma.resetPasswordRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResetPasswordRequestFindManyArgs>(
      args?: SelectSubset<T, ResetPasswordRequestFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ResetPasswordRequest>>, PrismaPromise<Array<ResetPasswordRequestGetPayload<T>>>>

    /**
     * Create a ResetPasswordRequest.
     * @param {ResetPasswordRequestCreateArgs} args - Arguments to create a ResetPasswordRequest.
     * @example
     * // Create one ResetPasswordRequest
     * const ResetPasswordRequest = await prisma.resetPasswordRequest.create({
     *   data: {
     *     // ... data to create a ResetPasswordRequest
     *   }
     * })
     * 
    **/
    create<T extends ResetPasswordRequestCreateArgs>(
      args: SelectSubset<T, ResetPasswordRequestCreateArgs>
    ): CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest>, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T>>>

    /**
     * Create many ResetPasswordRequests.
     *     @param {ResetPasswordRequestCreateManyArgs} args - Arguments to create many ResetPasswordRequests.
     *     @example
     *     // Create many ResetPasswordRequests
     *     const resetPasswordRequest = await prisma.resetPasswordRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResetPasswordRequestCreateManyArgs>(
      args?: SelectSubset<T, ResetPasswordRequestCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ResetPasswordRequest.
     * @param {ResetPasswordRequestDeleteArgs} args - Arguments to delete one ResetPasswordRequest.
     * @example
     * // Delete one ResetPasswordRequest
     * const ResetPasswordRequest = await prisma.resetPasswordRequest.delete({
     *   where: {
     *     // ... filter to delete one ResetPasswordRequest
     *   }
     * })
     * 
    **/
    delete<T extends ResetPasswordRequestDeleteArgs>(
      args: SelectSubset<T, ResetPasswordRequestDeleteArgs>
    ): CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest>, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T>>>

    /**
     * Update one ResetPasswordRequest.
     * @param {ResetPasswordRequestUpdateArgs} args - Arguments to update one ResetPasswordRequest.
     * @example
     * // Update one ResetPasswordRequest
     * const resetPasswordRequest = await prisma.resetPasswordRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResetPasswordRequestUpdateArgs>(
      args: SelectSubset<T, ResetPasswordRequestUpdateArgs>
    ): CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest>, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T>>>

    /**
     * Delete zero or more ResetPasswordRequests.
     * @param {ResetPasswordRequestDeleteManyArgs} args - Arguments to filter ResetPasswordRequests to delete.
     * @example
     * // Delete a few ResetPasswordRequests
     * const { count } = await prisma.resetPasswordRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResetPasswordRequestDeleteManyArgs>(
      args?: SelectSubset<T, ResetPasswordRequestDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResetPasswordRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetPasswordRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResetPasswordRequests
     * const resetPasswordRequest = await prisma.resetPasswordRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResetPasswordRequestUpdateManyArgs>(
      args: SelectSubset<T, ResetPasswordRequestUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ResetPasswordRequest.
     * @param {ResetPasswordRequestUpsertArgs} args - Arguments to update or create a ResetPasswordRequest.
     * @example
     * // Update or create a ResetPasswordRequest
     * const resetPasswordRequest = await prisma.resetPasswordRequest.upsert({
     *   create: {
     *     // ... data to create a ResetPasswordRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResetPasswordRequest we want to update
     *   }
     * })
    **/
    upsert<T extends ResetPasswordRequestUpsertArgs>(
      args: SelectSubset<T, ResetPasswordRequestUpsertArgs>
    ): CheckSelect<T, Prisma__ResetPasswordRequestClient<ResetPasswordRequest>, Prisma__ResetPasswordRequestClient<ResetPasswordRequestGetPayload<T>>>

    /**
     * Count the number of ResetPasswordRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetPasswordRequestCountArgs} args - Arguments to filter ResetPasswordRequests to count.
     * @example
     * // Count the number of ResetPasswordRequests
     * const count = await prisma.resetPasswordRequest.count({
     *   where: {
     *     // ... the filter for the ResetPasswordRequests we want to count
     *   }
     * })
    **/
    count<T extends ResetPasswordRequestCountArgs>(
      args?: Subset<T, ResetPasswordRequestCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResetPasswordRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResetPasswordRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetPasswordRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResetPasswordRequestAggregateArgs>(args: Subset<T, ResetPasswordRequestAggregateArgs>): PrismaPromise<GetResetPasswordRequestAggregateType<T>>

    /**
     * Group by ResetPasswordRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResetPasswordRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResetPasswordRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResetPasswordRequestGroupByArgs['orderBy'] }
        : { orderBy?: ResetPasswordRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResetPasswordRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResetPasswordRequestGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResetPasswordRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResetPasswordRequestClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ResetPasswordRequest findUnique
   */
  export type ResetPasswordRequestFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * Throw an Error if a ResetPasswordRequest can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ResetPasswordRequest to fetch.
     * 
    **/
    where: ResetPasswordRequestWhereUniqueInput
  }


  /**
   * ResetPasswordRequest findFirst
   */
  export type ResetPasswordRequestFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * Throw an Error if a ResetPasswordRequest can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ResetPasswordRequest to fetch.
     * 
    **/
    where?: ResetPasswordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetPasswordRequests to fetch.
     * 
    **/
    orderBy?: Enumerable<ResetPasswordRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResetPasswordRequests.
     * 
    **/
    cursor?: ResetPasswordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetPasswordRequests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetPasswordRequests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResetPasswordRequests.
     * 
    **/
    distinct?: Enumerable<ResetPasswordRequestScalarFieldEnum>
  }


  /**
   * ResetPasswordRequest findMany
   */
  export type ResetPasswordRequestFindManyArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * Filter, which ResetPasswordRequests to fetch.
     * 
    **/
    where?: ResetPasswordRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResetPasswordRequests to fetch.
     * 
    **/
    orderBy?: Enumerable<ResetPasswordRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResetPasswordRequests.
     * 
    **/
    cursor?: ResetPasswordRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResetPasswordRequests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResetPasswordRequests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ResetPasswordRequestScalarFieldEnum>
  }


  /**
   * ResetPasswordRequest create
   */
  export type ResetPasswordRequestCreateArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * The data needed to create a ResetPasswordRequest.
     * 
    **/
    data: XOR<ResetPasswordRequestCreateInput, ResetPasswordRequestUncheckedCreateInput>
  }


  /**
   * ResetPasswordRequest createMany
   */
  export type ResetPasswordRequestCreateManyArgs = {
    /**
     * The data used to create many ResetPasswordRequests.
     * 
    **/
    data: Enumerable<ResetPasswordRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ResetPasswordRequest update
   */
  export type ResetPasswordRequestUpdateArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * The data needed to update a ResetPasswordRequest.
     * 
    **/
    data: XOR<ResetPasswordRequestUpdateInput, ResetPasswordRequestUncheckedUpdateInput>
    /**
     * Choose, which ResetPasswordRequest to update.
     * 
    **/
    where: ResetPasswordRequestWhereUniqueInput
  }


  /**
   * ResetPasswordRequest updateMany
   */
  export type ResetPasswordRequestUpdateManyArgs = {
    /**
     * The data used to update ResetPasswordRequests.
     * 
    **/
    data: XOR<ResetPasswordRequestUpdateManyMutationInput, ResetPasswordRequestUncheckedUpdateManyInput>
    /**
     * Filter which ResetPasswordRequests to update
     * 
    **/
    where?: ResetPasswordRequestWhereInput
  }


  /**
   * ResetPasswordRequest upsert
   */
  export type ResetPasswordRequestUpsertArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * The filter to search for the ResetPasswordRequest to update in case it exists.
     * 
    **/
    where: ResetPasswordRequestWhereUniqueInput
    /**
     * In case the ResetPasswordRequest found by the `where` argument doesn't exist, create a new ResetPasswordRequest with this data.
     * 
    **/
    create: XOR<ResetPasswordRequestCreateInput, ResetPasswordRequestUncheckedCreateInput>
    /**
     * In case the ResetPasswordRequest was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ResetPasswordRequestUpdateInput, ResetPasswordRequestUncheckedUpdateInput>
  }


  /**
   * ResetPasswordRequest delete
   */
  export type ResetPasswordRequestDeleteArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
    /**
     * Filter which ResetPasswordRequest to delete.
     * 
    **/
    where: ResetPasswordRequestWhereUniqueInput
  }


  /**
   * ResetPasswordRequest deleteMany
   */
  export type ResetPasswordRequestDeleteManyArgs = {
    /**
     * Filter which ResetPasswordRequests to delete
     * 
    **/
    where?: ResetPasswordRequestWhereInput
  }


  /**
   * ResetPasswordRequest without action
   */
  export type ResetPasswordRequestArgs = {
    /**
     * Select specific fields to fetch from the ResetPasswordRequest
     * 
    **/
    select?: ResetPasswordRequestSelect | null
  }



  /**
   * Model ReminderMail
   */


  export type AggregateReminderMail = {
    _count: ReminderMailCountAggregateOutputType | null
    _avg: ReminderMailAvgAggregateOutputType | null
    _sum: ReminderMailSumAggregateOutputType | null
    _min: ReminderMailMinAggregateOutputType | null
    _max: ReminderMailMaxAggregateOutputType | null
  }

  export type ReminderMailAvgAggregateOutputType = {
    id: number | null
    referenceId: number | null
    elapsedMinutes: number | null
  }

  export type ReminderMailSumAggregateOutputType = {
    id: number | null
    referenceId: number | null
    elapsedMinutes: number | null
  }

  export type ReminderMailMinAggregateOutputType = {
    id: number | null
    referenceId: number | null
    reminderType: ReminderType | null
    elapsedMinutes: number | null
    createdAt: Date | null
  }

  export type ReminderMailMaxAggregateOutputType = {
    id: number | null
    referenceId: number | null
    reminderType: ReminderType | null
    elapsedMinutes: number | null
    createdAt: Date | null
  }

  export type ReminderMailCountAggregateOutputType = {
    id: number
    referenceId: number
    reminderType: number
    elapsedMinutes: number
    createdAt: number
    _all: number
  }


  export type ReminderMailAvgAggregateInputType = {
    id?: true
    referenceId?: true
    elapsedMinutes?: true
  }

  export type ReminderMailSumAggregateInputType = {
    id?: true
    referenceId?: true
    elapsedMinutes?: true
  }

  export type ReminderMailMinAggregateInputType = {
    id?: true
    referenceId?: true
    reminderType?: true
    elapsedMinutes?: true
    createdAt?: true
  }

  export type ReminderMailMaxAggregateInputType = {
    id?: true
    referenceId?: true
    reminderType?: true
    elapsedMinutes?: true
    createdAt?: true
  }

  export type ReminderMailCountAggregateInputType = {
    id?: true
    referenceId?: true
    reminderType?: true
    elapsedMinutes?: true
    createdAt?: true
    _all?: true
  }

  export type ReminderMailAggregateArgs = {
    /**
     * Filter which ReminderMail to aggregate.
     * 
    **/
    where?: ReminderMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReminderMails to fetch.
     * 
    **/
    orderBy?: Enumerable<ReminderMailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReminderMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReminderMails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReminderMails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReminderMails
    **/
    _count?: true | ReminderMailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReminderMailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReminderMailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReminderMailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReminderMailMaxAggregateInputType
  }

  export type GetReminderMailAggregateType<T extends ReminderMailAggregateArgs> = {
        [P in keyof T & keyof AggregateReminderMail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReminderMail[P]>
      : GetScalarType<T[P], AggregateReminderMail[P]>
  }




  export type ReminderMailGroupByArgs = {
    where?: ReminderMailWhereInput
    orderBy?: Enumerable<ReminderMailOrderByWithAggregationInput>
    by: Array<ReminderMailScalarFieldEnum>
    having?: ReminderMailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReminderMailCountAggregateInputType | true
    _avg?: ReminderMailAvgAggregateInputType
    _sum?: ReminderMailSumAggregateInputType
    _min?: ReminderMailMinAggregateInputType
    _max?: ReminderMailMaxAggregateInputType
  }


  export type ReminderMailGroupByOutputType = {
    id: number
    referenceId: number
    reminderType: ReminderType
    elapsedMinutes: number
    createdAt: Date
    _count: ReminderMailCountAggregateOutputType | null
    _avg: ReminderMailAvgAggregateOutputType | null
    _sum: ReminderMailSumAggregateOutputType | null
    _min: ReminderMailMinAggregateOutputType | null
    _max: ReminderMailMaxAggregateOutputType | null
  }

  type GetReminderMailGroupByPayload<T extends ReminderMailGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReminderMailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReminderMailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReminderMailGroupByOutputType[P]>
            : GetScalarType<T[P], ReminderMailGroupByOutputType[P]>
        }
      >
    >


  export type ReminderMailSelect = {
    id?: boolean
    referenceId?: boolean
    reminderType?: boolean
    elapsedMinutes?: boolean
    createdAt?: boolean
  }

  export type ReminderMailGetPayload<
    S extends boolean | null | undefined | ReminderMailArgs,
    U = keyof S
      > = S extends true
        ? ReminderMail
    : S extends undefined
    ? never
    : S extends ReminderMailArgs | ReminderMailFindManyArgs
    ?'include' extends U
    ? ReminderMail 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ReminderMail ? ReminderMail[P] : never
  } 
    : ReminderMail
  : ReminderMail


  type ReminderMailCountArgs = Merge<
    Omit<ReminderMailFindManyArgs, 'select' | 'include'> & {
      select?: ReminderMailCountAggregateInputType | true
    }
  >

  export interface ReminderMailDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ReminderMail that matches the filter.
     * @param {ReminderMailFindUniqueArgs} args - Arguments to find a ReminderMail
     * @example
     * // Get one ReminderMail
     * const reminderMail = await prisma.reminderMail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReminderMailFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReminderMailFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ReminderMail'> extends True ? CheckSelect<T, Prisma__ReminderMailClient<ReminderMail>, Prisma__ReminderMailClient<ReminderMailGetPayload<T>>> : CheckSelect<T, Prisma__ReminderMailClient<ReminderMail | null >, Prisma__ReminderMailClient<ReminderMailGetPayload<T> | null >>

    /**
     * Find the first ReminderMail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderMailFindFirstArgs} args - Arguments to find a ReminderMail
     * @example
     * // Get one ReminderMail
     * const reminderMail = await prisma.reminderMail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReminderMailFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReminderMailFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ReminderMail'> extends True ? CheckSelect<T, Prisma__ReminderMailClient<ReminderMail>, Prisma__ReminderMailClient<ReminderMailGetPayload<T>>> : CheckSelect<T, Prisma__ReminderMailClient<ReminderMail | null >, Prisma__ReminderMailClient<ReminderMailGetPayload<T> | null >>

    /**
     * Find zero or more ReminderMails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderMailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReminderMails
     * const reminderMails = await prisma.reminderMail.findMany()
     * 
     * // Get first 10 ReminderMails
     * const reminderMails = await prisma.reminderMail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reminderMailWithIdOnly = await prisma.reminderMail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReminderMailFindManyArgs>(
      args?: SelectSubset<T, ReminderMailFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ReminderMail>>, PrismaPromise<Array<ReminderMailGetPayload<T>>>>

    /**
     * Create a ReminderMail.
     * @param {ReminderMailCreateArgs} args - Arguments to create a ReminderMail.
     * @example
     * // Create one ReminderMail
     * const ReminderMail = await prisma.reminderMail.create({
     *   data: {
     *     // ... data to create a ReminderMail
     *   }
     * })
     * 
    **/
    create<T extends ReminderMailCreateArgs>(
      args: SelectSubset<T, ReminderMailCreateArgs>
    ): CheckSelect<T, Prisma__ReminderMailClient<ReminderMail>, Prisma__ReminderMailClient<ReminderMailGetPayload<T>>>

    /**
     * Create many ReminderMails.
     *     @param {ReminderMailCreateManyArgs} args - Arguments to create many ReminderMails.
     *     @example
     *     // Create many ReminderMails
     *     const reminderMail = await prisma.reminderMail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReminderMailCreateManyArgs>(
      args?: SelectSubset<T, ReminderMailCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ReminderMail.
     * @param {ReminderMailDeleteArgs} args - Arguments to delete one ReminderMail.
     * @example
     * // Delete one ReminderMail
     * const ReminderMail = await prisma.reminderMail.delete({
     *   where: {
     *     // ... filter to delete one ReminderMail
     *   }
     * })
     * 
    **/
    delete<T extends ReminderMailDeleteArgs>(
      args: SelectSubset<T, ReminderMailDeleteArgs>
    ): CheckSelect<T, Prisma__ReminderMailClient<ReminderMail>, Prisma__ReminderMailClient<ReminderMailGetPayload<T>>>

    /**
     * Update one ReminderMail.
     * @param {ReminderMailUpdateArgs} args - Arguments to update one ReminderMail.
     * @example
     * // Update one ReminderMail
     * const reminderMail = await prisma.reminderMail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReminderMailUpdateArgs>(
      args: SelectSubset<T, ReminderMailUpdateArgs>
    ): CheckSelect<T, Prisma__ReminderMailClient<ReminderMail>, Prisma__ReminderMailClient<ReminderMailGetPayload<T>>>

    /**
     * Delete zero or more ReminderMails.
     * @param {ReminderMailDeleteManyArgs} args - Arguments to filter ReminderMails to delete.
     * @example
     * // Delete a few ReminderMails
     * const { count } = await prisma.reminderMail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReminderMailDeleteManyArgs>(
      args?: SelectSubset<T, ReminderMailDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReminderMails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderMailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReminderMails
     * const reminderMail = await prisma.reminderMail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReminderMailUpdateManyArgs>(
      args: SelectSubset<T, ReminderMailUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ReminderMail.
     * @param {ReminderMailUpsertArgs} args - Arguments to update or create a ReminderMail.
     * @example
     * // Update or create a ReminderMail
     * const reminderMail = await prisma.reminderMail.upsert({
     *   create: {
     *     // ... data to create a ReminderMail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReminderMail we want to update
     *   }
     * })
    **/
    upsert<T extends ReminderMailUpsertArgs>(
      args: SelectSubset<T, ReminderMailUpsertArgs>
    ): CheckSelect<T, Prisma__ReminderMailClient<ReminderMail>, Prisma__ReminderMailClient<ReminderMailGetPayload<T>>>

    /**
     * Count the number of ReminderMails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderMailCountArgs} args - Arguments to filter ReminderMails to count.
     * @example
     * // Count the number of ReminderMails
     * const count = await prisma.reminderMail.count({
     *   where: {
     *     // ... the filter for the ReminderMails we want to count
     *   }
     * })
    **/
    count<T extends ReminderMailCountArgs>(
      args?: Subset<T, ReminderMailCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReminderMailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReminderMail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderMailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReminderMailAggregateArgs>(args: Subset<T, ReminderMailAggregateArgs>): PrismaPromise<GetReminderMailAggregateType<T>>

    /**
     * Group by ReminderMail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderMailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReminderMailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReminderMailGroupByArgs['orderBy'] }
        : { orderBy?: ReminderMailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReminderMailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReminderMailGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReminderMail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReminderMailClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ReminderMail findUnique
   */
  export type ReminderMailFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * Throw an Error if a ReminderMail can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ReminderMail to fetch.
     * 
    **/
    where: ReminderMailWhereUniqueInput
  }


  /**
   * ReminderMail findFirst
   */
  export type ReminderMailFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * Throw an Error if a ReminderMail can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ReminderMail to fetch.
     * 
    **/
    where?: ReminderMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReminderMails to fetch.
     * 
    **/
    orderBy?: Enumerable<ReminderMailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReminderMails.
     * 
    **/
    cursor?: ReminderMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReminderMails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReminderMails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReminderMails.
     * 
    **/
    distinct?: Enumerable<ReminderMailScalarFieldEnum>
  }


  /**
   * ReminderMail findMany
   */
  export type ReminderMailFindManyArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * Filter, which ReminderMails to fetch.
     * 
    **/
    where?: ReminderMailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReminderMails to fetch.
     * 
    **/
    orderBy?: Enumerable<ReminderMailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReminderMails.
     * 
    **/
    cursor?: ReminderMailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReminderMails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReminderMails.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReminderMailScalarFieldEnum>
  }


  /**
   * ReminderMail create
   */
  export type ReminderMailCreateArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * The data needed to create a ReminderMail.
     * 
    **/
    data: XOR<ReminderMailCreateInput, ReminderMailUncheckedCreateInput>
  }


  /**
   * ReminderMail createMany
   */
  export type ReminderMailCreateManyArgs = {
    /**
     * The data used to create many ReminderMails.
     * 
    **/
    data: Enumerable<ReminderMailCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ReminderMail update
   */
  export type ReminderMailUpdateArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * The data needed to update a ReminderMail.
     * 
    **/
    data: XOR<ReminderMailUpdateInput, ReminderMailUncheckedUpdateInput>
    /**
     * Choose, which ReminderMail to update.
     * 
    **/
    where: ReminderMailWhereUniqueInput
  }


  /**
   * ReminderMail updateMany
   */
  export type ReminderMailUpdateManyArgs = {
    /**
     * The data used to update ReminderMails.
     * 
    **/
    data: XOR<ReminderMailUpdateManyMutationInput, ReminderMailUncheckedUpdateManyInput>
    /**
     * Filter which ReminderMails to update
     * 
    **/
    where?: ReminderMailWhereInput
  }


  /**
   * ReminderMail upsert
   */
  export type ReminderMailUpsertArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * The filter to search for the ReminderMail to update in case it exists.
     * 
    **/
    where: ReminderMailWhereUniqueInput
    /**
     * In case the ReminderMail found by the `where` argument doesn't exist, create a new ReminderMail with this data.
     * 
    **/
    create: XOR<ReminderMailCreateInput, ReminderMailUncheckedCreateInput>
    /**
     * In case the ReminderMail was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReminderMailUpdateInput, ReminderMailUncheckedUpdateInput>
  }


  /**
   * ReminderMail delete
   */
  export type ReminderMailDeleteArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
    /**
     * Filter which ReminderMail to delete.
     * 
    **/
    where: ReminderMailWhereUniqueInput
  }


  /**
   * ReminderMail deleteMany
   */
  export type ReminderMailDeleteManyArgs = {
    /**
     * Filter which ReminderMails to delete
     * 
    **/
    where?: ReminderMailWhereInput
  }


  /**
   * ReminderMail without action
   */
  export type ReminderMailArgs = {
    /**
     * Select specific fields to fetch from the ReminderMail
     * 
    **/
    select?: ReminderMailSelect | null
  }



  /**
   * Model Payment
   */


  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    bookingId: number | null
    amount: number | null
    fee: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    bookingId: number | null
    amount: number | null
    fee: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    uid: string | null
    type: PaymentType | null
    bookingId: number | null
    amount: number | null
    fee: number | null
    currency: string | null
    success: boolean | null
    refunded: boolean | null
    externalId: string | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    type: PaymentType | null
    bookingId: number | null
    amount: number | null
    fee: number | null
    currency: string | null
    success: boolean | null
    refunded: boolean | null
    externalId: string | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    uid: number
    type: number
    bookingId: number
    amount: number
    fee: number
    currency: number
    success: number
    refunded: number
    data: number
    externalId: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
    fee?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    bookingId?: true
    amount?: true
    fee?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    uid?: true
    type?: true
    bookingId?: true
    amount?: true
    fee?: true
    currency?: true
    success?: true
    refunded?: true
    externalId?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    uid?: true
    type?: true
    bookingId?: true
    amount?: true
    fee?: true
    currency?: true
    success?: true
    refunded?: true
    externalId?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    uid?: true
    type?: true
    bookingId?: true
    amount?: true
    fee?: true
    currency?: true
    success?: true
    refunded?: true
    data?: true
    externalId?: true
    _all?: true
  }

  export type PaymentAggregateArgs = {
    /**
     * Filter which Payment to aggregate.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs = {
    where?: PaymentWhereInput
    orderBy?: Enumerable<PaymentOrderByWithAggregationInput>
    by: Array<PaymentScalarFieldEnum>
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }


  export type PaymentGroupByOutputType = {
    id: number
    uid: string
    type: PaymentType
    bookingId: number
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonValue
    externalId: string
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect = {
    id?: boolean
    uid?: boolean
    type?: boolean
    bookingId?: boolean
    booking?: boolean | BookingArgs
    amount?: boolean
    fee?: boolean
    currency?: boolean
    success?: boolean
    refunded?: boolean
    data?: boolean
    externalId?: boolean
  }

  export type PaymentInclude = {
    booking?: boolean | BookingArgs
  }

  export type PaymentGetPayload<
    S extends boolean | null | undefined | PaymentArgs,
    U = keyof S
      > = S extends true
        ? Payment
    : S extends undefined
    ? never
    : S extends PaymentArgs | PaymentFindManyArgs
    ?'include' extends U
    ? Payment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'booking' ? BookingGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'booking' ? BookingGetPayload<S['select'][P]> | null :  P extends keyof Payment ? Payment[P] : never
  } 
    : Payment
  : Payment


  type PaymentCountArgs = Merge<
    Omit<PaymentFindManyArgs, 'select' | 'include'> & {
      select?: PaymentCountAggregateInputType | true
    }
  >

  export interface PaymentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PaymentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Payment'> extends True ? CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>> : CheckSelect<T, Prisma__PaymentClient<Payment | null >, Prisma__PaymentClient<PaymentGetPayload<T> | null >>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PaymentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Payment'> extends True ? CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>> : CheckSelect<T, Prisma__PaymentClient<Payment | null >, Prisma__PaymentClient<PaymentGetPayload<T> | null >>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentFindManyArgs>(
      args?: SelectSubset<T, PaymentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Payment>>, PrismaPromise<Array<PaymentGetPayload<T>>>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends PaymentCreateArgs>(
      args: SelectSubset<T, PaymentCreateArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Create many Payments.
     *     @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentCreateManyArgs>(
      args?: SelectSubset<T, PaymentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends PaymentDeleteArgs>(
      args: SelectSubset<T, PaymentDeleteArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentUpdateArgs>(
      args: SelectSubset<T, PaymentUpdateArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentDeleteManyArgs>(
      args?: SelectSubset<T, PaymentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentUpdateManyArgs>(
      args: SelectSubset<T, PaymentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentUpsertArgs>(
      args: SelectSubset<T, PaymentUpsertArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PaymentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    booking<T extends BookingArgs = {}>(args?: Subset<T, BookingArgs>): CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Throw an Error if a Payment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Payment to fetch.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Throw an Error if a Payment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Payment to fetch.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     * 
    **/
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter, which Payments to fetch.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment create
   */
  export type PaymentCreateArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The data needed to create a Payment.
     * 
    **/
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }


  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs = {
    /**
     * The data used to create many Payments.
     * 
    **/
    data: Enumerable<PaymentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Payment update
   */
  export type PaymentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The data needed to update a Payment.
     * 
    **/
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs = {
    /**
     * The data used to update Payments.
     * 
    **/
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     * 
    **/
    where?: PaymentWhereInput
  }


  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The filter to search for the Payment to update in case it exists.
     * 
    **/
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     * 
    **/
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }


  /**
   * Payment delete
   */
  export type PaymentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter which Payment to delete.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs = {
    /**
     * Filter which Payments to delete
     * 
    **/
    where?: PaymentWhereInput
  }


  /**
   * Payment without action
   */
  export type PaymentArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
  }



  /**
   * Model Webhook
   */


  export type AggregateWebhook = {
    _count: WebhookCountAggregateOutputType | null
    _avg: WebhookAvgAggregateOutputType | null
    _sum: WebhookSumAggregateOutputType | null
    _min: WebhookMinAggregateOutputType | null
    _max: WebhookMaxAggregateOutputType | null
  }

  export type WebhookAvgAggregateOutputType = {
    userId: number | null
    eventTypeId: number | null
  }

  export type WebhookSumAggregateOutputType = {
    userId: number | null
    eventTypeId: number | null
  }

  export type WebhookMinAggregateOutputType = {
    id: string | null
    userId: number | null
    eventTypeId: number | null
    subscriberUrl: string | null
    payloadTemplate: string | null
    createdAt: Date | null
    active: boolean | null
    appId: string | null
    secret: string | null
  }

  export type WebhookMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    eventTypeId: number | null
    subscriberUrl: string | null
    payloadTemplate: string | null
    createdAt: Date | null
    active: boolean | null
    appId: string | null
    secret: string | null
  }

  export type WebhookCountAggregateOutputType = {
    id: number
    userId: number
    eventTypeId: number
    subscriberUrl: number
    payloadTemplate: number
    createdAt: number
    active: number
    eventTriggers: number
    appId: number
    secret: number
    _all: number
  }


  export type WebhookAvgAggregateInputType = {
    userId?: true
    eventTypeId?: true
  }

  export type WebhookSumAggregateInputType = {
    userId?: true
    eventTypeId?: true
  }

  export type WebhookMinAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    subscriberUrl?: true
    payloadTemplate?: true
    createdAt?: true
    active?: true
    appId?: true
    secret?: true
  }

  export type WebhookMaxAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    subscriberUrl?: true
    payloadTemplate?: true
    createdAt?: true
    active?: true
    appId?: true
    secret?: true
  }

  export type WebhookCountAggregateInputType = {
    id?: true
    userId?: true
    eventTypeId?: true
    subscriberUrl?: true
    payloadTemplate?: true
    createdAt?: true
    active?: true
    eventTriggers?: true
    appId?: true
    secret?: true
    _all?: true
  }

  export type WebhookAggregateArgs = {
    /**
     * Filter which Webhook to aggregate.
     * 
    **/
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     * 
    **/
    orderBy?: Enumerable<WebhookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Webhooks
    **/
    _count?: true | WebhookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebhookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebhookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookMaxAggregateInputType
  }

  export type GetWebhookAggregateType<T extends WebhookAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhook[P]>
      : GetScalarType<T[P], AggregateWebhook[P]>
  }




  export type WebhookGroupByArgs = {
    where?: WebhookWhereInput
    orderBy?: Enumerable<WebhookOrderByWithAggregationInput>
    by: Array<WebhookScalarFieldEnum>
    having?: WebhookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookCountAggregateInputType | true
    _avg?: WebhookAvgAggregateInputType
    _sum?: WebhookSumAggregateInputType
    _min?: WebhookMinAggregateInputType
    _max?: WebhookMaxAggregateInputType
  }


  export type WebhookGroupByOutputType = {
    id: string
    userId: number | null
    eventTypeId: number | null
    subscriberUrl: string
    payloadTemplate: string | null
    createdAt: Date
    active: boolean
    eventTriggers: WebhookTriggerEvents[]
    appId: string | null
    secret: string | null
    _count: WebhookCountAggregateOutputType | null
    _avg: WebhookAvgAggregateOutputType | null
    _sum: WebhookSumAggregateOutputType | null
    _min: WebhookMinAggregateOutputType | null
    _max: WebhookMaxAggregateOutputType | null
  }

  type GetWebhookGroupByPayload<T extends WebhookGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WebhookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookGroupByOutputType[P]>
        }
      >
    >


  export type WebhookSelect = {
    id?: boolean
    userId?: boolean
    eventTypeId?: boolean
    subscriberUrl?: boolean
    payloadTemplate?: boolean
    createdAt?: boolean
    active?: boolean
    eventTriggers?: boolean
    user?: boolean | UserArgs
    eventType?: boolean | EventTypeArgs
    app?: boolean | AppArgs
    appId?: boolean
    secret?: boolean
  }

  export type WebhookInclude = {
    user?: boolean | UserArgs
    eventType?: boolean | EventTypeArgs
    app?: boolean | AppArgs
  }

  export type WebhookGetPayload<
    S extends boolean | null | undefined | WebhookArgs,
    U = keyof S
      > = S extends true
        ? Webhook
    : S extends undefined
    ? never
    : S extends WebhookArgs | WebhookFindManyArgs
    ?'include' extends U
    ? Webhook  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> | null :
        P extends 'app' ? AppGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> | null :
        P extends 'app' ? AppGetPayload<S['select'][P]> | null :  P extends keyof Webhook ? Webhook[P] : never
  } 
    : Webhook
  : Webhook


  type WebhookCountArgs = Merge<
    Omit<WebhookFindManyArgs, 'select' | 'include'> & {
      select?: WebhookCountAggregateInputType | true
    }
  >

  export interface WebhookDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Webhook that matches the filter.
     * @param {WebhookFindUniqueArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebhookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WebhookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Webhook'> extends True ? CheckSelect<T, Prisma__WebhookClient<Webhook>, Prisma__WebhookClient<WebhookGetPayload<T>>> : CheckSelect<T, Prisma__WebhookClient<Webhook | null >, Prisma__WebhookClient<WebhookGetPayload<T> | null >>

    /**
     * Find the first Webhook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindFirstArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebhookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WebhookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Webhook'> extends True ? CheckSelect<T, Prisma__WebhookClient<Webhook>, Prisma__WebhookClient<WebhookGetPayload<T>>> : CheckSelect<T, Prisma__WebhookClient<Webhook | null >, Prisma__WebhookClient<WebhookGetPayload<T> | null >>

    /**
     * Find zero or more Webhooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Webhooks
     * const webhooks = await prisma.webhook.findMany()
     * 
     * // Get first 10 Webhooks
     * const webhooks = await prisma.webhook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookWithIdOnly = await prisma.webhook.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebhookFindManyArgs>(
      args?: SelectSubset<T, WebhookFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Webhook>>, PrismaPromise<Array<WebhookGetPayload<T>>>>

    /**
     * Create a Webhook.
     * @param {WebhookCreateArgs} args - Arguments to create a Webhook.
     * @example
     * // Create one Webhook
     * const Webhook = await prisma.webhook.create({
     *   data: {
     *     // ... data to create a Webhook
     *   }
     * })
     * 
    **/
    create<T extends WebhookCreateArgs>(
      args: SelectSubset<T, WebhookCreateArgs>
    ): CheckSelect<T, Prisma__WebhookClient<Webhook>, Prisma__WebhookClient<WebhookGetPayload<T>>>

    /**
     * Create many Webhooks.
     *     @param {WebhookCreateManyArgs} args - Arguments to create many Webhooks.
     *     @example
     *     // Create many Webhooks
     *     const webhook = await prisma.webhook.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WebhookCreateManyArgs>(
      args?: SelectSubset<T, WebhookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Webhook.
     * @param {WebhookDeleteArgs} args - Arguments to delete one Webhook.
     * @example
     * // Delete one Webhook
     * const Webhook = await prisma.webhook.delete({
     *   where: {
     *     // ... filter to delete one Webhook
     *   }
     * })
     * 
    **/
    delete<T extends WebhookDeleteArgs>(
      args: SelectSubset<T, WebhookDeleteArgs>
    ): CheckSelect<T, Prisma__WebhookClient<Webhook>, Prisma__WebhookClient<WebhookGetPayload<T>>>

    /**
     * Update one Webhook.
     * @param {WebhookUpdateArgs} args - Arguments to update one Webhook.
     * @example
     * // Update one Webhook
     * const webhook = await prisma.webhook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebhookUpdateArgs>(
      args: SelectSubset<T, WebhookUpdateArgs>
    ): CheckSelect<T, Prisma__WebhookClient<Webhook>, Prisma__WebhookClient<WebhookGetPayload<T>>>

    /**
     * Delete zero or more Webhooks.
     * @param {WebhookDeleteManyArgs} args - Arguments to filter Webhooks to delete.
     * @example
     * // Delete a few Webhooks
     * const { count } = await prisma.webhook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebhookDeleteManyArgs>(
      args?: SelectSubset<T, WebhookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Webhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Webhooks
     * const webhook = await prisma.webhook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebhookUpdateManyArgs>(
      args: SelectSubset<T, WebhookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Webhook.
     * @param {WebhookUpsertArgs} args - Arguments to update or create a Webhook.
     * @example
     * // Update or create a Webhook
     * const webhook = await prisma.webhook.upsert({
     *   create: {
     *     // ... data to create a Webhook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Webhook we want to update
     *   }
     * })
    **/
    upsert<T extends WebhookUpsertArgs>(
      args: SelectSubset<T, WebhookUpsertArgs>
    ): CheckSelect<T, Prisma__WebhookClient<Webhook>, Prisma__WebhookClient<WebhookGetPayload<T>>>

    /**
     * Count the number of Webhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookCountArgs} args - Arguments to filter Webhooks to count.
     * @example
     * // Count the number of Webhooks
     * const count = await prisma.webhook.count({
     *   where: {
     *     // ... the filter for the Webhooks we want to count
     *   }
     * })
    **/
    count<T extends WebhookCountArgs>(
      args?: Subset<T, WebhookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Webhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookAggregateArgs>(args: Subset<T, WebhookAggregateArgs>): PrismaPromise<GetWebhookAggregateType<T>>

    /**
     * Group by Webhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookGroupByArgs['orderBy'] }
        : { orderBy?: WebhookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Webhook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WebhookClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    app<T extends AppArgs = {}>(args?: Subset<T, AppArgs>): CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Webhook findUnique
   */
  export type WebhookFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * Throw an Error if a Webhook can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Webhook to fetch.
     * 
    **/
    where: WebhookWhereUniqueInput
  }


  /**
   * Webhook findFirst
   */
  export type WebhookFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * Throw an Error if a Webhook can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Webhook to fetch.
     * 
    **/
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     * 
    **/
    orderBy?: Enumerable<WebhookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webhooks.
     * 
    **/
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webhooks.
     * 
    **/
    distinct?: Enumerable<WebhookScalarFieldEnum>
  }


  /**
   * Webhook findMany
   */
  export type WebhookFindManyArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * Filter, which Webhooks to fetch.
     * 
    **/
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     * 
    **/
    orderBy?: Enumerable<WebhookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Webhooks.
     * 
    **/
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WebhookScalarFieldEnum>
  }


  /**
   * Webhook create
   */
  export type WebhookCreateArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * The data needed to create a Webhook.
     * 
    **/
    data: XOR<WebhookCreateInput, WebhookUncheckedCreateInput>
  }


  /**
   * Webhook createMany
   */
  export type WebhookCreateManyArgs = {
    /**
     * The data used to create many Webhooks.
     * 
    **/
    data: Enumerable<WebhookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Webhook update
   */
  export type WebhookUpdateArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * The data needed to update a Webhook.
     * 
    **/
    data: XOR<WebhookUpdateInput, WebhookUncheckedUpdateInput>
    /**
     * Choose, which Webhook to update.
     * 
    **/
    where: WebhookWhereUniqueInput
  }


  /**
   * Webhook updateMany
   */
  export type WebhookUpdateManyArgs = {
    /**
     * The data used to update Webhooks.
     * 
    **/
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyInput>
    /**
     * Filter which Webhooks to update
     * 
    **/
    where?: WebhookWhereInput
  }


  /**
   * Webhook upsert
   */
  export type WebhookUpsertArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * The filter to search for the Webhook to update in case it exists.
     * 
    **/
    where: WebhookWhereUniqueInput
    /**
     * In case the Webhook found by the `where` argument doesn't exist, create a new Webhook with this data.
     * 
    **/
    create: XOR<WebhookCreateInput, WebhookUncheckedCreateInput>
    /**
     * In case the Webhook was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WebhookUpdateInput, WebhookUncheckedUpdateInput>
  }


  /**
   * Webhook delete
   */
  export type WebhookDeleteArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
    /**
     * Filter which Webhook to delete.
     * 
    **/
    where: WebhookWhereUniqueInput
  }


  /**
   * Webhook deleteMany
   */
  export type WebhookDeleteManyArgs = {
    /**
     * Filter which Webhooks to delete
     * 
    **/
    where?: WebhookWhereInput
  }


  /**
   * Webhook without action
   */
  export type WebhookArgs = {
    /**
     * Select specific fields to fetch from the Webhook
     * 
    **/
    select?: WebhookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WebhookInclude | null
  }



  /**
   * Model Impersonations
   */


  export type AggregateImpersonations = {
    _count: ImpersonationsCountAggregateOutputType | null
    _avg: ImpersonationsAvgAggregateOutputType | null
    _sum: ImpersonationsSumAggregateOutputType | null
    _min: ImpersonationsMinAggregateOutputType | null
    _max: ImpersonationsMaxAggregateOutputType | null
  }

  export type ImpersonationsAvgAggregateOutputType = {
    id: number | null
    impersonatedUserId: number | null
    impersonatedById: number | null
  }

  export type ImpersonationsSumAggregateOutputType = {
    id: number | null
    impersonatedUserId: number | null
    impersonatedById: number | null
  }

  export type ImpersonationsMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    impersonatedUserId: number | null
    impersonatedById: number | null
  }

  export type ImpersonationsMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    impersonatedUserId: number | null
    impersonatedById: number | null
  }

  export type ImpersonationsCountAggregateOutputType = {
    id: number
    createdAt: number
    impersonatedUserId: number
    impersonatedById: number
    _all: number
  }


  export type ImpersonationsAvgAggregateInputType = {
    id?: true
    impersonatedUserId?: true
    impersonatedById?: true
  }

  export type ImpersonationsSumAggregateInputType = {
    id?: true
    impersonatedUserId?: true
    impersonatedById?: true
  }

  export type ImpersonationsMinAggregateInputType = {
    id?: true
    createdAt?: true
    impersonatedUserId?: true
    impersonatedById?: true
  }

  export type ImpersonationsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    impersonatedUserId?: true
    impersonatedById?: true
  }

  export type ImpersonationsCountAggregateInputType = {
    id?: true
    createdAt?: true
    impersonatedUserId?: true
    impersonatedById?: true
    _all?: true
  }

  export type ImpersonationsAggregateArgs = {
    /**
     * Filter which Impersonations to aggregate.
     * 
    **/
    where?: ImpersonationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impersonations to fetch.
     * 
    **/
    orderBy?: Enumerable<ImpersonationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImpersonationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impersonations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impersonations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Impersonations
    **/
    _count?: true | ImpersonationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImpersonationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImpersonationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImpersonationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImpersonationsMaxAggregateInputType
  }

  export type GetImpersonationsAggregateType<T extends ImpersonationsAggregateArgs> = {
        [P in keyof T & keyof AggregateImpersonations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImpersonations[P]>
      : GetScalarType<T[P], AggregateImpersonations[P]>
  }




  export type ImpersonationsGroupByArgs = {
    where?: ImpersonationsWhereInput
    orderBy?: Enumerable<ImpersonationsOrderByWithAggregationInput>
    by: Array<ImpersonationsScalarFieldEnum>
    having?: ImpersonationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImpersonationsCountAggregateInputType | true
    _avg?: ImpersonationsAvgAggregateInputType
    _sum?: ImpersonationsSumAggregateInputType
    _min?: ImpersonationsMinAggregateInputType
    _max?: ImpersonationsMaxAggregateInputType
  }


  export type ImpersonationsGroupByOutputType = {
    id: number
    createdAt: Date
    impersonatedUserId: number
    impersonatedById: number
    _count: ImpersonationsCountAggregateOutputType | null
    _avg: ImpersonationsAvgAggregateOutputType | null
    _sum: ImpersonationsSumAggregateOutputType | null
    _min: ImpersonationsMinAggregateOutputType | null
    _max: ImpersonationsMaxAggregateOutputType | null
  }

  type GetImpersonationsGroupByPayload<T extends ImpersonationsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImpersonationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImpersonationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImpersonationsGroupByOutputType[P]>
            : GetScalarType<T[P], ImpersonationsGroupByOutputType[P]>
        }
      >
    >


  export type ImpersonationsSelect = {
    id?: boolean
    createdAt?: boolean
    impersonatedUser?: boolean | UserArgs
    impersonatedBy?: boolean | UserArgs
    impersonatedUserId?: boolean
    impersonatedById?: boolean
  }

  export type ImpersonationsInclude = {
    impersonatedUser?: boolean | UserArgs
    impersonatedBy?: boolean | UserArgs
  }

  export type ImpersonationsGetPayload<
    S extends boolean | null | undefined | ImpersonationsArgs,
    U = keyof S
      > = S extends true
        ? Impersonations
    : S extends undefined
    ? never
    : S extends ImpersonationsArgs | ImpersonationsFindManyArgs
    ?'include' extends U
    ? Impersonations  & {
    [P in TrueKeys<S['include']>]:
        P extends 'impersonatedUser' ? UserGetPayload<S['include'][P]> :
        P extends 'impersonatedBy' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'impersonatedUser' ? UserGetPayload<S['select'][P]> :
        P extends 'impersonatedBy' ? UserGetPayload<S['select'][P]> :  P extends keyof Impersonations ? Impersonations[P] : never
  } 
    : Impersonations
  : Impersonations


  type ImpersonationsCountArgs = Merge<
    Omit<ImpersonationsFindManyArgs, 'select' | 'include'> & {
      select?: ImpersonationsCountAggregateInputType | true
    }
  >

  export interface ImpersonationsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Impersonations that matches the filter.
     * @param {ImpersonationsFindUniqueArgs} args - Arguments to find a Impersonations
     * @example
     * // Get one Impersonations
     * const impersonations = await prisma.impersonations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImpersonationsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImpersonationsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Impersonations'> extends True ? CheckSelect<T, Prisma__ImpersonationsClient<Impersonations>, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T>>> : CheckSelect<T, Prisma__ImpersonationsClient<Impersonations | null >, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T> | null >>

    /**
     * Find the first Impersonations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpersonationsFindFirstArgs} args - Arguments to find a Impersonations
     * @example
     * // Get one Impersonations
     * const impersonations = await prisma.impersonations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImpersonationsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImpersonationsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Impersonations'> extends True ? CheckSelect<T, Prisma__ImpersonationsClient<Impersonations>, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T>>> : CheckSelect<T, Prisma__ImpersonationsClient<Impersonations | null >, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T> | null >>

    /**
     * Find zero or more Impersonations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpersonationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Impersonations
     * const impersonations = await prisma.impersonations.findMany()
     * 
     * // Get first 10 Impersonations
     * const impersonations = await prisma.impersonations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const impersonationsWithIdOnly = await prisma.impersonations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImpersonationsFindManyArgs>(
      args?: SelectSubset<T, ImpersonationsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Impersonations>>, PrismaPromise<Array<ImpersonationsGetPayload<T>>>>

    /**
     * Create a Impersonations.
     * @param {ImpersonationsCreateArgs} args - Arguments to create a Impersonations.
     * @example
     * // Create one Impersonations
     * const Impersonations = await prisma.impersonations.create({
     *   data: {
     *     // ... data to create a Impersonations
     *   }
     * })
     * 
    **/
    create<T extends ImpersonationsCreateArgs>(
      args: SelectSubset<T, ImpersonationsCreateArgs>
    ): CheckSelect<T, Prisma__ImpersonationsClient<Impersonations>, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T>>>

    /**
     * Create many Impersonations.
     *     @param {ImpersonationsCreateManyArgs} args - Arguments to create many Impersonations.
     *     @example
     *     // Create many Impersonations
     *     const impersonations = await prisma.impersonations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImpersonationsCreateManyArgs>(
      args?: SelectSubset<T, ImpersonationsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Impersonations.
     * @param {ImpersonationsDeleteArgs} args - Arguments to delete one Impersonations.
     * @example
     * // Delete one Impersonations
     * const Impersonations = await prisma.impersonations.delete({
     *   where: {
     *     // ... filter to delete one Impersonations
     *   }
     * })
     * 
    **/
    delete<T extends ImpersonationsDeleteArgs>(
      args: SelectSubset<T, ImpersonationsDeleteArgs>
    ): CheckSelect<T, Prisma__ImpersonationsClient<Impersonations>, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T>>>

    /**
     * Update one Impersonations.
     * @param {ImpersonationsUpdateArgs} args - Arguments to update one Impersonations.
     * @example
     * // Update one Impersonations
     * const impersonations = await prisma.impersonations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImpersonationsUpdateArgs>(
      args: SelectSubset<T, ImpersonationsUpdateArgs>
    ): CheckSelect<T, Prisma__ImpersonationsClient<Impersonations>, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T>>>

    /**
     * Delete zero or more Impersonations.
     * @param {ImpersonationsDeleteManyArgs} args - Arguments to filter Impersonations to delete.
     * @example
     * // Delete a few Impersonations
     * const { count } = await prisma.impersonations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImpersonationsDeleteManyArgs>(
      args?: SelectSubset<T, ImpersonationsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Impersonations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpersonationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Impersonations
     * const impersonations = await prisma.impersonations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImpersonationsUpdateManyArgs>(
      args: SelectSubset<T, ImpersonationsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Impersonations.
     * @param {ImpersonationsUpsertArgs} args - Arguments to update or create a Impersonations.
     * @example
     * // Update or create a Impersonations
     * const impersonations = await prisma.impersonations.upsert({
     *   create: {
     *     // ... data to create a Impersonations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Impersonations we want to update
     *   }
     * })
    **/
    upsert<T extends ImpersonationsUpsertArgs>(
      args: SelectSubset<T, ImpersonationsUpsertArgs>
    ): CheckSelect<T, Prisma__ImpersonationsClient<Impersonations>, Prisma__ImpersonationsClient<ImpersonationsGetPayload<T>>>

    /**
     * Count the number of Impersonations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpersonationsCountArgs} args - Arguments to filter Impersonations to count.
     * @example
     * // Count the number of Impersonations
     * const count = await prisma.impersonations.count({
     *   where: {
     *     // ... the filter for the Impersonations we want to count
     *   }
     * })
    **/
    count<T extends ImpersonationsCountArgs>(
      args?: Subset<T, ImpersonationsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImpersonationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Impersonations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpersonationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImpersonationsAggregateArgs>(args: Subset<T, ImpersonationsAggregateArgs>): PrismaPromise<GetImpersonationsAggregateType<T>>

    /**
     * Group by Impersonations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImpersonationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImpersonationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImpersonationsGroupByArgs['orderBy'] }
        : { orderBy?: ImpersonationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImpersonationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImpersonationsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Impersonations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImpersonationsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    impersonatedUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    impersonatedBy<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Impersonations findUnique
   */
  export type ImpersonationsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * Throw an Error if a Impersonations can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Impersonations to fetch.
     * 
    **/
    where: ImpersonationsWhereUniqueInput
  }


  /**
   * Impersonations findFirst
   */
  export type ImpersonationsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * Throw an Error if a Impersonations can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Impersonations to fetch.
     * 
    **/
    where?: ImpersonationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impersonations to fetch.
     * 
    **/
    orderBy?: Enumerable<ImpersonationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Impersonations.
     * 
    **/
    cursor?: ImpersonationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impersonations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impersonations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Impersonations.
     * 
    **/
    distinct?: Enumerable<ImpersonationsScalarFieldEnum>
  }


  /**
   * Impersonations findMany
   */
  export type ImpersonationsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * Filter, which Impersonations to fetch.
     * 
    **/
    where?: ImpersonationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Impersonations to fetch.
     * 
    **/
    orderBy?: Enumerable<ImpersonationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Impersonations.
     * 
    **/
    cursor?: ImpersonationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Impersonations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Impersonations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImpersonationsScalarFieldEnum>
  }


  /**
   * Impersonations create
   */
  export type ImpersonationsCreateArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * The data needed to create a Impersonations.
     * 
    **/
    data: XOR<ImpersonationsCreateInput, ImpersonationsUncheckedCreateInput>
  }


  /**
   * Impersonations createMany
   */
  export type ImpersonationsCreateManyArgs = {
    /**
     * The data used to create many Impersonations.
     * 
    **/
    data: Enumerable<ImpersonationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Impersonations update
   */
  export type ImpersonationsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * The data needed to update a Impersonations.
     * 
    **/
    data: XOR<ImpersonationsUpdateInput, ImpersonationsUncheckedUpdateInput>
    /**
     * Choose, which Impersonations to update.
     * 
    **/
    where: ImpersonationsWhereUniqueInput
  }


  /**
   * Impersonations updateMany
   */
  export type ImpersonationsUpdateManyArgs = {
    /**
     * The data used to update Impersonations.
     * 
    **/
    data: XOR<ImpersonationsUpdateManyMutationInput, ImpersonationsUncheckedUpdateManyInput>
    /**
     * Filter which Impersonations to update
     * 
    **/
    where?: ImpersonationsWhereInput
  }


  /**
   * Impersonations upsert
   */
  export type ImpersonationsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * The filter to search for the Impersonations to update in case it exists.
     * 
    **/
    where: ImpersonationsWhereUniqueInput
    /**
     * In case the Impersonations found by the `where` argument doesn't exist, create a new Impersonations with this data.
     * 
    **/
    create: XOR<ImpersonationsCreateInput, ImpersonationsUncheckedCreateInput>
    /**
     * In case the Impersonations was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImpersonationsUpdateInput, ImpersonationsUncheckedUpdateInput>
  }


  /**
   * Impersonations delete
   */
  export type ImpersonationsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
    /**
     * Filter which Impersonations to delete.
     * 
    **/
    where: ImpersonationsWhereUniqueInput
  }


  /**
   * Impersonations deleteMany
   */
  export type ImpersonationsDeleteManyArgs = {
    /**
     * Filter which Impersonations to delete
     * 
    **/
    where?: ImpersonationsWhereInput
  }


  /**
   * Impersonations without action
   */
  export type ImpersonationsArgs = {
    /**
     * Select specific fields to fetch from the Impersonations
     * 
    **/
    select?: ImpersonationsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImpersonationsInclude | null
  }



  /**
   * Model ApiKey
   */


  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyAvgAggregateOutputType = {
    userId: number | null
  }

  export type ApiKeySumAggregateOutputType = {
    userId: number | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: string | null
    userId: number | null
    note: string | null
    createdAt: Date | null
    expiresAt: Date | null
    lastUsedAt: Date | null
    hashedKey: string | null
    appId: string | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    note: string | null
    createdAt: Date | null
    expiresAt: Date | null
    lastUsedAt: Date | null
    hashedKey: string | null
    appId: string | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    userId: number
    note: number
    createdAt: number
    expiresAt: number
    lastUsedAt: number
    hashedKey: number
    appId: number
    _all: number
  }


  export type ApiKeyAvgAggregateInputType = {
    userId?: true
  }

  export type ApiKeySumAggregateInputType = {
    userId?: true
  }

  export type ApiKeyMinAggregateInputType = {
    id?: true
    userId?: true
    note?: true
    createdAt?: true
    expiresAt?: true
    lastUsedAt?: true
    hashedKey?: true
    appId?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    userId?: true
    note?: true
    createdAt?: true
    expiresAt?: true
    lastUsedAt?: true
    hashedKey?: true
    appId?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    userId?: true
    note?: true
    createdAt?: true
    expiresAt?: true
    lastUsedAt?: true
    hashedKey?: true
    appId?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs = {
    /**
     * Filter which ApiKey to aggregate.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs = {
    where?: ApiKeyWhereInput
    orderBy?: Enumerable<ApiKeyOrderByWithAggregationInput>
    by: Array<ApiKeyScalarFieldEnum>
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _avg?: ApiKeyAvgAggregateInputType
    _sum?: ApiKeySumAggregateInputType
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }


  export type ApiKeyGroupByOutputType = {
    id: string
    userId: number
    note: string | null
    createdAt: Date
    expiresAt: Date | null
    lastUsedAt: Date | null
    hashedKey: string
    appId: string | null
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect = {
    id?: boolean
    userId?: boolean
    note?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    lastUsedAt?: boolean
    hashedKey?: boolean
    user?: boolean | UserArgs
    app?: boolean | AppArgs
    appId?: boolean
  }

  export type ApiKeyInclude = {
    user?: boolean | UserArgs
    app?: boolean | AppArgs
  }

  export type ApiKeyGetPayload<
    S extends boolean | null | undefined | ApiKeyArgs,
    U = keyof S
      > = S extends true
        ? ApiKey
    : S extends undefined
    ? never
    : S extends ApiKeyArgs | ApiKeyFindManyArgs
    ?'include' extends U
    ? ApiKey  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'app' ? AppGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'app' ? AppGetPayload<S['select'][P]> | null :  P extends keyof ApiKey ? ApiKey[P] : never
  } 
    : ApiKey
  : ApiKey


  type ApiKeyCountArgs = Merge<
    Omit<ApiKeyFindManyArgs, 'select' | 'include'> & {
      select?: ApiKeyCountAggregateInputType | true
    }
  >

  export interface ApiKeyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApiKeyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApiKeyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ApiKey'> extends True ? CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>> : CheckSelect<T, Prisma__ApiKeyClient<ApiKey | null >, Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null >>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApiKeyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApiKeyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ApiKey'> extends True ? CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>> : CheckSelect<T, Prisma__ApiKeyClient<ApiKey | null >, Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null >>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApiKeyFindManyArgs>(
      args?: SelectSubset<T, ApiKeyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
    **/
    create<T extends ApiKeyCreateArgs>(
      args: SelectSubset<T, ApiKeyCreateArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Create many ApiKeys.
     *     @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     *     @example
     *     // Create many ApiKeys
     *     const apiKey = await prisma.apiKey.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApiKeyCreateManyArgs>(
      args?: SelectSubset<T, ApiKeyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
    **/
    delete<T extends ApiKeyDeleteArgs>(
      args: SelectSubset<T, ApiKeyDeleteArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApiKeyUpdateArgs>(
      args: SelectSubset<T, ApiKeyUpdateArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApiKeyDeleteManyArgs>(
      args?: SelectSubset<T, ApiKeyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApiKeyUpdateManyArgs>(
      args: SelectSubset<T, ApiKeyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
    **/
    upsert<T extends ApiKeyUpsertArgs>(
      args: SelectSubset<T, ApiKeyUpsertArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApiKeyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    app<T extends AppArgs = {}>(args?: Subset<T, AppArgs>): CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Throw an Error if a ApiKey can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ApiKey to fetch.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Throw an Error if a ApiKey can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ApiKey to fetch.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     * 
    **/
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKeys to fetch.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The data needed to create a ApiKey.
     * 
    **/
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }


  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs = {
    /**
     * The data used to create many ApiKeys.
     * 
    **/
    data: Enumerable<ApiKeyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The data needed to update a ApiKey.
     * 
    **/
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs = {
    /**
     * The data used to update ApiKeys.
     * 
    **/
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     * 
    **/
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     * 
    **/
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     * 
    **/
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }


  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Filter which ApiKey to delete.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs = {
    /**
     * Filter which ApiKeys to delete
     * 
    **/
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey without action
   */
  export type ApiKeyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
  }



  /**
   * Model HashedLink
   */


  export type AggregateHashedLink = {
    _count: HashedLinkCountAggregateOutputType | null
    _avg: HashedLinkAvgAggregateOutputType | null
    _sum: HashedLinkSumAggregateOutputType | null
    _min: HashedLinkMinAggregateOutputType | null
    _max: HashedLinkMaxAggregateOutputType | null
  }

  export type HashedLinkAvgAggregateOutputType = {
    id: number | null
    eventTypeId: number | null
  }

  export type HashedLinkSumAggregateOutputType = {
    id: number | null
    eventTypeId: number | null
  }

  export type HashedLinkMinAggregateOutputType = {
    id: number | null
    link: string | null
    eventTypeId: number | null
  }

  export type HashedLinkMaxAggregateOutputType = {
    id: number | null
    link: string | null
    eventTypeId: number | null
  }

  export type HashedLinkCountAggregateOutputType = {
    id: number
    link: number
    eventTypeId: number
    _all: number
  }


  export type HashedLinkAvgAggregateInputType = {
    id?: true
    eventTypeId?: true
  }

  export type HashedLinkSumAggregateInputType = {
    id?: true
    eventTypeId?: true
  }

  export type HashedLinkMinAggregateInputType = {
    id?: true
    link?: true
    eventTypeId?: true
  }

  export type HashedLinkMaxAggregateInputType = {
    id?: true
    link?: true
    eventTypeId?: true
  }

  export type HashedLinkCountAggregateInputType = {
    id?: true
    link?: true
    eventTypeId?: true
    _all?: true
  }

  export type HashedLinkAggregateArgs = {
    /**
     * Filter which HashedLink to aggregate.
     * 
    **/
    where?: HashedLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HashedLinks to fetch.
     * 
    **/
    orderBy?: Enumerable<HashedLinkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: HashedLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HashedLinks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HashedLinks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HashedLinks
    **/
    _count?: true | HashedLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HashedLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HashedLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HashedLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HashedLinkMaxAggregateInputType
  }

  export type GetHashedLinkAggregateType<T extends HashedLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateHashedLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHashedLink[P]>
      : GetScalarType<T[P], AggregateHashedLink[P]>
  }




  export type HashedLinkGroupByArgs = {
    where?: HashedLinkWhereInput
    orderBy?: Enumerable<HashedLinkOrderByWithAggregationInput>
    by: Array<HashedLinkScalarFieldEnum>
    having?: HashedLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HashedLinkCountAggregateInputType | true
    _avg?: HashedLinkAvgAggregateInputType
    _sum?: HashedLinkSumAggregateInputType
    _min?: HashedLinkMinAggregateInputType
    _max?: HashedLinkMaxAggregateInputType
  }


  export type HashedLinkGroupByOutputType = {
    id: number
    link: string
    eventTypeId: number
    _count: HashedLinkCountAggregateOutputType | null
    _avg: HashedLinkAvgAggregateOutputType | null
    _sum: HashedLinkSumAggregateOutputType | null
    _min: HashedLinkMinAggregateOutputType | null
    _max: HashedLinkMaxAggregateOutputType | null
  }

  type GetHashedLinkGroupByPayload<T extends HashedLinkGroupByArgs> = PrismaPromise<
    Array<
      PickArray<HashedLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HashedLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HashedLinkGroupByOutputType[P]>
            : GetScalarType<T[P], HashedLinkGroupByOutputType[P]>
        }
      >
    >


  export type HashedLinkSelect = {
    id?: boolean
    link?: boolean
    eventType?: boolean | EventTypeArgs
    eventTypeId?: boolean
  }

  export type HashedLinkInclude = {
    eventType?: boolean | EventTypeArgs
  }

  export type HashedLinkGetPayload<
    S extends boolean | null | undefined | HashedLinkArgs,
    U = keyof S
      > = S extends true
        ? HashedLink
    : S extends undefined
    ? never
    : S extends HashedLinkArgs | HashedLinkFindManyArgs
    ?'include' extends U
    ? HashedLink  & {
    [P in TrueKeys<S['include']>]:
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> :  P extends keyof HashedLink ? HashedLink[P] : never
  } 
    : HashedLink
  : HashedLink


  type HashedLinkCountArgs = Merge<
    Omit<HashedLinkFindManyArgs, 'select' | 'include'> & {
      select?: HashedLinkCountAggregateInputType | true
    }
  >

  export interface HashedLinkDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one HashedLink that matches the filter.
     * @param {HashedLinkFindUniqueArgs} args - Arguments to find a HashedLink
     * @example
     * // Get one HashedLink
     * const hashedLink = await prisma.hashedLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HashedLinkFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HashedLinkFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'HashedLink'> extends True ? CheckSelect<T, Prisma__HashedLinkClient<HashedLink>, Prisma__HashedLinkClient<HashedLinkGetPayload<T>>> : CheckSelect<T, Prisma__HashedLinkClient<HashedLink | null >, Prisma__HashedLinkClient<HashedLinkGetPayload<T> | null >>

    /**
     * Find the first HashedLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashedLinkFindFirstArgs} args - Arguments to find a HashedLink
     * @example
     * // Get one HashedLink
     * const hashedLink = await prisma.hashedLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HashedLinkFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HashedLinkFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'HashedLink'> extends True ? CheckSelect<T, Prisma__HashedLinkClient<HashedLink>, Prisma__HashedLinkClient<HashedLinkGetPayload<T>>> : CheckSelect<T, Prisma__HashedLinkClient<HashedLink | null >, Prisma__HashedLinkClient<HashedLinkGetPayload<T> | null >>

    /**
     * Find zero or more HashedLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashedLinkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HashedLinks
     * const hashedLinks = await prisma.hashedLink.findMany()
     * 
     * // Get first 10 HashedLinks
     * const hashedLinks = await prisma.hashedLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hashedLinkWithIdOnly = await prisma.hashedLink.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HashedLinkFindManyArgs>(
      args?: SelectSubset<T, HashedLinkFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<HashedLink>>, PrismaPromise<Array<HashedLinkGetPayload<T>>>>

    /**
     * Create a HashedLink.
     * @param {HashedLinkCreateArgs} args - Arguments to create a HashedLink.
     * @example
     * // Create one HashedLink
     * const HashedLink = await prisma.hashedLink.create({
     *   data: {
     *     // ... data to create a HashedLink
     *   }
     * })
     * 
    **/
    create<T extends HashedLinkCreateArgs>(
      args: SelectSubset<T, HashedLinkCreateArgs>
    ): CheckSelect<T, Prisma__HashedLinkClient<HashedLink>, Prisma__HashedLinkClient<HashedLinkGetPayload<T>>>

    /**
     * Create many HashedLinks.
     *     @param {HashedLinkCreateManyArgs} args - Arguments to create many HashedLinks.
     *     @example
     *     // Create many HashedLinks
     *     const hashedLink = await prisma.hashedLink.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HashedLinkCreateManyArgs>(
      args?: SelectSubset<T, HashedLinkCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a HashedLink.
     * @param {HashedLinkDeleteArgs} args - Arguments to delete one HashedLink.
     * @example
     * // Delete one HashedLink
     * const HashedLink = await prisma.hashedLink.delete({
     *   where: {
     *     // ... filter to delete one HashedLink
     *   }
     * })
     * 
    **/
    delete<T extends HashedLinkDeleteArgs>(
      args: SelectSubset<T, HashedLinkDeleteArgs>
    ): CheckSelect<T, Prisma__HashedLinkClient<HashedLink>, Prisma__HashedLinkClient<HashedLinkGetPayload<T>>>

    /**
     * Update one HashedLink.
     * @param {HashedLinkUpdateArgs} args - Arguments to update one HashedLink.
     * @example
     * // Update one HashedLink
     * const hashedLink = await prisma.hashedLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HashedLinkUpdateArgs>(
      args: SelectSubset<T, HashedLinkUpdateArgs>
    ): CheckSelect<T, Prisma__HashedLinkClient<HashedLink>, Prisma__HashedLinkClient<HashedLinkGetPayload<T>>>

    /**
     * Delete zero or more HashedLinks.
     * @param {HashedLinkDeleteManyArgs} args - Arguments to filter HashedLinks to delete.
     * @example
     * // Delete a few HashedLinks
     * const { count } = await prisma.hashedLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HashedLinkDeleteManyArgs>(
      args?: SelectSubset<T, HashedLinkDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more HashedLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashedLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HashedLinks
     * const hashedLink = await prisma.hashedLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HashedLinkUpdateManyArgs>(
      args: SelectSubset<T, HashedLinkUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one HashedLink.
     * @param {HashedLinkUpsertArgs} args - Arguments to update or create a HashedLink.
     * @example
     * // Update or create a HashedLink
     * const hashedLink = await prisma.hashedLink.upsert({
     *   create: {
     *     // ... data to create a HashedLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HashedLink we want to update
     *   }
     * })
    **/
    upsert<T extends HashedLinkUpsertArgs>(
      args: SelectSubset<T, HashedLinkUpsertArgs>
    ): CheckSelect<T, Prisma__HashedLinkClient<HashedLink>, Prisma__HashedLinkClient<HashedLinkGetPayload<T>>>

    /**
     * Count the number of HashedLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashedLinkCountArgs} args - Arguments to filter HashedLinks to count.
     * @example
     * // Count the number of HashedLinks
     * const count = await prisma.hashedLink.count({
     *   where: {
     *     // ... the filter for the HashedLinks we want to count
     *   }
     * })
    **/
    count<T extends HashedLinkCountArgs>(
      args?: Subset<T, HashedLinkCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HashedLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HashedLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashedLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HashedLinkAggregateArgs>(args: Subset<T, HashedLinkAggregateArgs>): PrismaPromise<GetHashedLinkAggregateType<T>>

    /**
     * Group by HashedLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashedLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HashedLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HashedLinkGroupByArgs['orderBy'] }
        : { orderBy?: HashedLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HashedLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHashedLinkGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for HashedLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HashedLinkClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * HashedLink findUnique
   */
  export type HashedLinkFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * Throw an Error if a HashedLink can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which HashedLink to fetch.
     * 
    **/
    where: HashedLinkWhereUniqueInput
  }


  /**
   * HashedLink findFirst
   */
  export type HashedLinkFindFirstArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * Throw an Error if a HashedLink can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which HashedLink to fetch.
     * 
    **/
    where?: HashedLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HashedLinks to fetch.
     * 
    **/
    orderBy?: Enumerable<HashedLinkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HashedLinks.
     * 
    **/
    cursor?: HashedLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HashedLinks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HashedLinks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HashedLinks.
     * 
    **/
    distinct?: Enumerable<HashedLinkScalarFieldEnum>
  }


  /**
   * HashedLink findMany
   */
  export type HashedLinkFindManyArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * Filter, which HashedLinks to fetch.
     * 
    **/
    where?: HashedLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HashedLinks to fetch.
     * 
    **/
    orderBy?: Enumerable<HashedLinkOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HashedLinks.
     * 
    **/
    cursor?: HashedLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HashedLinks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HashedLinks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<HashedLinkScalarFieldEnum>
  }


  /**
   * HashedLink create
   */
  export type HashedLinkCreateArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * The data needed to create a HashedLink.
     * 
    **/
    data: XOR<HashedLinkCreateInput, HashedLinkUncheckedCreateInput>
  }


  /**
   * HashedLink createMany
   */
  export type HashedLinkCreateManyArgs = {
    /**
     * The data used to create many HashedLinks.
     * 
    **/
    data: Enumerable<HashedLinkCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * HashedLink update
   */
  export type HashedLinkUpdateArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * The data needed to update a HashedLink.
     * 
    **/
    data: XOR<HashedLinkUpdateInput, HashedLinkUncheckedUpdateInput>
    /**
     * Choose, which HashedLink to update.
     * 
    **/
    where: HashedLinkWhereUniqueInput
  }


  /**
   * HashedLink updateMany
   */
  export type HashedLinkUpdateManyArgs = {
    /**
     * The data used to update HashedLinks.
     * 
    **/
    data: XOR<HashedLinkUpdateManyMutationInput, HashedLinkUncheckedUpdateManyInput>
    /**
     * Filter which HashedLinks to update
     * 
    **/
    where?: HashedLinkWhereInput
  }


  /**
   * HashedLink upsert
   */
  export type HashedLinkUpsertArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * The filter to search for the HashedLink to update in case it exists.
     * 
    **/
    where: HashedLinkWhereUniqueInput
    /**
     * In case the HashedLink found by the `where` argument doesn't exist, create a new HashedLink with this data.
     * 
    **/
    create: XOR<HashedLinkCreateInput, HashedLinkUncheckedCreateInput>
    /**
     * In case the HashedLink was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<HashedLinkUpdateInput, HashedLinkUncheckedUpdateInput>
  }


  /**
   * HashedLink delete
   */
  export type HashedLinkDeleteArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
    /**
     * Filter which HashedLink to delete.
     * 
    **/
    where: HashedLinkWhereUniqueInput
  }


  /**
   * HashedLink deleteMany
   */
  export type HashedLinkDeleteManyArgs = {
    /**
     * Filter which HashedLinks to delete
     * 
    **/
    where?: HashedLinkWhereInput
  }


  /**
   * HashedLink without action
   */
  export type HashedLinkArgs = {
    /**
     * Select specific fields to fetch from the HashedLink
     * 
    **/
    select?: HashedLinkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: HashedLinkInclude | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs = {
    /**
     * Filter which Account to aggregate.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: Array<AccountScalarFieldEnum>
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserArgs
  }

  export type AccountInclude = {
    user?: boolean | UserArgs
  }

  export type AccountGetPayload<
    S extends boolean | null | undefined | AccountArgs,
    U = keyof S
      > = S extends true
        ? Account
    : S extends undefined
    ? never
    : S extends AccountArgs | AccountFindManyArgs
    ?'include' extends U
    ? Account  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Account ? Account[P] : never
  } 
    : Account
  : Account


  type AccountCountArgs = Merge<
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }
  >

  export interface AccountDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>> : CheckSelect<T, Prisma__AccountClient<Account | null >, Prisma__AccountClient<AccountGetPayload<T> | null >>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs>(
      args?: SelectSubset<T, AccountFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Account>>, PrismaPromise<Array<AccountGetPayload<T>>>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: SelectSubset<T, AccountCreateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs>(
      args?: SelectSubset<T, AccountCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: SelectSubset<T, AccountDeleteArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: SelectSubset<T, AccountUpdateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: SelectSubset<T, AccountDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: SelectSubset<T, AccountUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: SelectSubset<T, AccountUpsertArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Throw an Error if a Account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Throw an Error if a Account can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Account to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     * 
    **/
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
     * 
    **/
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     * 
    **/
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     * 
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
     * 
    **/
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs = {
    /**
     * The data used to create many Accounts.
     * 
    **/
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
     * 
    **/
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    /**
     * The data used to update Accounts.
     * 
    **/
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
     * 
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     * 
    **/
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
     * 
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    /**
     * Filter which Accounts to delete
     * 
    **/
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
     * 
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccountInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: number
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs
  }

  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model App
   */


  export type AggregateApp = {
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  export type AppMinAggregateOutputType = {
    slug: string | null
    dirName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppMaxAggregateOutputType = {
    slug: string | null
    dirName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppCountAggregateOutputType = {
    slug: number
    dirName: number
    keys: number
    categories: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppMinAggregateInputType = {
    slug?: true
    dirName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppMaxAggregateInputType = {
    slug?: true
    dirName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppCountAggregateInputType = {
    slug?: true
    dirName?: true
    keys?: true
    categories?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppAggregateArgs = {
    /**
     * Filter which App to aggregate.
     * 
    **/
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     * 
    **/
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apps
    **/
    _count?: true | AppCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppMaxAggregateInputType
  }

  export type GetAppAggregateType<T extends AppAggregateArgs> = {
        [P in keyof T & keyof AggregateApp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp[P]>
      : GetScalarType<T[P], AggregateApp[P]>
  }




  export type AppGroupByArgs = {
    where?: AppWhereInput
    orderBy?: Enumerable<AppOrderByWithAggregationInput>
    by: Array<AppScalarFieldEnum>
    having?: AppScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppCountAggregateInputType | true
    _min?: AppMinAggregateInputType
    _max?: AppMaxAggregateInputType
  }


  export type AppGroupByOutputType = {
    slug: string
    dirName: string
    keys: JsonValue | null
    categories: AppCategories[]
    createdAt: Date
    updatedAt: Date
    _count: AppCountAggregateOutputType | null
    _min: AppMinAggregateOutputType | null
    _max: AppMaxAggregateOutputType | null
  }

  type GetAppGroupByPayload<T extends AppGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AppGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppGroupByOutputType[P]>
            : GetScalarType<T[P], AppGroupByOutputType[P]>
        }
      >
    >


  export type AppSelect = {
    slug?: boolean
    dirName?: boolean
    keys?: boolean
    categories?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    credentials?: boolean | CredentialFindManyArgs
    Webhook?: boolean | WebhookFindManyArgs
    ApiKey?: boolean | ApiKeyFindManyArgs
    _count?: boolean | AppCountOutputTypeArgs
  }

  export type AppInclude = {
    credentials?: boolean | CredentialFindManyArgs
    Webhook?: boolean | WebhookFindManyArgs
    ApiKey?: boolean | ApiKeyFindManyArgs
    _count?: boolean | AppCountOutputTypeArgs
  }

  export type AppGetPayload<
    S extends boolean | null | undefined | AppArgs,
    U = keyof S
      > = S extends true
        ? App
    : S extends undefined
    ? never
    : S extends AppArgs | AppFindManyArgs
    ?'include' extends U
    ? App  & {
    [P in TrueKeys<S['include']>]:
        P extends 'credentials' ? Array < CredentialGetPayload<S['include'][P]>>  :
        P extends 'Webhook' ? Array < WebhookGetPayload<S['include'][P]>>  :
        P extends 'ApiKey' ? Array < ApiKeyGetPayload<S['include'][P]>>  :
        P extends '_count' ? AppCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'credentials' ? Array < CredentialGetPayload<S['select'][P]>>  :
        P extends 'Webhook' ? Array < WebhookGetPayload<S['select'][P]>>  :
        P extends 'ApiKey' ? Array < ApiKeyGetPayload<S['select'][P]>>  :
        P extends '_count' ? AppCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof App ? App[P] : never
  } 
    : App
  : App


  type AppCountArgs = Merge<
    Omit<AppFindManyArgs, 'select' | 'include'> & {
      select?: AppCountAggregateInputType | true
    }
  >

  export interface AppDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one App that matches the filter.
     * @param {AppFindUniqueArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'App'> extends True ? CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>> : CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>

    /**
     * Find the first App that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindFirstArgs} args - Arguments to find a App
     * @example
     * // Get one App
     * const app = await prisma.app.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'App'> extends True ? CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>> : CheckSelect<T, Prisma__AppClient<App | null >, Prisma__AppClient<AppGetPayload<T> | null >>

    /**
     * Find zero or more Apps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apps
     * const apps = await prisma.app.findMany()
     * 
     * // Get first 10 Apps
     * const apps = await prisma.app.findMany({ take: 10 })
     * 
     * // Only select the `slug`
     * const appWithSlugOnly = await prisma.app.findMany({ select: { slug: true } })
     * 
    **/
    findMany<T extends AppFindManyArgs>(
      args?: SelectSubset<T, AppFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<App>>, PrismaPromise<Array<AppGetPayload<T>>>>

    /**
     * Create a App.
     * @param {AppCreateArgs} args - Arguments to create a App.
     * @example
     * // Create one App
     * const App = await prisma.app.create({
     *   data: {
     *     // ... data to create a App
     *   }
     * })
     * 
    **/
    create<T extends AppCreateArgs>(
      args: SelectSubset<T, AppCreateArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Create many Apps.
     *     @param {AppCreateManyArgs} args - Arguments to create many Apps.
     *     @example
     *     // Create many Apps
     *     const app = await prisma.app.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppCreateManyArgs>(
      args?: SelectSubset<T, AppCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a App.
     * @param {AppDeleteArgs} args - Arguments to delete one App.
     * @example
     * // Delete one App
     * const App = await prisma.app.delete({
     *   where: {
     *     // ... filter to delete one App
     *   }
     * })
     * 
    **/
    delete<T extends AppDeleteArgs>(
      args: SelectSubset<T, AppDeleteArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Update one App.
     * @param {AppUpdateArgs} args - Arguments to update one App.
     * @example
     * // Update one App
     * const app = await prisma.app.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppUpdateArgs>(
      args: SelectSubset<T, AppUpdateArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Delete zero or more Apps.
     * @param {AppDeleteManyArgs} args - Arguments to filter Apps to delete.
     * @example
     * // Delete a few Apps
     * const { count } = await prisma.app.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppDeleteManyArgs>(
      args?: SelectSubset<T, AppDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apps
     * const app = await prisma.app.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppUpdateManyArgs>(
      args: SelectSubset<T, AppUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one App.
     * @param {AppUpsertArgs} args - Arguments to update or create a App.
     * @example
     * // Update or create a App
     * const app = await prisma.app.upsert({
     *   create: {
     *     // ... data to create a App
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App we want to update
     *   }
     * })
    **/
    upsert<T extends AppUpsertArgs>(
      args: SelectSubset<T, AppUpsertArgs>
    ): CheckSelect<T, Prisma__AppClient<App>, Prisma__AppClient<AppGetPayload<T>>>

    /**
     * Count the number of Apps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppCountArgs} args - Arguments to filter Apps to count.
     * @example
     * // Count the number of Apps
     * const count = await prisma.app.count({
     *   where: {
     *     // ... the filter for the Apps we want to count
     *   }
     * })
    **/
    count<T extends AppCountArgs>(
      args?: Subset<T, AppCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppAggregateArgs>(args: Subset<T, AppAggregateArgs>): PrismaPromise<GetAppAggregateType<T>>

    /**
     * Group by App.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppGroupByArgs['orderBy'] }
        : { orderBy?: AppGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for App.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    credentials<T extends CredentialFindManyArgs = {}>(args?: Subset<T, CredentialFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Credential>>, PrismaPromise<Array<CredentialGetPayload<T>>>>;

    Webhook<T extends WebhookFindManyArgs = {}>(args?: Subset<T, WebhookFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Webhook>>, PrismaPromise<Array<WebhookGetPayload<T>>>>;

    ApiKey<T extends ApiKeyFindManyArgs = {}>(args?: Subset<T, ApiKeyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * App findUnique
   */
  export type AppFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Throw an Error if a App can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which App to fetch.
     * 
    **/
    where: AppWhereUniqueInput
  }


  /**
   * App findFirst
   */
  export type AppFindFirstArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Throw an Error if a App can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which App to fetch.
     * 
    **/
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     * 
    **/
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apps.
     * 
    **/
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apps.
     * 
    **/
    distinct?: Enumerable<AppScalarFieldEnum>
  }


  /**
   * App findMany
   */
  export type AppFindManyArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Filter, which Apps to fetch.
     * 
    **/
    where?: AppWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apps to fetch.
     * 
    **/
    orderBy?: Enumerable<AppOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apps.
     * 
    **/
    cursor?: AppWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apps.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppScalarFieldEnum>
  }


  /**
   * App create
   */
  export type AppCreateArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * The data needed to create a App.
     * 
    **/
    data: XOR<AppCreateInput, AppUncheckedCreateInput>
  }


  /**
   * App createMany
   */
  export type AppCreateManyArgs = {
    /**
     * The data used to create many Apps.
     * 
    **/
    data: Enumerable<AppCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * App update
   */
  export type AppUpdateArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * The data needed to update a App.
     * 
    **/
    data: XOR<AppUpdateInput, AppUncheckedUpdateInput>
    /**
     * Choose, which App to update.
     * 
    **/
    where: AppWhereUniqueInput
  }


  /**
   * App updateMany
   */
  export type AppUpdateManyArgs = {
    /**
     * The data used to update Apps.
     * 
    **/
    data: XOR<AppUpdateManyMutationInput, AppUncheckedUpdateManyInput>
    /**
     * Filter which Apps to update
     * 
    **/
    where?: AppWhereInput
  }


  /**
   * App upsert
   */
  export type AppUpsertArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * The filter to search for the App to update in case it exists.
     * 
    **/
    where: AppWhereUniqueInput
    /**
     * In case the App found by the `where` argument doesn't exist, create a new App with this data.
     * 
    **/
    create: XOR<AppCreateInput, AppUncheckedCreateInput>
    /**
     * In case the App was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppUpdateInput, AppUncheckedUpdateInput>
  }


  /**
   * App delete
   */
  export type AppDeleteArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
    /**
     * Filter which App to delete.
     * 
    **/
    where: AppWhereUniqueInput
  }


  /**
   * App deleteMany
   */
  export type AppDeleteManyArgs = {
    /**
     * Filter which Apps to delete
     * 
    **/
    where?: AppWhereInput
  }


  /**
   * App without action
   */
  export type AppArgs = {
    /**
     * Select specific fields to fetch from the App
     * 
    **/
    select?: AppSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppInclude | null
  }



  /**
   * Model App_RoutingForms_Form
   */


  export type AggregateApp_RoutingForms_Form = {
    _count: App_RoutingForms_FormCountAggregateOutputType | null
    _avg: App_RoutingForms_FormAvgAggregateOutputType | null
    _sum: App_RoutingForms_FormSumAggregateOutputType | null
    _min: App_RoutingForms_FormMinAggregateOutputType | null
    _max: App_RoutingForms_FormMaxAggregateOutputType | null
  }

  export type App_RoutingForms_FormAvgAggregateOutputType = {
    userId: number | null
  }

  export type App_RoutingForms_FormSumAggregateOutputType = {
    userId: number | null
  }

  export type App_RoutingForms_FormMinAggregateOutputType = {
    id: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    userId: number | null
    disabled: boolean | null
  }

  export type App_RoutingForms_FormMaxAggregateOutputType = {
    id: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    userId: number | null
    disabled: boolean | null
  }

  export type App_RoutingForms_FormCountAggregateOutputType = {
    id: number
    description: number
    routes: number
    createdAt: number
    updatedAt: number
    name: number
    fields: number
    userId: number
    disabled: number
    _all: number
  }


  export type App_RoutingForms_FormAvgAggregateInputType = {
    userId?: true
  }

  export type App_RoutingForms_FormSumAggregateInputType = {
    userId?: true
  }

  export type App_RoutingForms_FormMinAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    userId?: true
    disabled?: true
  }

  export type App_RoutingForms_FormMaxAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    userId?: true
    disabled?: true
  }

  export type App_RoutingForms_FormCountAggregateInputType = {
    id?: true
    description?: true
    routes?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    fields?: true
    userId?: true
    disabled?: true
    _all?: true
  }

  export type App_RoutingForms_FormAggregateArgs = {
    /**
     * Filter which App_RoutingForms_Form to aggregate.
     * 
    **/
    where?: App_RoutingForms_FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App_RoutingForms_Forms to fetch.
     * 
    **/
    orderBy?: Enumerable<App_RoutingForms_FormOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: App_RoutingForms_FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App_RoutingForms_Forms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App_RoutingForms_Forms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned App_RoutingForms_Forms
    **/
    _count?: true | App_RoutingForms_FormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: App_RoutingForms_FormAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: App_RoutingForms_FormSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: App_RoutingForms_FormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: App_RoutingForms_FormMaxAggregateInputType
  }

  export type GetApp_RoutingForms_FormAggregateType<T extends App_RoutingForms_FormAggregateArgs> = {
        [P in keyof T & keyof AggregateApp_RoutingForms_Form]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp_RoutingForms_Form[P]>
      : GetScalarType<T[P], AggregateApp_RoutingForms_Form[P]>
  }




  export type App_RoutingForms_FormGroupByArgs = {
    where?: App_RoutingForms_FormWhereInput
    orderBy?: Enumerable<App_RoutingForms_FormOrderByWithAggregationInput>
    by: Array<App_RoutingForms_FormScalarFieldEnum>
    having?: App_RoutingForms_FormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: App_RoutingForms_FormCountAggregateInputType | true
    _avg?: App_RoutingForms_FormAvgAggregateInputType
    _sum?: App_RoutingForms_FormSumAggregateInputType
    _min?: App_RoutingForms_FormMinAggregateInputType
    _max?: App_RoutingForms_FormMaxAggregateInputType
  }


  export type App_RoutingForms_FormGroupByOutputType = {
    id: string
    description: string | null
    routes: JsonValue | null
    createdAt: Date
    updatedAt: Date
    name: string
    fields: JsonValue | null
    userId: number
    disabled: boolean
    _count: App_RoutingForms_FormCountAggregateOutputType | null
    _avg: App_RoutingForms_FormAvgAggregateOutputType | null
    _sum: App_RoutingForms_FormSumAggregateOutputType | null
    _min: App_RoutingForms_FormMinAggregateOutputType | null
    _max: App_RoutingForms_FormMaxAggregateOutputType | null
  }

  type GetApp_RoutingForms_FormGroupByPayload<T extends App_RoutingForms_FormGroupByArgs> = PrismaPromise<
    Array<
      PickArray<App_RoutingForms_FormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof App_RoutingForms_FormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], App_RoutingForms_FormGroupByOutputType[P]>
            : GetScalarType<T[P], App_RoutingForms_FormGroupByOutputType[P]>
        }
      >
    >


  export type App_RoutingForms_FormSelect = {
    id?: boolean
    description?: boolean
    routes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    fields?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    responses?: boolean | App_RoutingForms_FormResponseFindManyArgs
    disabled?: boolean
    _count?: boolean | App_RoutingForms_FormCountOutputTypeArgs
  }

  export type App_RoutingForms_FormInclude = {
    user?: boolean | UserArgs
    responses?: boolean | App_RoutingForms_FormResponseFindManyArgs
    _count?: boolean | App_RoutingForms_FormCountOutputTypeArgs
  }

  export type App_RoutingForms_FormGetPayload<
    S extends boolean | null | undefined | App_RoutingForms_FormArgs,
    U = keyof S
      > = S extends true
        ? App_RoutingForms_Form
    : S extends undefined
    ? never
    : S extends App_RoutingForms_FormArgs | App_RoutingForms_FormFindManyArgs
    ?'include' extends U
    ? App_RoutingForms_Form  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'responses' ? Array < App_RoutingForms_FormResponseGetPayload<S['include'][P]>>  :
        P extends '_count' ? App_RoutingForms_FormCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'responses' ? Array < App_RoutingForms_FormResponseGetPayload<S['select'][P]>>  :
        P extends '_count' ? App_RoutingForms_FormCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof App_RoutingForms_Form ? App_RoutingForms_Form[P] : never
  } 
    : App_RoutingForms_Form
  : App_RoutingForms_Form


  type App_RoutingForms_FormCountArgs = Merge<
    Omit<App_RoutingForms_FormFindManyArgs, 'select' | 'include'> & {
      select?: App_RoutingForms_FormCountAggregateInputType | true
    }
  >

  export interface App_RoutingForms_FormDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one App_RoutingForms_Form that matches the filter.
     * @param {App_RoutingForms_FormFindUniqueArgs} args - Arguments to find a App_RoutingForms_Form
     * @example
     * // Get one App_RoutingForms_Form
     * const app_RoutingForms_Form = await prisma.app_RoutingForms_Form.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends App_RoutingForms_FormFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, App_RoutingForms_FormFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'App_RoutingForms_Form'> extends True ? CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form>, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T>>> : CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form | null >, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T> | null >>

    /**
     * Find the first App_RoutingForms_Form that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormFindFirstArgs} args - Arguments to find a App_RoutingForms_Form
     * @example
     * // Get one App_RoutingForms_Form
     * const app_RoutingForms_Form = await prisma.app_RoutingForms_Form.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends App_RoutingForms_FormFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, App_RoutingForms_FormFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'App_RoutingForms_Form'> extends True ? CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form>, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T>>> : CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form | null >, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T> | null >>

    /**
     * Find zero or more App_RoutingForms_Forms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all App_RoutingForms_Forms
     * const app_RoutingForms_Forms = await prisma.app_RoutingForms_Form.findMany()
     * 
     * // Get first 10 App_RoutingForms_Forms
     * const app_RoutingForms_Forms = await prisma.app_RoutingForms_Form.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const app_RoutingForms_FormWithIdOnly = await prisma.app_RoutingForms_Form.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends App_RoutingForms_FormFindManyArgs>(
      args?: SelectSubset<T, App_RoutingForms_FormFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<App_RoutingForms_Form>>, PrismaPromise<Array<App_RoutingForms_FormGetPayload<T>>>>

    /**
     * Create a App_RoutingForms_Form.
     * @param {App_RoutingForms_FormCreateArgs} args - Arguments to create a App_RoutingForms_Form.
     * @example
     * // Create one App_RoutingForms_Form
     * const App_RoutingForms_Form = await prisma.app_RoutingForms_Form.create({
     *   data: {
     *     // ... data to create a App_RoutingForms_Form
     *   }
     * })
     * 
    **/
    create<T extends App_RoutingForms_FormCreateArgs>(
      args: SelectSubset<T, App_RoutingForms_FormCreateArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form>, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T>>>

    /**
     * Create many App_RoutingForms_Forms.
     *     @param {App_RoutingForms_FormCreateManyArgs} args - Arguments to create many App_RoutingForms_Forms.
     *     @example
     *     // Create many App_RoutingForms_Forms
     *     const app_RoutingForms_Form = await prisma.app_RoutingForms_Form.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends App_RoutingForms_FormCreateManyArgs>(
      args?: SelectSubset<T, App_RoutingForms_FormCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a App_RoutingForms_Form.
     * @param {App_RoutingForms_FormDeleteArgs} args - Arguments to delete one App_RoutingForms_Form.
     * @example
     * // Delete one App_RoutingForms_Form
     * const App_RoutingForms_Form = await prisma.app_RoutingForms_Form.delete({
     *   where: {
     *     // ... filter to delete one App_RoutingForms_Form
     *   }
     * })
     * 
    **/
    delete<T extends App_RoutingForms_FormDeleteArgs>(
      args: SelectSubset<T, App_RoutingForms_FormDeleteArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form>, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T>>>

    /**
     * Update one App_RoutingForms_Form.
     * @param {App_RoutingForms_FormUpdateArgs} args - Arguments to update one App_RoutingForms_Form.
     * @example
     * // Update one App_RoutingForms_Form
     * const app_RoutingForms_Form = await prisma.app_RoutingForms_Form.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends App_RoutingForms_FormUpdateArgs>(
      args: SelectSubset<T, App_RoutingForms_FormUpdateArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form>, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T>>>

    /**
     * Delete zero or more App_RoutingForms_Forms.
     * @param {App_RoutingForms_FormDeleteManyArgs} args - Arguments to filter App_RoutingForms_Forms to delete.
     * @example
     * // Delete a few App_RoutingForms_Forms
     * const { count } = await prisma.app_RoutingForms_Form.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends App_RoutingForms_FormDeleteManyArgs>(
      args?: SelectSubset<T, App_RoutingForms_FormDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more App_RoutingForms_Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many App_RoutingForms_Forms
     * const app_RoutingForms_Form = await prisma.app_RoutingForms_Form.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends App_RoutingForms_FormUpdateManyArgs>(
      args: SelectSubset<T, App_RoutingForms_FormUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one App_RoutingForms_Form.
     * @param {App_RoutingForms_FormUpsertArgs} args - Arguments to update or create a App_RoutingForms_Form.
     * @example
     * // Update or create a App_RoutingForms_Form
     * const app_RoutingForms_Form = await prisma.app_RoutingForms_Form.upsert({
     *   create: {
     *     // ... data to create a App_RoutingForms_Form
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App_RoutingForms_Form we want to update
     *   }
     * })
    **/
    upsert<T extends App_RoutingForms_FormUpsertArgs>(
      args: SelectSubset<T, App_RoutingForms_FormUpsertArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form>, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T>>>

    /**
     * Count the number of App_RoutingForms_Forms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormCountArgs} args - Arguments to filter App_RoutingForms_Forms to count.
     * @example
     * // Count the number of App_RoutingForms_Forms
     * const count = await prisma.app_RoutingForms_Form.count({
     *   where: {
     *     // ... the filter for the App_RoutingForms_Forms we want to count
     *   }
     * })
    **/
    count<T extends App_RoutingForms_FormCountArgs>(
      args?: Subset<T, App_RoutingForms_FormCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], App_RoutingForms_FormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App_RoutingForms_Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends App_RoutingForms_FormAggregateArgs>(args: Subset<T, App_RoutingForms_FormAggregateArgs>): PrismaPromise<GetApp_RoutingForms_FormAggregateType<T>>

    /**
     * Group by App_RoutingForms_Form.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends App_RoutingForms_FormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: App_RoutingForms_FormGroupByArgs['orderBy'] }
        : { orderBy?: App_RoutingForms_FormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, App_RoutingForms_FormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApp_RoutingForms_FormGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for App_RoutingForms_Form.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__App_RoutingForms_FormClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    responses<T extends App_RoutingForms_FormResponseFindManyArgs = {}>(args?: Subset<T, App_RoutingForms_FormResponseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<App_RoutingForms_FormResponse>>, PrismaPromise<Array<App_RoutingForms_FormResponseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * App_RoutingForms_Form findUnique
   */
  export type App_RoutingForms_FormFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * Throw an Error if a App_RoutingForms_Form can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which App_RoutingForms_Form to fetch.
     * 
    **/
    where: App_RoutingForms_FormWhereUniqueInput
  }


  /**
   * App_RoutingForms_Form findFirst
   */
  export type App_RoutingForms_FormFindFirstArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * Throw an Error if a App_RoutingForms_Form can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which App_RoutingForms_Form to fetch.
     * 
    **/
    where?: App_RoutingForms_FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App_RoutingForms_Forms to fetch.
     * 
    **/
    orderBy?: Enumerable<App_RoutingForms_FormOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for App_RoutingForms_Forms.
     * 
    **/
    cursor?: App_RoutingForms_FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App_RoutingForms_Forms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App_RoutingForms_Forms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of App_RoutingForms_Forms.
     * 
    **/
    distinct?: Enumerable<App_RoutingForms_FormScalarFieldEnum>
  }


  /**
   * App_RoutingForms_Form findMany
   */
  export type App_RoutingForms_FormFindManyArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * Filter, which App_RoutingForms_Forms to fetch.
     * 
    **/
    where?: App_RoutingForms_FormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App_RoutingForms_Forms to fetch.
     * 
    **/
    orderBy?: Enumerable<App_RoutingForms_FormOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing App_RoutingForms_Forms.
     * 
    **/
    cursor?: App_RoutingForms_FormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App_RoutingForms_Forms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App_RoutingForms_Forms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<App_RoutingForms_FormScalarFieldEnum>
  }


  /**
   * App_RoutingForms_Form create
   */
  export type App_RoutingForms_FormCreateArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * The data needed to create a App_RoutingForms_Form.
     * 
    **/
    data: XOR<App_RoutingForms_FormCreateInput, App_RoutingForms_FormUncheckedCreateInput>
  }


  /**
   * App_RoutingForms_Form createMany
   */
  export type App_RoutingForms_FormCreateManyArgs = {
    /**
     * The data used to create many App_RoutingForms_Forms.
     * 
    **/
    data: Enumerable<App_RoutingForms_FormCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * App_RoutingForms_Form update
   */
  export type App_RoutingForms_FormUpdateArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * The data needed to update a App_RoutingForms_Form.
     * 
    **/
    data: XOR<App_RoutingForms_FormUpdateInput, App_RoutingForms_FormUncheckedUpdateInput>
    /**
     * Choose, which App_RoutingForms_Form to update.
     * 
    **/
    where: App_RoutingForms_FormWhereUniqueInput
  }


  /**
   * App_RoutingForms_Form updateMany
   */
  export type App_RoutingForms_FormUpdateManyArgs = {
    /**
     * The data used to update App_RoutingForms_Forms.
     * 
    **/
    data: XOR<App_RoutingForms_FormUpdateManyMutationInput, App_RoutingForms_FormUncheckedUpdateManyInput>
    /**
     * Filter which App_RoutingForms_Forms to update
     * 
    **/
    where?: App_RoutingForms_FormWhereInput
  }


  /**
   * App_RoutingForms_Form upsert
   */
  export type App_RoutingForms_FormUpsertArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * The filter to search for the App_RoutingForms_Form to update in case it exists.
     * 
    **/
    where: App_RoutingForms_FormWhereUniqueInput
    /**
     * In case the App_RoutingForms_Form found by the `where` argument doesn't exist, create a new App_RoutingForms_Form with this data.
     * 
    **/
    create: XOR<App_RoutingForms_FormCreateInput, App_RoutingForms_FormUncheckedCreateInput>
    /**
     * In case the App_RoutingForms_Form was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<App_RoutingForms_FormUpdateInput, App_RoutingForms_FormUncheckedUpdateInput>
  }


  /**
   * App_RoutingForms_Form delete
   */
  export type App_RoutingForms_FormDeleteArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
    /**
     * Filter which App_RoutingForms_Form to delete.
     * 
    **/
    where: App_RoutingForms_FormWhereUniqueInput
  }


  /**
   * App_RoutingForms_Form deleteMany
   */
  export type App_RoutingForms_FormDeleteManyArgs = {
    /**
     * Filter which App_RoutingForms_Forms to delete
     * 
    **/
    where?: App_RoutingForms_FormWhereInput
  }


  /**
   * App_RoutingForms_Form without action
   */
  export type App_RoutingForms_FormArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_Form
     * 
    **/
    select?: App_RoutingForms_FormSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormInclude | null
  }



  /**
   * Model App_RoutingForms_FormResponse
   */


  export type AggregateApp_RoutingForms_FormResponse = {
    _count: App_RoutingForms_FormResponseCountAggregateOutputType | null
    _avg: App_RoutingForms_FormResponseAvgAggregateOutputType | null
    _sum: App_RoutingForms_FormResponseSumAggregateOutputType | null
    _min: App_RoutingForms_FormResponseMinAggregateOutputType | null
    _max: App_RoutingForms_FormResponseMaxAggregateOutputType | null
  }

  export type App_RoutingForms_FormResponseAvgAggregateOutputType = {
    id: number | null
  }

  export type App_RoutingForms_FormResponseSumAggregateOutputType = {
    id: number | null
  }

  export type App_RoutingForms_FormResponseMinAggregateOutputType = {
    id: number | null
    formFillerId: string | null
    formId: string | null
  }

  export type App_RoutingForms_FormResponseMaxAggregateOutputType = {
    id: number | null
    formFillerId: string | null
    formId: string | null
  }

  export type App_RoutingForms_FormResponseCountAggregateOutputType = {
    id: number
    formFillerId: number
    formId: number
    response: number
    _all: number
  }


  export type App_RoutingForms_FormResponseAvgAggregateInputType = {
    id?: true
  }

  export type App_RoutingForms_FormResponseSumAggregateInputType = {
    id?: true
  }

  export type App_RoutingForms_FormResponseMinAggregateInputType = {
    id?: true
    formFillerId?: true
    formId?: true
  }

  export type App_RoutingForms_FormResponseMaxAggregateInputType = {
    id?: true
    formFillerId?: true
    formId?: true
  }

  export type App_RoutingForms_FormResponseCountAggregateInputType = {
    id?: true
    formFillerId?: true
    formId?: true
    response?: true
    _all?: true
  }

  export type App_RoutingForms_FormResponseAggregateArgs = {
    /**
     * Filter which App_RoutingForms_FormResponse to aggregate.
     * 
    **/
    where?: App_RoutingForms_FormResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App_RoutingForms_FormResponses to fetch.
     * 
    **/
    orderBy?: Enumerable<App_RoutingForms_FormResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: App_RoutingForms_FormResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App_RoutingForms_FormResponses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App_RoutingForms_FormResponses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned App_RoutingForms_FormResponses
    **/
    _count?: true | App_RoutingForms_FormResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: App_RoutingForms_FormResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: App_RoutingForms_FormResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: App_RoutingForms_FormResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: App_RoutingForms_FormResponseMaxAggregateInputType
  }

  export type GetApp_RoutingForms_FormResponseAggregateType<T extends App_RoutingForms_FormResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateApp_RoutingForms_FormResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApp_RoutingForms_FormResponse[P]>
      : GetScalarType<T[P], AggregateApp_RoutingForms_FormResponse[P]>
  }




  export type App_RoutingForms_FormResponseGroupByArgs = {
    where?: App_RoutingForms_FormResponseWhereInput
    orderBy?: Enumerable<App_RoutingForms_FormResponseOrderByWithAggregationInput>
    by: Array<App_RoutingForms_FormResponseScalarFieldEnum>
    having?: App_RoutingForms_FormResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: App_RoutingForms_FormResponseCountAggregateInputType | true
    _avg?: App_RoutingForms_FormResponseAvgAggregateInputType
    _sum?: App_RoutingForms_FormResponseSumAggregateInputType
    _min?: App_RoutingForms_FormResponseMinAggregateInputType
    _max?: App_RoutingForms_FormResponseMaxAggregateInputType
  }


  export type App_RoutingForms_FormResponseGroupByOutputType = {
    id: number
    formFillerId: string
    formId: string
    response: JsonValue
    _count: App_RoutingForms_FormResponseCountAggregateOutputType | null
    _avg: App_RoutingForms_FormResponseAvgAggregateOutputType | null
    _sum: App_RoutingForms_FormResponseSumAggregateOutputType | null
    _min: App_RoutingForms_FormResponseMinAggregateOutputType | null
    _max: App_RoutingForms_FormResponseMaxAggregateOutputType | null
  }

  type GetApp_RoutingForms_FormResponseGroupByPayload<T extends App_RoutingForms_FormResponseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<App_RoutingForms_FormResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof App_RoutingForms_FormResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], App_RoutingForms_FormResponseGroupByOutputType[P]>
            : GetScalarType<T[P], App_RoutingForms_FormResponseGroupByOutputType[P]>
        }
      >
    >


  export type App_RoutingForms_FormResponseSelect = {
    id?: boolean
    formFillerId?: boolean
    form?: boolean | App_RoutingForms_FormArgs
    formId?: boolean
    response?: boolean
  }

  export type App_RoutingForms_FormResponseInclude = {
    form?: boolean | App_RoutingForms_FormArgs
  }

  export type App_RoutingForms_FormResponseGetPayload<
    S extends boolean | null | undefined | App_RoutingForms_FormResponseArgs,
    U = keyof S
      > = S extends true
        ? App_RoutingForms_FormResponse
    : S extends undefined
    ? never
    : S extends App_RoutingForms_FormResponseArgs | App_RoutingForms_FormResponseFindManyArgs
    ?'include' extends U
    ? App_RoutingForms_FormResponse  & {
    [P in TrueKeys<S['include']>]:
        P extends 'form' ? App_RoutingForms_FormGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'form' ? App_RoutingForms_FormGetPayload<S['select'][P]> :  P extends keyof App_RoutingForms_FormResponse ? App_RoutingForms_FormResponse[P] : never
  } 
    : App_RoutingForms_FormResponse
  : App_RoutingForms_FormResponse


  type App_RoutingForms_FormResponseCountArgs = Merge<
    Omit<App_RoutingForms_FormResponseFindManyArgs, 'select' | 'include'> & {
      select?: App_RoutingForms_FormResponseCountAggregateInputType | true
    }
  >

  export interface App_RoutingForms_FormResponseDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one App_RoutingForms_FormResponse that matches the filter.
     * @param {App_RoutingForms_FormResponseFindUniqueArgs} args - Arguments to find a App_RoutingForms_FormResponse
     * @example
     * // Get one App_RoutingForms_FormResponse
     * const app_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends App_RoutingForms_FormResponseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, App_RoutingForms_FormResponseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'App_RoutingForms_FormResponse'> extends True ? CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse>, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T>>> : CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse | null >, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T> | null >>

    /**
     * Find the first App_RoutingForms_FormResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormResponseFindFirstArgs} args - Arguments to find a App_RoutingForms_FormResponse
     * @example
     * // Get one App_RoutingForms_FormResponse
     * const app_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends App_RoutingForms_FormResponseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, App_RoutingForms_FormResponseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'App_RoutingForms_FormResponse'> extends True ? CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse>, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T>>> : CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse | null >, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T> | null >>

    /**
     * Find zero or more App_RoutingForms_FormResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all App_RoutingForms_FormResponses
     * const app_RoutingForms_FormResponses = await prisma.app_RoutingForms_FormResponse.findMany()
     * 
     * // Get first 10 App_RoutingForms_FormResponses
     * const app_RoutingForms_FormResponses = await prisma.app_RoutingForms_FormResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const app_RoutingForms_FormResponseWithIdOnly = await prisma.app_RoutingForms_FormResponse.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends App_RoutingForms_FormResponseFindManyArgs>(
      args?: SelectSubset<T, App_RoutingForms_FormResponseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<App_RoutingForms_FormResponse>>, PrismaPromise<Array<App_RoutingForms_FormResponseGetPayload<T>>>>

    /**
     * Create a App_RoutingForms_FormResponse.
     * @param {App_RoutingForms_FormResponseCreateArgs} args - Arguments to create a App_RoutingForms_FormResponse.
     * @example
     * // Create one App_RoutingForms_FormResponse
     * const App_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.create({
     *   data: {
     *     // ... data to create a App_RoutingForms_FormResponse
     *   }
     * })
     * 
    **/
    create<T extends App_RoutingForms_FormResponseCreateArgs>(
      args: SelectSubset<T, App_RoutingForms_FormResponseCreateArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse>, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T>>>

    /**
     * Create many App_RoutingForms_FormResponses.
     *     @param {App_RoutingForms_FormResponseCreateManyArgs} args - Arguments to create many App_RoutingForms_FormResponses.
     *     @example
     *     // Create many App_RoutingForms_FormResponses
     *     const app_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends App_RoutingForms_FormResponseCreateManyArgs>(
      args?: SelectSubset<T, App_RoutingForms_FormResponseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a App_RoutingForms_FormResponse.
     * @param {App_RoutingForms_FormResponseDeleteArgs} args - Arguments to delete one App_RoutingForms_FormResponse.
     * @example
     * // Delete one App_RoutingForms_FormResponse
     * const App_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.delete({
     *   where: {
     *     // ... filter to delete one App_RoutingForms_FormResponse
     *   }
     * })
     * 
    **/
    delete<T extends App_RoutingForms_FormResponseDeleteArgs>(
      args: SelectSubset<T, App_RoutingForms_FormResponseDeleteArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse>, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T>>>

    /**
     * Update one App_RoutingForms_FormResponse.
     * @param {App_RoutingForms_FormResponseUpdateArgs} args - Arguments to update one App_RoutingForms_FormResponse.
     * @example
     * // Update one App_RoutingForms_FormResponse
     * const app_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends App_RoutingForms_FormResponseUpdateArgs>(
      args: SelectSubset<T, App_RoutingForms_FormResponseUpdateArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse>, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T>>>

    /**
     * Delete zero or more App_RoutingForms_FormResponses.
     * @param {App_RoutingForms_FormResponseDeleteManyArgs} args - Arguments to filter App_RoutingForms_FormResponses to delete.
     * @example
     * // Delete a few App_RoutingForms_FormResponses
     * const { count } = await prisma.app_RoutingForms_FormResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends App_RoutingForms_FormResponseDeleteManyArgs>(
      args?: SelectSubset<T, App_RoutingForms_FormResponseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more App_RoutingForms_FormResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many App_RoutingForms_FormResponses
     * const app_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends App_RoutingForms_FormResponseUpdateManyArgs>(
      args: SelectSubset<T, App_RoutingForms_FormResponseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one App_RoutingForms_FormResponse.
     * @param {App_RoutingForms_FormResponseUpsertArgs} args - Arguments to update or create a App_RoutingForms_FormResponse.
     * @example
     * // Update or create a App_RoutingForms_FormResponse
     * const app_RoutingForms_FormResponse = await prisma.app_RoutingForms_FormResponse.upsert({
     *   create: {
     *     // ... data to create a App_RoutingForms_FormResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the App_RoutingForms_FormResponse we want to update
     *   }
     * })
    **/
    upsert<T extends App_RoutingForms_FormResponseUpsertArgs>(
      args: SelectSubset<T, App_RoutingForms_FormResponseUpsertArgs>
    ): CheckSelect<T, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponse>, Prisma__App_RoutingForms_FormResponseClient<App_RoutingForms_FormResponseGetPayload<T>>>

    /**
     * Count the number of App_RoutingForms_FormResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormResponseCountArgs} args - Arguments to filter App_RoutingForms_FormResponses to count.
     * @example
     * // Count the number of App_RoutingForms_FormResponses
     * const count = await prisma.app_RoutingForms_FormResponse.count({
     *   where: {
     *     // ... the filter for the App_RoutingForms_FormResponses we want to count
     *   }
     * })
    **/
    count<T extends App_RoutingForms_FormResponseCountArgs>(
      args?: Subset<T, App_RoutingForms_FormResponseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], App_RoutingForms_FormResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a App_RoutingForms_FormResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends App_RoutingForms_FormResponseAggregateArgs>(args: Subset<T, App_RoutingForms_FormResponseAggregateArgs>): PrismaPromise<GetApp_RoutingForms_FormResponseAggregateType<T>>

    /**
     * Group by App_RoutingForms_FormResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {App_RoutingForms_FormResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends App_RoutingForms_FormResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: App_RoutingForms_FormResponseGroupByArgs['orderBy'] }
        : { orderBy?: App_RoutingForms_FormResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, App_RoutingForms_FormResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApp_RoutingForms_FormResponseGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for App_RoutingForms_FormResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__App_RoutingForms_FormResponseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    form<T extends App_RoutingForms_FormArgs = {}>(args?: Subset<T, App_RoutingForms_FormArgs>): CheckSelect<T, Prisma__App_RoutingForms_FormClient<App_RoutingForms_Form | null >, Prisma__App_RoutingForms_FormClient<App_RoutingForms_FormGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * App_RoutingForms_FormResponse findUnique
   */
  export type App_RoutingForms_FormResponseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * Throw an Error if a App_RoutingForms_FormResponse can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which App_RoutingForms_FormResponse to fetch.
     * 
    **/
    where: App_RoutingForms_FormResponseWhereUniqueInput
  }


  /**
   * App_RoutingForms_FormResponse findFirst
   */
  export type App_RoutingForms_FormResponseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * Throw an Error if a App_RoutingForms_FormResponse can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which App_RoutingForms_FormResponse to fetch.
     * 
    **/
    where?: App_RoutingForms_FormResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App_RoutingForms_FormResponses to fetch.
     * 
    **/
    orderBy?: Enumerable<App_RoutingForms_FormResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for App_RoutingForms_FormResponses.
     * 
    **/
    cursor?: App_RoutingForms_FormResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App_RoutingForms_FormResponses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App_RoutingForms_FormResponses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of App_RoutingForms_FormResponses.
     * 
    **/
    distinct?: Enumerable<App_RoutingForms_FormResponseScalarFieldEnum>
  }


  /**
   * App_RoutingForms_FormResponse findMany
   */
  export type App_RoutingForms_FormResponseFindManyArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * Filter, which App_RoutingForms_FormResponses to fetch.
     * 
    **/
    where?: App_RoutingForms_FormResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of App_RoutingForms_FormResponses to fetch.
     * 
    **/
    orderBy?: Enumerable<App_RoutingForms_FormResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing App_RoutingForms_FormResponses.
     * 
    **/
    cursor?: App_RoutingForms_FormResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` App_RoutingForms_FormResponses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` App_RoutingForms_FormResponses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<App_RoutingForms_FormResponseScalarFieldEnum>
  }


  /**
   * App_RoutingForms_FormResponse create
   */
  export type App_RoutingForms_FormResponseCreateArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * The data needed to create a App_RoutingForms_FormResponse.
     * 
    **/
    data: XOR<App_RoutingForms_FormResponseCreateInput, App_RoutingForms_FormResponseUncheckedCreateInput>
  }


  /**
   * App_RoutingForms_FormResponse createMany
   */
  export type App_RoutingForms_FormResponseCreateManyArgs = {
    /**
     * The data used to create many App_RoutingForms_FormResponses.
     * 
    **/
    data: Enumerable<App_RoutingForms_FormResponseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * App_RoutingForms_FormResponse update
   */
  export type App_RoutingForms_FormResponseUpdateArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * The data needed to update a App_RoutingForms_FormResponse.
     * 
    **/
    data: XOR<App_RoutingForms_FormResponseUpdateInput, App_RoutingForms_FormResponseUncheckedUpdateInput>
    /**
     * Choose, which App_RoutingForms_FormResponse to update.
     * 
    **/
    where: App_RoutingForms_FormResponseWhereUniqueInput
  }


  /**
   * App_RoutingForms_FormResponse updateMany
   */
  export type App_RoutingForms_FormResponseUpdateManyArgs = {
    /**
     * The data used to update App_RoutingForms_FormResponses.
     * 
    **/
    data: XOR<App_RoutingForms_FormResponseUpdateManyMutationInput, App_RoutingForms_FormResponseUncheckedUpdateManyInput>
    /**
     * Filter which App_RoutingForms_FormResponses to update
     * 
    **/
    where?: App_RoutingForms_FormResponseWhereInput
  }


  /**
   * App_RoutingForms_FormResponse upsert
   */
  export type App_RoutingForms_FormResponseUpsertArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * The filter to search for the App_RoutingForms_FormResponse to update in case it exists.
     * 
    **/
    where: App_RoutingForms_FormResponseWhereUniqueInput
    /**
     * In case the App_RoutingForms_FormResponse found by the `where` argument doesn't exist, create a new App_RoutingForms_FormResponse with this data.
     * 
    **/
    create: XOR<App_RoutingForms_FormResponseCreateInput, App_RoutingForms_FormResponseUncheckedCreateInput>
    /**
     * In case the App_RoutingForms_FormResponse was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<App_RoutingForms_FormResponseUpdateInput, App_RoutingForms_FormResponseUncheckedUpdateInput>
  }


  /**
   * App_RoutingForms_FormResponse delete
   */
  export type App_RoutingForms_FormResponseDeleteArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
    /**
     * Filter which App_RoutingForms_FormResponse to delete.
     * 
    **/
    where: App_RoutingForms_FormResponseWhereUniqueInput
  }


  /**
   * App_RoutingForms_FormResponse deleteMany
   */
  export type App_RoutingForms_FormResponseDeleteManyArgs = {
    /**
     * Filter which App_RoutingForms_FormResponses to delete
     * 
    **/
    where?: App_RoutingForms_FormResponseWhereInput
  }


  /**
   * App_RoutingForms_FormResponse without action
   */
  export type App_RoutingForms_FormResponseArgs = {
    /**
     * Select specific fields to fetch from the App_RoutingForms_FormResponse
     * 
    **/
    select?: App_RoutingForms_FormResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: App_RoutingForms_FormResponseInclude | null
  }



  /**
   * Model Feedback
   */


  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    date: Date | null
    userId: number | null
    rating: string | null
    comment: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    userId: number | null
    rating: string | null
    comment: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    date: number
    userId: number
    rating: number
    comment: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    rating?: true
    comment?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    rating?: true
    comment?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    date?: true
    userId?: true
    rating?: true
    comment?: true
    _all?: true
  }

  export type FeedbackAggregateArgs = {
    /**
     * Filter which Feedback to aggregate.
     * 
    **/
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     * 
    **/
    orderBy?: Enumerable<FeedbackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs = {
    where?: FeedbackWhereInput
    orderBy?: Enumerable<FeedbackOrderByWithAggregationInput>
    by: Array<FeedbackScalarFieldEnum>
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }


  export type FeedbackGroupByOutputType = {
    id: number
    date: Date
    userId: number
    rating: string
    comment: string | null
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect = {
    id?: boolean
    date?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    rating?: boolean
    comment?: boolean
  }

  export type FeedbackInclude = {
    user?: boolean | UserArgs
  }

  export type FeedbackGetPayload<
    S extends boolean | null | undefined | FeedbackArgs,
    U = keyof S
      > = S extends true
        ? Feedback
    : S extends undefined
    ? never
    : S extends FeedbackArgs | FeedbackFindManyArgs
    ?'include' extends U
    ? Feedback  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Feedback ? Feedback[P] : never
  } 
    : Feedback
  : Feedback


  type FeedbackCountArgs = Merge<
    Omit<FeedbackFindManyArgs, 'select' | 'include'> & {
      select?: FeedbackCountAggregateInputType | true
    }
  >

  export interface FeedbackDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedbackFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FeedbackFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Feedback'> extends True ? CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>> : CheckSelect<T, Prisma__FeedbackClient<Feedback | null >, Prisma__FeedbackClient<FeedbackGetPayload<T> | null >>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedbackFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FeedbackFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Feedback'> extends True ? CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>> : CheckSelect<T, Prisma__FeedbackClient<Feedback | null >, Prisma__FeedbackClient<FeedbackGetPayload<T> | null >>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeedbackFindManyArgs>(
      args?: SelectSubset<T, FeedbackFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Feedback>>, PrismaPromise<Array<FeedbackGetPayload<T>>>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
    **/
    create<T extends FeedbackCreateArgs>(
      args: SelectSubset<T, FeedbackCreateArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Create many Feedbacks.
     *     @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     *     @example
     *     // Create many Feedbacks
     *     const feedback = await prisma.feedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedbackCreateManyArgs>(
      args?: SelectSubset<T, FeedbackCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
    **/
    delete<T extends FeedbackDeleteArgs>(
      args: SelectSubset<T, FeedbackDeleteArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedbackUpdateArgs>(
      args: SelectSubset<T, FeedbackUpdateArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedbackDeleteManyArgs>(
      args?: SelectSubset<T, FeedbackDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedbackUpdateManyArgs>(
      args: SelectSubset<T, FeedbackUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
    **/
    upsert<T extends FeedbackUpsertArgs>(
      args: SelectSubset<T, FeedbackUpsertArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FeedbackClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Throw an Error if a Feedback can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Feedback to fetch.
     * 
    **/
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Throw an Error if a Feedback can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Feedback to fetch.
     * 
    **/
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     * 
    **/
    orderBy?: Enumerable<FeedbackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     * 
    **/
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     * 
    **/
    distinct?: Enumerable<FeedbackScalarFieldEnum>
  }


  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Filter, which Feedbacks to fetch.
     * 
    **/
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     * 
    **/
    orderBy?: Enumerable<FeedbackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     * 
    **/
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FeedbackScalarFieldEnum>
  }


  /**
   * Feedback create
   */
  export type FeedbackCreateArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * The data needed to create a Feedback.
     * 
    **/
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }


  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs = {
    /**
     * The data used to create many Feedbacks.
     * 
    **/
    data: Enumerable<FeedbackCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * The data needed to update a Feedback.
     * 
    **/
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     * 
    **/
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs = {
    /**
     * The data used to update Feedbacks.
     * 
    **/
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     * 
    **/
    where?: FeedbackWhereInput
  }


  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     * 
    **/
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     * 
    **/
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }


  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Filter which Feedback to delete.
     * 
    **/
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs = {
    /**
     * Filter which Feedbacks to delete
     * 
    **/
    where?: FeedbackWhereInput
  }


  /**
   * Feedback without action
   */
  export type FeedbackArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
  }



  /**
   * Model WorkflowStep
   */


  export type AggregateWorkflowStep = {
    _count: WorkflowStepCountAggregateOutputType | null
    _avg: WorkflowStepAvgAggregateOutputType | null
    _sum: WorkflowStepSumAggregateOutputType | null
    _min: WorkflowStepMinAggregateOutputType | null
    _max: WorkflowStepMaxAggregateOutputType | null
  }

  export type WorkflowStepAvgAggregateOutputType = {
    id: number | null
    stepNumber: number | null
    workflowId: number | null
  }

  export type WorkflowStepSumAggregateOutputType = {
    id: number | null
    stepNumber: number | null
    workflowId: number | null
  }

  export type WorkflowStepMinAggregateOutputType = {
    id: number | null
    stepNumber: number | null
    action: WorkflowActions | null
    workflowId: number | null
    sendTo: string | null
    reminderBody: string | null
    emailSubject: string | null
    template: WorkflowTemplates | null
  }

  export type WorkflowStepMaxAggregateOutputType = {
    id: number | null
    stepNumber: number | null
    action: WorkflowActions | null
    workflowId: number | null
    sendTo: string | null
    reminderBody: string | null
    emailSubject: string | null
    template: WorkflowTemplates | null
  }

  export type WorkflowStepCountAggregateOutputType = {
    id: number
    stepNumber: number
    action: number
    workflowId: number
    sendTo: number
    reminderBody: number
    emailSubject: number
    template: number
    _all: number
  }


  export type WorkflowStepAvgAggregateInputType = {
    id?: true
    stepNumber?: true
    workflowId?: true
  }

  export type WorkflowStepSumAggregateInputType = {
    id?: true
    stepNumber?: true
    workflowId?: true
  }

  export type WorkflowStepMinAggregateInputType = {
    id?: true
    stepNumber?: true
    action?: true
    workflowId?: true
    sendTo?: true
    reminderBody?: true
    emailSubject?: true
    template?: true
  }

  export type WorkflowStepMaxAggregateInputType = {
    id?: true
    stepNumber?: true
    action?: true
    workflowId?: true
    sendTo?: true
    reminderBody?: true
    emailSubject?: true
    template?: true
  }

  export type WorkflowStepCountAggregateInputType = {
    id?: true
    stepNumber?: true
    action?: true
    workflowId?: true
    sendTo?: true
    reminderBody?: true
    emailSubject?: true
    template?: true
    _all?: true
  }

  export type WorkflowStepAggregateArgs = {
    /**
     * Filter which WorkflowStep to aggregate.
     * 
    **/
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowSteps
    **/
    _count?: true | WorkflowStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowStepMaxAggregateInputType
  }

  export type GetWorkflowStepAggregateType<T extends WorkflowStepAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowStep[P]>
      : GetScalarType<T[P], AggregateWorkflowStep[P]>
  }




  export type WorkflowStepGroupByArgs = {
    where?: WorkflowStepWhereInput
    orderBy?: Enumerable<WorkflowStepOrderByWithAggregationInput>
    by: Array<WorkflowStepScalarFieldEnum>
    having?: WorkflowStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowStepCountAggregateInputType | true
    _avg?: WorkflowStepAvgAggregateInputType
    _sum?: WorkflowStepSumAggregateInputType
    _min?: WorkflowStepMinAggregateInputType
    _max?: WorkflowStepMaxAggregateInputType
  }


  export type WorkflowStepGroupByOutputType = {
    id: number
    stepNumber: number
    action: WorkflowActions
    workflowId: number
    sendTo: string | null
    reminderBody: string | null
    emailSubject: string | null
    template: WorkflowTemplates
    _count: WorkflowStepCountAggregateOutputType | null
    _avg: WorkflowStepAvgAggregateOutputType | null
    _sum: WorkflowStepSumAggregateOutputType | null
    _min: WorkflowStepMinAggregateOutputType | null
    _max: WorkflowStepMaxAggregateOutputType | null
  }

  type GetWorkflowStepGroupByPayload<T extends WorkflowStepGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WorkflowStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowStepGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowStepGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowStepSelect = {
    id?: boolean
    stepNumber?: boolean
    action?: boolean
    workflowId?: boolean
    workflow?: boolean | WorkflowArgs
    sendTo?: boolean
    reminderBody?: boolean
    emailSubject?: boolean
    template?: boolean
    workflowReminders?: boolean | WorkflowReminderFindManyArgs
    _count?: boolean | WorkflowStepCountOutputTypeArgs
  }

  export type WorkflowStepInclude = {
    workflow?: boolean | WorkflowArgs
    workflowReminders?: boolean | WorkflowReminderFindManyArgs
    _count?: boolean | WorkflowStepCountOutputTypeArgs
  }

  export type WorkflowStepGetPayload<
    S extends boolean | null | undefined | WorkflowStepArgs,
    U = keyof S
      > = S extends true
        ? WorkflowStep
    : S extends undefined
    ? never
    : S extends WorkflowStepArgs | WorkflowStepFindManyArgs
    ?'include' extends U
    ? WorkflowStep  & {
    [P in TrueKeys<S['include']>]:
        P extends 'workflow' ? WorkflowGetPayload<S['include'][P]> :
        P extends 'workflowReminders' ? Array < WorkflowReminderGetPayload<S['include'][P]>>  :
        P extends '_count' ? WorkflowStepCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'workflow' ? WorkflowGetPayload<S['select'][P]> :
        P extends 'workflowReminders' ? Array < WorkflowReminderGetPayload<S['select'][P]>>  :
        P extends '_count' ? WorkflowStepCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WorkflowStep ? WorkflowStep[P] : never
  } 
    : WorkflowStep
  : WorkflowStep


  type WorkflowStepCountArgs = Merge<
    Omit<WorkflowStepFindManyArgs, 'select' | 'include'> & {
      select?: WorkflowStepCountAggregateInputType | true
    }
  >

  export interface WorkflowStepDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one WorkflowStep that matches the filter.
     * @param {WorkflowStepFindUniqueArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkflowStepFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkflowStepFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WorkflowStep'> extends True ? CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep>, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep | null >, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T> | null >>

    /**
     * Find the first WorkflowStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindFirstArgs} args - Arguments to find a WorkflowStep
     * @example
     * // Get one WorkflowStep
     * const workflowStep = await prisma.workflowStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkflowStepFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkflowStepFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WorkflowStep'> extends True ? CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep>, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep | null >, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T> | null >>

    /**
     * Find zero or more WorkflowSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowSteps
     * const workflowSteps = await prisma.workflowStep.findMany()
     * 
     * // Get first 10 WorkflowSteps
     * const workflowSteps = await prisma.workflowStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowStepWithIdOnly = await prisma.workflowStep.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkflowStepFindManyArgs>(
      args?: SelectSubset<T, WorkflowStepFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<WorkflowStep>>, PrismaPromise<Array<WorkflowStepGetPayload<T>>>>

    /**
     * Create a WorkflowStep.
     * @param {WorkflowStepCreateArgs} args - Arguments to create a WorkflowStep.
     * @example
     * // Create one WorkflowStep
     * const WorkflowStep = await prisma.workflowStep.create({
     *   data: {
     *     // ... data to create a WorkflowStep
     *   }
     * })
     * 
    **/
    create<T extends WorkflowStepCreateArgs>(
      args: SelectSubset<T, WorkflowStepCreateArgs>
    ): CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep>, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T>>>

    /**
     * Create many WorkflowSteps.
     *     @param {WorkflowStepCreateManyArgs} args - Arguments to create many WorkflowSteps.
     *     @example
     *     // Create many WorkflowSteps
     *     const workflowStep = await prisma.workflowStep.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkflowStepCreateManyArgs>(
      args?: SelectSubset<T, WorkflowStepCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a WorkflowStep.
     * @param {WorkflowStepDeleteArgs} args - Arguments to delete one WorkflowStep.
     * @example
     * // Delete one WorkflowStep
     * const WorkflowStep = await prisma.workflowStep.delete({
     *   where: {
     *     // ... filter to delete one WorkflowStep
     *   }
     * })
     * 
    **/
    delete<T extends WorkflowStepDeleteArgs>(
      args: SelectSubset<T, WorkflowStepDeleteArgs>
    ): CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep>, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T>>>

    /**
     * Update one WorkflowStep.
     * @param {WorkflowStepUpdateArgs} args - Arguments to update one WorkflowStep.
     * @example
     * // Update one WorkflowStep
     * const workflowStep = await prisma.workflowStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkflowStepUpdateArgs>(
      args: SelectSubset<T, WorkflowStepUpdateArgs>
    ): CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep>, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T>>>

    /**
     * Delete zero or more WorkflowSteps.
     * @param {WorkflowStepDeleteManyArgs} args - Arguments to filter WorkflowSteps to delete.
     * @example
     * // Delete a few WorkflowSteps
     * const { count } = await prisma.workflowStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkflowStepDeleteManyArgs>(
      args?: SelectSubset<T, WorkflowStepDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowSteps
     * const workflowStep = await prisma.workflowStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkflowStepUpdateManyArgs>(
      args: SelectSubset<T, WorkflowStepUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowStep.
     * @param {WorkflowStepUpsertArgs} args - Arguments to update or create a WorkflowStep.
     * @example
     * // Update or create a WorkflowStep
     * const workflowStep = await prisma.workflowStep.upsert({
     *   create: {
     *     // ... data to create a WorkflowStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowStep we want to update
     *   }
     * })
    **/
    upsert<T extends WorkflowStepUpsertArgs>(
      args: SelectSubset<T, WorkflowStepUpsertArgs>
    ): CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep>, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T>>>

    /**
     * Count the number of WorkflowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepCountArgs} args - Arguments to filter WorkflowSteps to count.
     * @example
     * // Count the number of WorkflowSteps
     * const count = await prisma.workflowStep.count({
     *   where: {
     *     // ... the filter for the WorkflowSteps we want to count
     *   }
     * })
    **/
    count<T extends WorkflowStepCountArgs>(
      args?: Subset<T, WorkflowStepCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowStepAggregateArgs>(args: Subset<T, WorkflowStepAggregateArgs>): PrismaPromise<GetWorkflowStepAggregateType<T>>

    /**
     * Group by WorkflowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowStepGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowStepGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkflowStepClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    workflow<T extends WorkflowArgs = {}>(args?: Subset<T, WorkflowArgs>): CheckSelect<T, Prisma__WorkflowClient<Workflow | null >, Prisma__WorkflowClient<WorkflowGetPayload<T> | null >>;

    workflowReminders<T extends WorkflowReminderFindManyArgs = {}>(args?: Subset<T, WorkflowReminderFindManyArgs>): CheckSelect<T, PrismaPromise<Array<WorkflowReminder>>, PrismaPromise<Array<WorkflowReminderGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * WorkflowStep findUnique
   */
  export type WorkflowStepFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * Throw an Error if a WorkflowStep can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WorkflowStep to fetch.
     * 
    **/
    where: WorkflowStepWhereUniqueInput
  }


  /**
   * WorkflowStep findFirst
   */
  export type WorkflowStepFindFirstArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * Throw an Error if a WorkflowStep can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WorkflowStep to fetch.
     * 
    **/
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowSteps.
     * 
    **/
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowSteps.
     * 
    **/
    distinct?: Enumerable<WorkflowStepScalarFieldEnum>
  }


  /**
   * WorkflowStep findMany
   */
  export type WorkflowStepFindManyArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * Filter, which WorkflowSteps to fetch.
     * 
    **/
    where?: WorkflowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowSteps to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowStepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowSteps.
     * 
    **/
    cursor?: WorkflowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowSteps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowSteps.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WorkflowStepScalarFieldEnum>
  }


  /**
   * WorkflowStep create
   */
  export type WorkflowStepCreateArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * The data needed to create a WorkflowStep.
     * 
    **/
    data: XOR<WorkflowStepCreateInput, WorkflowStepUncheckedCreateInput>
  }


  /**
   * WorkflowStep createMany
   */
  export type WorkflowStepCreateManyArgs = {
    /**
     * The data used to create many WorkflowSteps.
     * 
    **/
    data: Enumerable<WorkflowStepCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WorkflowStep update
   */
  export type WorkflowStepUpdateArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * The data needed to update a WorkflowStep.
     * 
    **/
    data: XOR<WorkflowStepUpdateInput, WorkflowStepUncheckedUpdateInput>
    /**
     * Choose, which WorkflowStep to update.
     * 
    **/
    where: WorkflowStepWhereUniqueInput
  }


  /**
   * WorkflowStep updateMany
   */
  export type WorkflowStepUpdateManyArgs = {
    /**
     * The data used to update WorkflowSteps.
     * 
    **/
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowSteps to update
     * 
    **/
    where?: WorkflowStepWhereInput
  }


  /**
   * WorkflowStep upsert
   */
  export type WorkflowStepUpsertArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * The filter to search for the WorkflowStep to update in case it exists.
     * 
    **/
    where: WorkflowStepWhereUniqueInput
    /**
     * In case the WorkflowStep found by the `where` argument doesn't exist, create a new WorkflowStep with this data.
     * 
    **/
    create: XOR<WorkflowStepCreateInput, WorkflowStepUncheckedCreateInput>
    /**
     * In case the WorkflowStep was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WorkflowStepUpdateInput, WorkflowStepUncheckedUpdateInput>
  }


  /**
   * WorkflowStep delete
   */
  export type WorkflowStepDeleteArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
    /**
     * Filter which WorkflowStep to delete.
     * 
    **/
    where: WorkflowStepWhereUniqueInput
  }


  /**
   * WorkflowStep deleteMany
   */
  export type WorkflowStepDeleteManyArgs = {
    /**
     * Filter which WorkflowSteps to delete
     * 
    **/
    where?: WorkflowStepWhereInput
  }


  /**
   * WorkflowStep without action
   */
  export type WorkflowStepArgs = {
    /**
     * Select specific fields to fetch from the WorkflowStep
     * 
    **/
    select?: WorkflowStepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowStepInclude | null
  }



  /**
   * Model Workflow
   */


  export type AggregateWorkflow = {
    _count: WorkflowCountAggregateOutputType | null
    _avg: WorkflowAvgAggregateOutputType | null
    _sum: WorkflowSumAggregateOutputType | null
    _min: WorkflowMinAggregateOutputType | null
    _max: WorkflowMaxAggregateOutputType | null
  }

  export type WorkflowAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    time: number | null
  }

  export type WorkflowSumAggregateOutputType = {
    id: number | null
    userId: number | null
    time: number | null
  }

  export type WorkflowMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    trigger: WorkflowTriggerEvents | null
    time: number | null
    timeUnit: TimeUnit | null
  }

  export type WorkflowMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    trigger: WorkflowTriggerEvents | null
    time: number | null
    timeUnit: TimeUnit | null
  }

  export type WorkflowCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    trigger: number
    time: number
    timeUnit: number
    _all: number
  }


  export type WorkflowAvgAggregateInputType = {
    id?: true
    userId?: true
    time?: true
  }

  export type WorkflowSumAggregateInputType = {
    id?: true
    userId?: true
    time?: true
  }

  export type WorkflowMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    trigger?: true
    time?: true
    timeUnit?: true
  }

  export type WorkflowMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    trigger?: true
    time?: true
    timeUnit?: true
  }

  export type WorkflowCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    trigger?: true
    time?: true
    timeUnit?: true
    _all?: true
  }

  export type WorkflowAggregateArgs = {
    /**
     * Filter which Workflow to aggregate.
     * 
    **/
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workflows
    **/
    _count?: true | WorkflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowMaxAggregateInputType
  }

  export type GetWorkflowAggregateType<T extends WorkflowAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflow[P]>
      : GetScalarType<T[P], AggregateWorkflow[P]>
  }




  export type WorkflowGroupByArgs = {
    where?: WorkflowWhereInput
    orderBy?: Enumerable<WorkflowOrderByWithAggregationInput>
    by: Array<WorkflowScalarFieldEnum>
    having?: WorkflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowCountAggregateInputType | true
    _avg?: WorkflowAvgAggregateInputType
    _sum?: WorkflowSumAggregateInputType
    _min?: WorkflowMinAggregateInputType
    _max?: WorkflowMaxAggregateInputType
  }


  export type WorkflowGroupByOutputType = {
    id: number
    name: string
    userId: number
    trigger: WorkflowTriggerEvents
    time: number | null
    timeUnit: TimeUnit | null
    _count: WorkflowCountAggregateOutputType | null
    _avg: WorkflowAvgAggregateOutputType | null
    _sum: WorkflowSumAggregateOutputType | null
    _min: WorkflowMinAggregateOutputType | null
    _max: WorkflowMaxAggregateOutputType | null
  }

  type GetWorkflowGroupByPayload<T extends WorkflowGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WorkflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowSelect = {
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    activeOn?: boolean | WorkflowsOnEventTypesFindManyArgs
    trigger?: boolean
    time?: boolean
    timeUnit?: boolean
    steps?: boolean | WorkflowStepFindManyArgs
    _count?: boolean | WorkflowCountOutputTypeArgs
  }

  export type WorkflowInclude = {
    user?: boolean | UserArgs
    activeOn?: boolean | WorkflowsOnEventTypesFindManyArgs
    steps?: boolean | WorkflowStepFindManyArgs
    _count?: boolean | WorkflowCountOutputTypeArgs
  }

  export type WorkflowGetPayload<
    S extends boolean | null | undefined | WorkflowArgs,
    U = keyof S
      > = S extends true
        ? Workflow
    : S extends undefined
    ? never
    : S extends WorkflowArgs | WorkflowFindManyArgs
    ?'include' extends U
    ? Workflow  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'activeOn' ? Array < WorkflowsOnEventTypesGetPayload<S['include'][P]>>  :
        P extends 'steps' ? Array < WorkflowStepGetPayload<S['include'][P]>>  :
        P extends '_count' ? WorkflowCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'activeOn' ? Array < WorkflowsOnEventTypesGetPayload<S['select'][P]>>  :
        P extends 'steps' ? Array < WorkflowStepGetPayload<S['select'][P]>>  :
        P extends '_count' ? WorkflowCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Workflow ? Workflow[P] : never
  } 
    : Workflow
  : Workflow


  type WorkflowCountArgs = Merge<
    Omit<WorkflowFindManyArgs, 'select' | 'include'> & {
      select?: WorkflowCountAggregateInputType | true
    }
  >

  export interface WorkflowDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Workflow that matches the filter.
     * @param {WorkflowFindUniqueArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkflowFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkflowFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Workflow'> extends True ? CheckSelect<T, Prisma__WorkflowClient<Workflow>, Prisma__WorkflowClient<WorkflowGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowClient<Workflow | null >, Prisma__WorkflowClient<WorkflowGetPayload<T> | null >>

    /**
     * Find the first Workflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindFirstArgs} args - Arguments to find a Workflow
     * @example
     * // Get one Workflow
     * const workflow = await prisma.workflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkflowFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkflowFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Workflow'> extends True ? CheckSelect<T, Prisma__WorkflowClient<Workflow>, Prisma__WorkflowClient<WorkflowGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowClient<Workflow | null >, Prisma__WorkflowClient<WorkflowGetPayload<T> | null >>

    /**
     * Find zero or more Workflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workflows
     * const workflows = await prisma.workflow.findMany()
     * 
     * // Get first 10 Workflows
     * const workflows = await prisma.workflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowWithIdOnly = await prisma.workflow.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkflowFindManyArgs>(
      args?: SelectSubset<T, WorkflowFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Workflow>>, PrismaPromise<Array<WorkflowGetPayload<T>>>>

    /**
     * Create a Workflow.
     * @param {WorkflowCreateArgs} args - Arguments to create a Workflow.
     * @example
     * // Create one Workflow
     * const Workflow = await prisma.workflow.create({
     *   data: {
     *     // ... data to create a Workflow
     *   }
     * })
     * 
    **/
    create<T extends WorkflowCreateArgs>(
      args: SelectSubset<T, WorkflowCreateArgs>
    ): CheckSelect<T, Prisma__WorkflowClient<Workflow>, Prisma__WorkflowClient<WorkflowGetPayload<T>>>

    /**
     * Create many Workflows.
     *     @param {WorkflowCreateManyArgs} args - Arguments to create many Workflows.
     *     @example
     *     // Create many Workflows
     *     const workflow = await prisma.workflow.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkflowCreateManyArgs>(
      args?: SelectSubset<T, WorkflowCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Workflow.
     * @param {WorkflowDeleteArgs} args - Arguments to delete one Workflow.
     * @example
     * // Delete one Workflow
     * const Workflow = await prisma.workflow.delete({
     *   where: {
     *     // ... filter to delete one Workflow
     *   }
     * })
     * 
    **/
    delete<T extends WorkflowDeleteArgs>(
      args: SelectSubset<T, WorkflowDeleteArgs>
    ): CheckSelect<T, Prisma__WorkflowClient<Workflow>, Prisma__WorkflowClient<WorkflowGetPayload<T>>>

    /**
     * Update one Workflow.
     * @param {WorkflowUpdateArgs} args - Arguments to update one Workflow.
     * @example
     * // Update one Workflow
     * const workflow = await prisma.workflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkflowUpdateArgs>(
      args: SelectSubset<T, WorkflowUpdateArgs>
    ): CheckSelect<T, Prisma__WorkflowClient<Workflow>, Prisma__WorkflowClient<WorkflowGetPayload<T>>>

    /**
     * Delete zero or more Workflows.
     * @param {WorkflowDeleteManyArgs} args - Arguments to filter Workflows to delete.
     * @example
     * // Delete a few Workflows
     * const { count } = await prisma.workflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkflowDeleteManyArgs>(
      args?: SelectSubset<T, WorkflowDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workflows
     * const workflow = await prisma.workflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkflowUpdateManyArgs>(
      args: SelectSubset<T, WorkflowUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Workflow.
     * @param {WorkflowUpsertArgs} args - Arguments to update or create a Workflow.
     * @example
     * // Update or create a Workflow
     * const workflow = await prisma.workflow.upsert({
     *   create: {
     *     // ... data to create a Workflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workflow we want to update
     *   }
     * })
    **/
    upsert<T extends WorkflowUpsertArgs>(
      args: SelectSubset<T, WorkflowUpsertArgs>
    ): CheckSelect<T, Prisma__WorkflowClient<Workflow>, Prisma__WorkflowClient<WorkflowGetPayload<T>>>

    /**
     * Count the number of Workflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowCountArgs} args - Arguments to filter Workflows to count.
     * @example
     * // Count the number of Workflows
     * const count = await prisma.workflow.count({
     *   where: {
     *     // ... the filter for the Workflows we want to count
     *   }
     * })
    **/
    count<T extends WorkflowCountArgs>(
      args?: Subset<T, WorkflowCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowAggregateArgs>(args: Subset<T, WorkflowAggregateArgs>): PrismaPromise<GetWorkflowAggregateType<T>>

    /**
     * Group by Workflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkflowClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    activeOn<T extends WorkflowsOnEventTypesFindManyArgs = {}>(args?: Subset<T, WorkflowsOnEventTypesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<WorkflowsOnEventTypes>>, PrismaPromise<Array<WorkflowsOnEventTypesGetPayload<T>>>>;

    steps<T extends WorkflowStepFindManyArgs = {}>(args?: Subset<T, WorkflowStepFindManyArgs>): CheckSelect<T, PrismaPromise<Array<WorkflowStep>>, PrismaPromise<Array<WorkflowStepGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Workflow findUnique
   */
  export type WorkflowFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * Throw an Error if a Workflow can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Workflow to fetch.
     * 
    **/
    where: WorkflowWhereUniqueInput
  }


  /**
   * Workflow findFirst
   */
  export type WorkflowFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * Throw an Error if a Workflow can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Workflow to fetch.
     * 
    **/
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workflows.
     * 
    **/
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workflows.
     * 
    **/
    distinct?: Enumerable<WorkflowScalarFieldEnum>
  }


  /**
   * Workflow findMany
   */
  export type WorkflowFindManyArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * Filter, which Workflows to fetch.
     * 
    **/
    where?: WorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workflows to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workflows.
     * 
    **/
    cursor?: WorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workflows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workflows.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WorkflowScalarFieldEnum>
  }


  /**
   * Workflow create
   */
  export type WorkflowCreateArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * The data needed to create a Workflow.
     * 
    **/
    data: XOR<WorkflowCreateInput, WorkflowUncheckedCreateInput>
  }


  /**
   * Workflow createMany
   */
  export type WorkflowCreateManyArgs = {
    /**
     * The data used to create many Workflows.
     * 
    **/
    data: Enumerable<WorkflowCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Workflow update
   */
  export type WorkflowUpdateArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * The data needed to update a Workflow.
     * 
    **/
    data: XOR<WorkflowUpdateInput, WorkflowUncheckedUpdateInput>
    /**
     * Choose, which Workflow to update.
     * 
    **/
    where: WorkflowWhereUniqueInput
  }


  /**
   * Workflow updateMany
   */
  export type WorkflowUpdateManyArgs = {
    /**
     * The data used to update Workflows.
     * 
    **/
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyInput>
    /**
     * Filter which Workflows to update
     * 
    **/
    where?: WorkflowWhereInput
  }


  /**
   * Workflow upsert
   */
  export type WorkflowUpsertArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * The filter to search for the Workflow to update in case it exists.
     * 
    **/
    where: WorkflowWhereUniqueInput
    /**
     * In case the Workflow found by the `where` argument doesn't exist, create a new Workflow with this data.
     * 
    **/
    create: XOR<WorkflowCreateInput, WorkflowUncheckedCreateInput>
    /**
     * In case the Workflow was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WorkflowUpdateInput, WorkflowUncheckedUpdateInput>
  }


  /**
   * Workflow delete
   */
  export type WorkflowDeleteArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
    /**
     * Filter which Workflow to delete.
     * 
    **/
    where: WorkflowWhereUniqueInput
  }


  /**
   * Workflow deleteMany
   */
  export type WorkflowDeleteManyArgs = {
    /**
     * Filter which Workflows to delete
     * 
    **/
    where?: WorkflowWhereInput
  }


  /**
   * Workflow without action
   */
  export type WorkflowArgs = {
    /**
     * Select specific fields to fetch from the Workflow
     * 
    **/
    select?: WorkflowSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowInclude | null
  }



  /**
   * Model WorkflowsOnEventTypes
   */


  export type AggregateWorkflowsOnEventTypes = {
    _count: WorkflowsOnEventTypesCountAggregateOutputType | null
    _avg: WorkflowsOnEventTypesAvgAggregateOutputType | null
    _sum: WorkflowsOnEventTypesSumAggregateOutputType | null
    _min: WorkflowsOnEventTypesMinAggregateOutputType | null
    _max: WorkflowsOnEventTypesMaxAggregateOutputType | null
  }

  export type WorkflowsOnEventTypesAvgAggregateOutputType = {
    id: number | null
    workflowId: number | null
    eventTypeId: number | null
  }

  export type WorkflowsOnEventTypesSumAggregateOutputType = {
    id: number | null
    workflowId: number | null
    eventTypeId: number | null
  }

  export type WorkflowsOnEventTypesMinAggregateOutputType = {
    id: number | null
    workflowId: number | null
    eventTypeId: number | null
  }

  export type WorkflowsOnEventTypesMaxAggregateOutputType = {
    id: number | null
    workflowId: number | null
    eventTypeId: number | null
  }

  export type WorkflowsOnEventTypesCountAggregateOutputType = {
    id: number
    workflowId: number
    eventTypeId: number
    _all: number
  }


  export type WorkflowsOnEventTypesAvgAggregateInputType = {
    id?: true
    workflowId?: true
    eventTypeId?: true
  }

  export type WorkflowsOnEventTypesSumAggregateInputType = {
    id?: true
    workflowId?: true
    eventTypeId?: true
  }

  export type WorkflowsOnEventTypesMinAggregateInputType = {
    id?: true
    workflowId?: true
    eventTypeId?: true
  }

  export type WorkflowsOnEventTypesMaxAggregateInputType = {
    id?: true
    workflowId?: true
    eventTypeId?: true
  }

  export type WorkflowsOnEventTypesCountAggregateInputType = {
    id?: true
    workflowId?: true
    eventTypeId?: true
    _all?: true
  }

  export type WorkflowsOnEventTypesAggregateArgs = {
    /**
     * Filter which WorkflowsOnEventTypes to aggregate.
     * 
    **/
    where?: WorkflowsOnEventTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowsOnEventTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowsOnEventTypesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WorkflowsOnEventTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowsOnEventTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowsOnEventTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowsOnEventTypes
    **/
    _count?: true | WorkflowsOnEventTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowsOnEventTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowsOnEventTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowsOnEventTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowsOnEventTypesMaxAggregateInputType
  }

  export type GetWorkflowsOnEventTypesAggregateType<T extends WorkflowsOnEventTypesAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowsOnEventTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowsOnEventTypes[P]>
      : GetScalarType<T[P], AggregateWorkflowsOnEventTypes[P]>
  }




  export type WorkflowsOnEventTypesGroupByArgs = {
    where?: WorkflowsOnEventTypesWhereInput
    orderBy?: Enumerable<WorkflowsOnEventTypesOrderByWithAggregationInput>
    by: Array<WorkflowsOnEventTypesScalarFieldEnum>
    having?: WorkflowsOnEventTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowsOnEventTypesCountAggregateInputType | true
    _avg?: WorkflowsOnEventTypesAvgAggregateInputType
    _sum?: WorkflowsOnEventTypesSumAggregateInputType
    _min?: WorkflowsOnEventTypesMinAggregateInputType
    _max?: WorkflowsOnEventTypesMaxAggregateInputType
  }


  export type WorkflowsOnEventTypesGroupByOutputType = {
    id: number
    workflowId: number
    eventTypeId: number
    _count: WorkflowsOnEventTypesCountAggregateOutputType | null
    _avg: WorkflowsOnEventTypesAvgAggregateOutputType | null
    _sum: WorkflowsOnEventTypesSumAggregateOutputType | null
    _min: WorkflowsOnEventTypesMinAggregateOutputType | null
    _max: WorkflowsOnEventTypesMaxAggregateOutputType | null
  }

  type GetWorkflowsOnEventTypesGroupByPayload<T extends WorkflowsOnEventTypesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WorkflowsOnEventTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowsOnEventTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowsOnEventTypesGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowsOnEventTypesGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowsOnEventTypesSelect = {
    id?: boolean
    workflow?: boolean | WorkflowArgs
    workflowId?: boolean
    eventType?: boolean | EventTypeArgs
    eventTypeId?: boolean
  }

  export type WorkflowsOnEventTypesInclude = {
    workflow?: boolean | WorkflowArgs
    eventType?: boolean | EventTypeArgs
  }

  export type WorkflowsOnEventTypesGetPayload<
    S extends boolean | null | undefined | WorkflowsOnEventTypesArgs,
    U = keyof S
      > = S extends true
        ? WorkflowsOnEventTypes
    : S extends undefined
    ? never
    : S extends WorkflowsOnEventTypesArgs | WorkflowsOnEventTypesFindManyArgs
    ?'include' extends U
    ? WorkflowsOnEventTypes  & {
    [P in TrueKeys<S['include']>]:
        P extends 'workflow' ? WorkflowGetPayload<S['include'][P]> :
        P extends 'eventType' ? EventTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'workflow' ? WorkflowGetPayload<S['select'][P]> :
        P extends 'eventType' ? EventTypeGetPayload<S['select'][P]> :  P extends keyof WorkflowsOnEventTypes ? WorkflowsOnEventTypes[P] : never
  } 
    : WorkflowsOnEventTypes
  : WorkflowsOnEventTypes


  type WorkflowsOnEventTypesCountArgs = Merge<
    Omit<WorkflowsOnEventTypesFindManyArgs, 'select' | 'include'> & {
      select?: WorkflowsOnEventTypesCountAggregateInputType | true
    }
  >

  export interface WorkflowsOnEventTypesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one WorkflowsOnEventTypes that matches the filter.
     * @param {WorkflowsOnEventTypesFindUniqueArgs} args - Arguments to find a WorkflowsOnEventTypes
     * @example
     * // Get one WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkflowsOnEventTypesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkflowsOnEventTypesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WorkflowsOnEventTypes'> extends True ? CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes>, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes | null >, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T> | null >>

    /**
     * Find the first WorkflowsOnEventTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsOnEventTypesFindFirstArgs} args - Arguments to find a WorkflowsOnEventTypes
     * @example
     * // Get one WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkflowsOnEventTypesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkflowsOnEventTypesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WorkflowsOnEventTypes'> extends True ? CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes>, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes | null >, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T> | null >>

    /**
     * Find zero or more WorkflowsOnEventTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsOnEventTypesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findMany()
     * 
     * // Get first 10 WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowsOnEventTypesWithIdOnly = await prisma.workflowsOnEventTypes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkflowsOnEventTypesFindManyArgs>(
      args?: SelectSubset<T, WorkflowsOnEventTypesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<WorkflowsOnEventTypes>>, PrismaPromise<Array<WorkflowsOnEventTypesGetPayload<T>>>>

    /**
     * Create a WorkflowsOnEventTypes.
     * @param {WorkflowsOnEventTypesCreateArgs} args - Arguments to create a WorkflowsOnEventTypes.
     * @example
     * // Create one WorkflowsOnEventTypes
     * const WorkflowsOnEventTypes = await prisma.workflowsOnEventTypes.create({
     *   data: {
     *     // ... data to create a WorkflowsOnEventTypes
     *   }
     * })
     * 
    **/
    create<T extends WorkflowsOnEventTypesCreateArgs>(
      args: SelectSubset<T, WorkflowsOnEventTypesCreateArgs>
    ): CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes>, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T>>>

    /**
     * Create many WorkflowsOnEventTypes.
     *     @param {WorkflowsOnEventTypesCreateManyArgs} args - Arguments to create many WorkflowsOnEventTypes.
     *     @example
     *     // Create many WorkflowsOnEventTypes
     *     const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkflowsOnEventTypesCreateManyArgs>(
      args?: SelectSubset<T, WorkflowsOnEventTypesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a WorkflowsOnEventTypes.
     * @param {WorkflowsOnEventTypesDeleteArgs} args - Arguments to delete one WorkflowsOnEventTypes.
     * @example
     * // Delete one WorkflowsOnEventTypes
     * const WorkflowsOnEventTypes = await prisma.workflowsOnEventTypes.delete({
     *   where: {
     *     // ... filter to delete one WorkflowsOnEventTypes
     *   }
     * })
     * 
    **/
    delete<T extends WorkflowsOnEventTypesDeleteArgs>(
      args: SelectSubset<T, WorkflowsOnEventTypesDeleteArgs>
    ): CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes>, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T>>>

    /**
     * Update one WorkflowsOnEventTypes.
     * @param {WorkflowsOnEventTypesUpdateArgs} args - Arguments to update one WorkflowsOnEventTypes.
     * @example
     * // Update one WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkflowsOnEventTypesUpdateArgs>(
      args: SelectSubset<T, WorkflowsOnEventTypesUpdateArgs>
    ): CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes>, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T>>>

    /**
     * Delete zero or more WorkflowsOnEventTypes.
     * @param {WorkflowsOnEventTypesDeleteManyArgs} args - Arguments to filter WorkflowsOnEventTypes to delete.
     * @example
     * // Delete a few WorkflowsOnEventTypes
     * const { count } = await prisma.workflowsOnEventTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkflowsOnEventTypesDeleteManyArgs>(
      args?: SelectSubset<T, WorkflowsOnEventTypesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowsOnEventTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsOnEventTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkflowsOnEventTypesUpdateManyArgs>(
      args: SelectSubset<T, WorkflowsOnEventTypesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowsOnEventTypes.
     * @param {WorkflowsOnEventTypesUpsertArgs} args - Arguments to update or create a WorkflowsOnEventTypes.
     * @example
     * // Update or create a WorkflowsOnEventTypes
     * const workflowsOnEventTypes = await prisma.workflowsOnEventTypes.upsert({
     *   create: {
     *     // ... data to create a WorkflowsOnEventTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowsOnEventTypes we want to update
     *   }
     * })
    **/
    upsert<T extends WorkflowsOnEventTypesUpsertArgs>(
      args: SelectSubset<T, WorkflowsOnEventTypesUpsertArgs>
    ): CheckSelect<T, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypes>, Prisma__WorkflowsOnEventTypesClient<WorkflowsOnEventTypesGetPayload<T>>>

    /**
     * Count the number of WorkflowsOnEventTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsOnEventTypesCountArgs} args - Arguments to filter WorkflowsOnEventTypes to count.
     * @example
     * // Count the number of WorkflowsOnEventTypes
     * const count = await prisma.workflowsOnEventTypes.count({
     *   where: {
     *     // ... the filter for the WorkflowsOnEventTypes we want to count
     *   }
     * })
    **/
    count<T extends WorkflowsOnEventTypesCountArgs>(
      args?: Subset<T, WorkflowsOnEventTypesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowsOnEventTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowsOnEventTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsOnEventTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowsOnEventTypesAggregateArgs>(args: Subset<T, WorkflowsOnEventTypesAggregateArgs>): PrismaPromise<GetWorkflowsOnEventTypesAggregateType<T>>

    /**
     * Group by WorkflowsOnEventTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowsOnEventTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowsOnEventTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowsOnEventTypesGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowsOnEventTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowsOnEventTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowsOnEventTypesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowsOnEventTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkflowsOnEventTypesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    workflow<T extends WorkflowArgs = {}>(args?: Subset<T, WorkflowArgs>): CheckSelect<T, Prisma__WorkflowClient<Workflow | null >, Prisma__WorkflowClient<WorkflowGetPayload<T> | null >>;

    eventType<T extends EventTypeArgs = {}>(args?: Subset<T, EventTypeArgs>): CheckSelect<T, Prisma__EventTypeClient<EventType | null >, Prisma__EventTypeClient<EventTypeGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * WorkflowsOnEventTypes findUnique
   */
  export type WorkflowsOnEventTypesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * Throw an Error if a WorkflowsOnEventTypes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WorkflowsOnEventTypes to fetch.
     * 
    **/
    where: WorkflowsOnEventTypesWhereUniqueInput
  }


  /**
   * WorkflowsOnEventTypes findFirst
   */
  export type WorkflowsOnEventTypesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * Throw an Error if a WorkflowsOnEventTypes can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WorkflowsOnEventTypes to fetch.
     * 
    **/
    where?: WorkflowsOnEventTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowsOnEventTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowsOnEventTypesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowsOnEventTypes.
     * 
    **/
    cursor?: WorkflowsOnEventTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowsOnEventTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowsOnEventTypes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowsOnEventTypes.
     * 
    **/
    distinct?: Enumerable<WorkflowsOnEventTypesScalarFieldEnum>
  }


  /**
   * WorkflowsOnEventTypes findMany
   */
  export type WorkflowsOnEventTypesFindManyArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * Filter, which WorkflowsOnEventTypes to fetch.
     * 
    **/
    where?: WorkflowsOnEventTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowsOnEventTypes to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowsOnEventTypesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowsOnEventTypes.
     * 
    **/
    cursor?: WorkflowsOnEventTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowsOnEventTypes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowsOnEventTypes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WorkflowsOnEventTypesScalarFieldEnum>
  }


  /**
   * WorkflowsOnEventTypes create
   */
  export type WorkflowsOnEventTypesCreateArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * The data needed to create a WorkflowsOnEventTypes.
     * 
    **/
    data: XOR<WorkflowsOnEventTypesCreateInput, WorkflowsOnEventTypesUncheckedCreateInput>
  }


  /**
   * WorkflowsOnEventTypes createMany
   */
  export type WorkflowsOnEventTypesCreateManyArgs = {
    /**
     * The data used to create many WorkflowsOnEventTypes.
     * 
    **/
    data: Enumerable<WorkflowsOnEventTypesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WorkflowsOnEventTypes update
   */
  export type WorkflowsOnEventTypesUpdateArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * The data needed to update a WorkflowsOnEventTypes.
     * 
    **/
    data: XOR<WorkflowsOnEventTypesUpdateInput, WorkflowsOnEventTypesUncheckedUpdateInput>
    /**
     * Choose, which WorkflowsOnEventTypes to update.
     * 
    **/
    where: WorkflowsOnEventTypesWhereUniqueInput
  }


  /**
   * WorkflowsOnEventTypes updateMany
   */
  export type WorkflowsOnEventTypesUpdateManyArgs = {
    /**
     * The data used to update WorkflowsOnEventTypes.
     * 
    **/
    data: XOR<WorkflowsOnEventTypesUpdateManyMutationInput, WorkflowsOnEventTypesUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowsOnEventTypes to update
     * 
    **/
    where?: WorkflowsOnEventTypesWhereInput
  }


  /**
   * WorkflowsOnEventTypes upsert
   */
  export type WorkflowsOnEventTypesUpsertArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * The filter to search for the WorkflowsOnEventTypes to update in case it exists.
     * 
    **/
    where: WorkflowsOnEventTypesWhereUniqueInput
    /**
     * In case the WorkflowsOnEventTypes found by the `where` argument doesn't exist, create a new WorkflowsOnEventTypes with this data.
     * 
    **/
    create: XOR<WorkflowsOnEventTypesCreateInput, WorkflowsOnEventTypesUncheckedCreateInput>
    /**
     * In case the WorkflowsOnEventTypes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WorkflowsOnEventTypesUpdateInput, WorkflowsOnEventTypesUncheckedUpdateInput>
  }


  /**
   * WorkflowsOnEventTypes delete
   */
  export type WorkflowsOnEventTypesDeleteArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
    /**
     * Filter which WorkflowsOnEventTypes to delete.
     * 
    **/
    where: WorkflowsOnEventTypesWhereUniqueInput
  }


  /**
   * WorkflowsOnEventTypes deleteMany
   */
  export type WorkflowsOnEventTypesDeleteManyArgs = {
    /**
     * Filter which WorkflowsOnEventTypes to delete
     * 
    **/
    where?: WorkflowsOnEventTypesWhereInput
  }


  /**
   * WorkflowsOnEventTypes without action
   */
  export type WorkflowsOnEventTypesArgs = {
    /**
     * Select specific fields to fetch from the WorkflowsOnEventTypes
     * 
    **/
    select?: WorkflowsOnEventTypesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowsOnEventTypesInclude | null
  }



  /**
   * Model WorkflowReminder
   */


  export type AggregateWorkflowReminder = {
    _count: WorkflowReminderCountAggregateOutputType | null
    _avg: WorkflowReminderAvgAggregateOutputType | null
    _sum: WorkflowReminderSumAggregateOutputType | null
    _min: WorkflowReminderMinAggregateOutputType | null
    _max: WorkflowReminderMaxAggregateOutputType | null
  }

  export type WorkflowReminderAvgAggregateOutputType = {
    id: number | null
    workflowStepId: number | null
  }

  export type WorkflowReminderSumAggregateOutputType = {
    id: number | null
    workflowStepId: number | null
  }

  export type WorkflowReminderMinAggregateOutputType = {
    id: number | null
    bookingUid: string | null
    method: WorkflowMethods | null
    scheduledDate: Date | null
    referenceId: string | null
    scheduled: boolean | null
    workflowStepId: number | null
  }

  export type WorkflowReminderMaxAggregateOutputType = {
    id: number | null
    bookingUid: string | null
    method: WorkflowMethods | null
    scheduledDate: Date | null
    referenceId: string | null
    scheduled: boolean | null
    workflowStepId: number | null
  }

  export type WorkflowReminderCountAggregateOutputType = {
    id: number
    bookingUid: number
    method: number
    scheduledDate: number
    referenceId: number
    scheduled: number
    workflowStepId: number
    _all: number
  }


  export type WorkflowReminderAvgAggregateInputType = {
    id?: true
    workflowStepId?: true
  }

  export type WorkflowReminderSumAggregateInputType = {
    id?: true
    workflowStepId?: true
  }

  export type WorkflowReminderMinAggregateInputType = {
    id?: true
    bookingUid?: true
    method?: true
    scheduledDate?: true
    referenceId?: true
    scheduled?: true
    workflowStepId?: true
  }

  export type WorkflowReminderMaxAggregateInputType = {
    id?: true
    bookingUid?: true
    method?: true
    scheduledDate?: true
    referenceId?: true
    scheduled?: true
    workflowStepId?: true
  }

  export type WorkflowReminderCountAggregateInputType = {
    id?: true
    bookingUid?: true
    method?: true
    scheduledDate?: true
    referenceId?: true
    scheduled?: true
    workflowStepId?: true
    _all?: true
  }

  export type WorkflowReminderAggregateArgs = {
    /**
     * Filter which WorkflowReminder to aggregate.
     * 
    **/
    where?: WorkflowReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowReminders to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowReminderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: WorkflowReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowReminders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowReminders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowReminders
    **/
    _count?: true | WorkflowReminderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowReminderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowReminderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowReminderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowReminderMaxAggregateInputType
  }

  export type GetWorkflowReminderAggregateType<T extends WorkflowReminderAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowReminder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowReminder[P]>
      : GetScalarType<T[P], AggregateWorkflowReminder[P]>
  }




  export type WorkflowReminderGroupByArgs = {
    where?: WorkflowReminderWhereInput
    orderBy?: Enumerable<WorkflowReminderOrderByWithAggregationInput>
    by: Array<WorkflowReminderScalarFieldEnum>
    having?: WorkflowReminderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowReminderCountAggregateInputType | true
    _avg?: WorkflowReminderAvgAggregateInputType
    _sum?: WorkflowReminderSumAggregateInputType
    _min?: WorkflowReminderMinAggregateInputType
    _max?: WorkflowReminderMaxAggregateInputType
  }


  export type WorkflowReminderGroupByOutputType = {
    id: number
    bookingUid: string
    method: WorkflowMethods
    scheduledDate: Date
    referenceId: string | null
    scheduled: boolean
    workflowStepId: number
    _count: WorkflowReminderCountAggregateOutputType | null
    _avg: WorkflowReminderAvgAggregateOutputType | null
    _sum: WorkflowReminderSumAggregateOutputType | null
    _min: WorkflowReminderMinAggregateOutputType | null
    _max: WorkflowReminderMaxAggregateOutputType | null
  }

  type GetWorkflowReminderGroupByPayload<T extends WorkflowReminderGroupByArgs> = PrismaPromise<
    Array<
      PickArray<WorkflowReminderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowReminderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowReminderGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowReminderGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowReminderSelect = {
    id?: boolean
    bookingUid?: boolean
    booking?: boolean | BookingArgs
    method?: boolean
    scheduledDate?: boolean
    referenceId?: boolean
    scheduled?: boolean
    workflowStepId?: boolean
    workflowStep?: boolean | WorkflowStepArgs
  }

  export type WorkflowReminderInclude = {
    booking?: boolean | BookingArgs
    workflowStep?: boolean | WorkflowStepArgs
  }

  export type WorkflowReminderGetPayload<
    S extends boolean | null | undefined | WorkflowReminderArgs,
    U = keyof S
      > = S extends true
        ? WorkflowReminder
    : S extends undefined
    ? never
    : S extends WorkflowReminderArgs | WorkflowReminderFindManyArgs
    ?'include' extends U
    ? WorkflowReminder  & {
    [P in TrueKeys<S['include']>]:
        P extends 'booking' ? BookingGetPayload<S['include'][P]> | null :
        P extends 'workflowStep' ? WorkflowStepGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'booking' ? BookingGetPayload<S['select'][P]> | null :
        P extends 'workflowStep' ? WorkflowStepGetPayload<S['select'][P]> :  P extends keyof WorkflowReminder ? WorkflowReminder[P] : never
  } 
    : WorkflowReminder
  : WorkflowReminder


  type WorkflowReminderCountArgs = Merge<
    Omit<WorkflowReminderFindManyArgs, 'select' | 'include'> & {
      select?: WorkflowReminderCountAggregateInputType | true
    }
  >

  export interface WorkflowReminderDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one WorkflowReminder that matches the filter.
     * @param {WorkflowReminderFindUniqueArgs} args - Arguments to find a WorkflowReminder
     * @example
     * // Get one WorkflowReminder
     * const workflowReminder = await prisma.workflowReminder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkflowReminderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WorkflowReminderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WorkflowReminder'> extends True ? CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder>, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder | null >, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T> | null >>

    /**
     * Find the first WorkflowReminder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowReminderFindFirstArgs} args - Arguments to find a WorkflowReminder
     * @example
     * // Get one WorkflowReminder
     * const workflowReminder = await prisma.workflowReminder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkflowReminderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WorkflowReminderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WorkflowReminder'> extends True ? CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder>, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T>>> : CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder | null >, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T> | null >>

    /**
     * Find zero or more WorkflowReminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowReminderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowReminders
     * const workflowReminders = await prisma.workflowReminder.findMany()
     * 
     * // Get first 10 WorkflowReminders
     * const workflowReminders = await prisma.workflowReminder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowReminderWithIdOnly = await prisma.workflowReminder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkflowReminderFindManyArgs>(
      args?: SelectSubset<T, WorkflowReminderFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<WorkflowReminder>>, PrismaPromise<Array<WorkflowReminderGetPayload<T>>>>

    /**
     * Create a WorkflowReminder.
     * @param {WorkflowReminderCreateArgs} args - Arguments to create a WorkflowReminder.
     * @example
     * // Create one WorkflowReminder
     * const WorkflowReminder = await prisma.workflowReminder.create({
     *   data: {
     *     // ... data to create a WorkflowReminder
     *   }
     * })
     * 
    **/
    create<T extends WorkflowReminderCreateArgs>(
      args: SelectSubset<T, WorkflowReminderCreateArgs>
    ): CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder>, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T>>>

    /**
     * Create many WorkflowReminders.
     *     @param {WorkflowReminderCreateManyArgs} args - Arguments to create many WorkflowReminders.
     *     @example
     *     // Create many WorkflowReminders
     *     const workflowReminder = await prisma.workflowReminder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkflowReminderCreateManyArgs>(
      args?: SelectSubset<T, WorkflowReminderCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a WorkflowReminder.
     * @param {WorkflowReminderDeleteArgs} args - Arguments to delete one WorkflowReminder.
     * @example
     * // Delete one WorkflowReminder
     * const WorkflowReminder = await prisma.workflowReminder.delete({
     *   where: {
     *     // ... filter to delete one WorkflowReminder
     *   }
     * })
     * 
    **/
    delete<T extends WorkflowReminderDeleteArgs>(
      args: SelectSubset<T, WorkflowReminderDeleteArgs>
    ): CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder>, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T>>>

    /**
     * Update one WorkflowReminder.
     * @param {WorkflowReminderUpdateArgs} args - Arguments to update one WorkflowReminder.
     * @example
     * // Update one WorkflowReminder
     * const workflowReminder = await prisma.workflowReminder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkflowReminderUpdateArgs>(
      args: SelectSubset<T, WorkflowReminderUpdateArgs>
    ): CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder>, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T>>>

    /**
     * Delete zero or more WorkflowReminders.
     * @param {WorkflowReminderDeleteManyArgs} args - Arguments to filter WorkflowReminders to delete.
     * @example
     * // Delete a few WorkflowReminders
     * const { count } = await prisma.workflowReminder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkflowReminderDeleteManyArgs>(
      args?: SelectSubset<T, WorkflowReminderDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowReminderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowReminders
     * const workflowReminder = await prisma.workflowReminder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkflowReminderUpdateManyArgs>(
      args: SelectSubset<T, WorkflowReminderUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowReminder.
     * @param {WorkflowReminderUpsertArgs} args - Arguments to update or create a WorkflowReminder.
     * @example
     * // Update or create a WorkflowReminder
     * const workflowReminder = await prisma.workflowReminder.upsert({
     *   create: {
     *     // ... data to create a WorkflowReminder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowReminder we want to update
     *   }
     * })
    **/
    upsert<T extends WorkflowReminderUpsertArgs>(
      args: SelectSubset<T, WorkflowReminderUpsertArgs>
    ): CheckSelect<T, Prisma__WorkflowReminderClient<WorkflowReminder>, Prisma__WorkflowReminderClient<WorkflowReminderGetPayload<T>>>

    /**
     * Count the number of WorkflowReminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowReminderCountArgs} args - Arguments to filter WorkflowReminders to count.
     * @example
     * // Count the number of WorkflowReminders
     * const count = await prisma.workflowReminder.count({
     *   where: {
     *     // ... the filter for the WorkflowReminders we want to count
     *   }
     * })
    **/
    count<T extends WorkflowReminderCountArgs>(
      args?: Subset<T, WorkflowReminderCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowReminderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowReminderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowReminderAggregateArgs>(args: Subset<T, WorkflowReminderAggregateArgs>): PrismaPromise<GetWorkflowReminderAggregateType<T>>

    /**
     * Group by WorkflowReminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowReminderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowReminderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowReminderGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowReminderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowReminderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowReminderGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowReminder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WorkflowReminderClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    booking<T extends BookingArgs = {}>(args?: Subset<T, BookingArgs>): CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>;

    workflowStep<T extends WorkflowStepArgs = {}>(args?: Subset<T, WorkflowStepArgs>): CheckSelect<T, Prisma__WorkflowStepClient<WorkflowStep | null >, Prisma__WorkflowStepClient<WorkflowStepGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * WorkflowReminder findUnique
   */
  export type WorkflowReminderFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * Throw an Error if a WorkflowReminder can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WorkflowReminder to fetch.
     * 
    **/
    where: WorkflowReminderWhereUniqueInput
  }


  /**
   * WorkflowReminder findFirst
   */
  export type WorkflowReminderFindFirstArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * Throw an Error if a WorkflowReminder can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which WorkflowReminder to fetch.
     * 
    **/
    where?: WorkflowReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowReminders to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowReminderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowReminders.
     * 
    **/
    cursor?: WorkflowReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowReminders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowReminders.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowReminders.
     * 
    **/
    distinct?: Enumerable<WorkflowReminderScalarFieldEnum>
  }


  /**
   * WorkflowReminder findMany
   */
  export type WorkflowReminderFindManyArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * Filter, which WorkflowReminders to fetch.
     * 
    **/
    where?: WorkflowReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowReminders to fetch.
     * 
    **/
    orderBy?: Enumerable<WorkflowReminderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowReminders.
     * 
    **/
    cursor?: WorkflowReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowReminders from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowReminders.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WorkflowReminderScalarFieldEnum>
  }


  /**
   * WorkflowReminder create
   */
  export type WorkflowReminderCreateArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * The data needed to create a WorkflowReminder.
     * 
    **/
    data: XOR<WorkflowReminderCreateInput, WorkflowReminderUncheckedCreateInput>
  }


  /**
   * WorkflowReminder createMany
   */
  export type WorkflowReminderCreateManyArgs = {
    /**
     * The data used to create many WorkflowReminders.
     * 
    **/
    data: Enumerable<WorkflowReminderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WorkflowReminder update
   */
  export type WorkflowReminderUpdateArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * The data needed to update a WorkflowReminder.
     * 
    **/
    data: XOR<WorkflowReminderUpdateInput, WorkflowReminderUncheckedUpdateInput>
    /**
     * Choose, which WorkflowReminder to update.
     * 
    **/
    where: WorkflowReminderWhereUniqueInput
  }


  /**
   * WorkflowReminder updateMany
   */
  export type WorkflowReminderUpdateManyArgs = {
    /**
     * The data used to update WorkflowReminders.
     * 
    **/
    data: XOR<WorkflowReminderUpdateManyMutationInput, WorkflowReminderUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowReminders to update
     * 
    **/
    where?: WorkflowReminderWhereInput
  }


  /**
   * WorkflowReminder upsert
   */
  export type WorkflowReminderUpsertArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * The filter to search for the WorkflowReminder to update in case it exists.
     * 
    **/
    where: WorkflowReminderWhereUniqueInput
    /**
     * In case the WorkflowReminder found by the `where` argument doesn't exist, create a new WorkflowReminder with this data.
     * 
    **/
    create: XOR<WorkflowReminderCreateInput, WorkflowReminderUncheckedCreateInput>
    /**
     * In case the WorkflowReminder was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<WorkflowReminderUpdateInput, WorkflowReminderUncheckedUpdateInput>
  }


  /**
   * WorkflowReminder delete
   */
  export type WorkflowReminderDeleteArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
    /**
     * Filter which WorkflowReminder to delete.
     * 
    **/
    where: WorkflowReminderWhereUniqueInput
  }


  /**
   * WorkflowReminder deleteMany
   */
  export type WorkflowReminderDeleteManyArgs = {
    /**
     * Filter which WorkflowReminders to delete
     * 
    **/
    where?: WorkflowReminderWhereInput
  }


  /**
   * WorkflowReminder without action
   */
  export type WorkflowReminderArgs = {
    /**
     * Select specific fields to fetch from the WorkflowReminder
     * 
    **/
    select?: WorkflowReminderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: WorkflowReminderInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EventTypeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    position: 'position',
    locations: 'locations',
    length: 'length',
    hidden: 'hidden',
    userId: 'userId',
    teamId: 'teamId',
    eventName: 'eventName',
    timeZone: 'timeZone',
    periodType: 'periodType',
    periodStartDate: 'periodStartDate',
    periodEndDate: 'periodEndDate',
    periodDays: 'periodDays',
    periodCountCalendarDays: 'periodCountCalendarDays',
    requiresConfirmation: 'requiresConfirmation',
    recurringEvent: 'recurringEvent',
    disableGuests: 'disableGuests',
    hideCalendarNotes: 'hideCalendarNotes',
    minimumBookingNotice: 'minimumBookingNotice',
    beforeEventBuffer: 'beforeEventBuffer',
    afterEventBuffer: 'afterEventBuffer',
    seatsPerTimeSlot: 'seatsPerTimeSlot',
    schedulingType: 'schedulingType',
    scheduleId: 'scheduleId',
    price: 'price',
    currency: 'currency',
    slotInterval: 'slotInterval',
    metadata: 'metadata',
    successRedirectUrl: 'successRedirectUrl'
  };

  export type EventTypeScalarFieldEnum = (typeof EventTypeScalarFieldEnum)[keyof typeof EventTypeScalarFieldEnum]


  export const CredentialScalarFieldEnum: {
    id: 'id',
    type: 'type',
    key: 'key',
    userId: 'userId',
    appId: 'appId'
  };

  export type CredentialScalarFieldEnum = (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum]


  export const DestinationCalendarScalarFieldEnum: {
    id: 'id',
    integration: 'integration',
    externalId: 'externalId',
    userId: 'userId',
    eventTypeId: 'eventTypeId',
    credentialId: 'credentialId'
  };

  export type DestinationCalendarScalarFieldEnum = (typeof DestinationCalendarScalarFieldEnum)[keyof typeof DestinationCalendarScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    bio: 'bio',
    avatar: 'avatar',
    timeZone: 'timeZone',
    weekStart: 'weekStart',
    startTime: 'startTime',
    endTime: 'endTime',
    bufferTime: 'bufferTime',
    hideBranding: 'hideBranding',
    theme: 'theme',
    createdDate: 'createdDate',
    trialEndsAt: 'trialEndsAt',
    defaultScheduleId: 'defaultScheduleId',
    completedOnboarding: 'completedOnboarding',
    locale: 'locale',
    timeFormat: 'timeFormat',
    twoFactorSecret: 'twoFactorSecret',
    twoFactorEnabled: 'twoFactorEnabled',
    identityProvider: 'identityProvider',
    identityProviderId: 'identityProviderId',
    invitedTo: 'invitedTo',
    plan: 'plan',
    brandColor: 'brandColor',
    darkBrandColor: 'darkBrandColor',
    away: 'away',
    allowDynamicBooking: 'allowDynamicBooking',
    metadata: 'metadata',
    verified: 'verified',
    role: 'role',
    disableImpersonation: 'disableImpersonation',
    emailVerificationToken: 'emailVerificationToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    bio: 'bio',
    hideBranding: 'hideBranding'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const MembershipScalarFieldEnum: {
    teamId: 'teamId',
    userId: 'userId',
    accepted: 'accepted',
    role: 'role'
  };

  export type MembershipScalarFieldEnum = (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    token: 'token',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const BookingReferenceScalarFieldEnum: {
    id: 'id',
    type: 'type',
    uid: 'uid',
    meetingId: 'meetingId',
    meetingPassword: 'meetingPassword',
    meetingUrl: 'meetingUrl',
    bookingId: 'bookingId',
    externalCalendarId: 'externalCalendarId',
    deleted: 'deleted',
    credentialId: 'credentialId'
  };

  export type BookingReferenceScalarFieldEnum = (typeof BookingReferenceScalarFieldEnum)[keyof typeof BookingReferenceScalarFieldEnum]


  export const AttendeeScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    timeZone: 'timeZone',
    locale: 'locale',
    bookingId: 'bookingId'
  };

  export type AttendeeScalarFieldEnum = (typeof AttendeeScalarFieldEnum)[keyof typeof AttendeeScalarFieldEnum]


  export const DailyEventReferenceScalarFieldEnum: {
    id: 'id',
    dailyurl: 'dailyurl',
    dailytoken: 'dailytoken',
    bookingId: 'bookingId'
  };

  export type DailyEventReferenceScalarFieldEnum = (typeof DailyEventReferenceScalarFieldEnum)[keyof typeof DailyEventReferenceScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    userId: 'userId',
    eventTypeId: 'eventTypeId',
    title: 'title',
    description: 'description',
    customInputs: 'customInputs',
    startTime: 'startTime',
    endTime: 'endTime',
    location: 'location',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    paid: 'paid',
    destinationCalendarId: 'destinationCalendarId',
    cancellationReason: 'cancellationReason',
    rejectionReason: 'rejectionReason',
    dynamicEventSlugRef: 'dynamicEventSlugRef',
    dynamicGroupSlugRef: 'dynamicGroupSlugRef',
    rescheduled: 'rescheduled',
    fromReschedule: 'fromReschedule',
    recurringEventId: 'recurringEventId',
    smsReminderNumber: 'smsReminderNumber'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    timeZone: 'timeZone'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const AvailabilityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventTypeId: 'eventTypeId',
    days: 'days',
    startTime: 'startTime',
    endTime: 'endTime',
    date: 'date',
    scheduleId: 'scheduleId'
  };

  export type AvailabilityScalarFieldEnum = (typeof AvailabilityScalarFieldEnum)[keyof typeof AvailabilityScalarFieldEnum]


  export const SelectedCalendarScalarFieldEnum: {
    userId: 'userId',
    integration: 'integration',
    externalId: 'externalId'
  };

  export type SelectedCalendarScalarFieldEnum = (typeof SelectedCalendarScalarFieldEnum)[keyof typeof SelectedCalendarScalarFieldEnum]


  export const EventTypeCustomInputScalarFieldEnum: {
    id: 'id',
    eventTypeId: 'eventTypeId',
    label: 'label',
    type: 'type',
    required: 'required',
    placeholder: 'placeholder'
  };

  export type EventTypeCustomInputScalarFieldEnum = (typeof EventTypeCustomInputScalarFieldEnum)[keyof typeof EventTypeCustomInputScalarFieldEnum]


  export const ResetPasswordRequestScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    expires: 'expires'
  };

  export type ResetPasswordRequestScalarFieldEnum = (typeof ResetPasswordRequestScalarFieldEnum)[keyof typeof ResetPasswordRequestScalarFieldEnum]


  export const ReminderMailScalarFieldEnum: {
    id: 'id',
    referenceId: 'referenceId',
    reminderType: 'reminderType',
    elapsedMinutes: 'elapsedMinutes',
    createdAt: 'createdAt'
  };

  export type ReminderMailScalarFieldEnum = (typeof ReminderMailScalarFieldEnum)[keyof typeof ReminderMailScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    type: 'type',
    bookingId: 'bookingId',
    amount: 'amount',
    fee: 'fee',
    currency: 'currency',
    success: 'success',
    refunded: 'refunded',
    data: 'data',
    externalId: 'externalId'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const WebhookScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventTypeId: 'eventTypeId',
    subscriberUrl: 'subscriberUrl',
    payloadTemplate: 'payloadTemplate',
    createdAt: 'createdAt',
    active: 'active',
    eventTriggers: 'eventTriggers',
    appId: 'appId',
    secret: 'secret'
  };

  export type WebhookScalarFieldEnum = (typeof WebhookScalarFieldEnum)[keyof typeof WebhookScalarFieldEnum]


  export const ImpersonationsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    impersonatedUserId: 'impersonatedUserId',
    impersonatedById: 'impersonatedById'
  };

  export type ImpersonationsScalarFieldEnum = (typeof ImpersonationsScalarFieldEnum)[keyof typeof ImpersonationsScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    note: 'note',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    lastUsedAt: 'lastUsedAt',
    hashedKey: 'hashedKey',
    appId: 'appId'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const HashedLinkScalarFieldEnum: {
    id: 'id',
    link: 'link',
    eventTypeId: 'eventTypeId'
  };

  export type HashedLinkScalarFieldEnum = (typeof HashedLinkScalarFieldEnum)[keyof typeof HashedLinkScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AppScalarFieldEnum: {
    slug: 'slug',
    dirName: 'dirName',
    keys: 'keys',
    categories: 'categories',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppScalarFieldEnum = (typeof AppScalarFieldEnum)[keyof typeof AppScalarFieldEnum]


  export const App_RoutingForms_FormScalarFieldEnum: {
    id: 'id',
    description: 'description',
    routes: 'routes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    fields: 'fields',
    userId: 'userId',
    disabled: 'disabled'
  };

  export type App_RoutingForms_FormScalarFieldEnum = (typeof App_RoutingForms_FormScalarFieldEnum)[keyof typeof App_RoutingForms_FormScalarFieldEnum]


  export const App_RoutingForms_FormResponseScalarFieldEnum: {
    id: 'id',
    formFillerId: 'formFillerId',
    formId: 'formId',
    response: 'response'
  };

  export type App_RoutingForms_FormResponseScalarFieldEnum = (typeof App_RoutingForms_FormResponseScalarFieldEnum)[keyof typeof App_RoutingForms_FormResponseScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    date: 'date',
    userId: 'userId',
    rating: 'rating',
    comment: 'comment'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const WorkflowStepScalarFieldEnum: {
    id: 'id',
    stepNumber: 'stepNumber',
    action: 'action',
    workflowId: 'workflowId',
    sendTo: 'sendTo',
    reminderBody: 'reminderBody',
    emailSubject: 'emailSubject',
    template: 'template'
  };

  export type WorkflowStepScalarFieldEnum = (typeof WorkflowStepScalarFieldEnum)[keyof typeof WorkflowStepScalarFieldEnum]


  export const WorkflowScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    trigger: 'trigger',
    time: 'time',
    timeUnit: 'timeUnit'
  };

  export type WorkflowScalarFieldEnum = (typeof WorkflowScalarFieldEnum)[keyof typeof WorkflowScalarFieldEnum]


  export const WorkflowsOnEventTypesScalarFieldEnum: {
    id: 'id',
    workflowId: 'workflowId',
    eventTypeId: 'eventTypeId'
  };

  export type WorkflowsOnEventTypesScalarFieldEnum = (typeof WorkflowsOnEventTypesScalarFieldEnum)[keyof typeof WorkflowsOnEventTypesScalarFieldEnum]


  export const WorkflowReminderScalarFieldEnum: {
    id: 'id',
    bookingUid: 'bookingUid',
    method: 'method',
    scheduledDate: 'scheduledDate',
    referenceId: 'referenceId',
    scheduled: 'scheduled',
    workflowStepId: 'workflowStepId'
  };

  export type WorkflowReminderScalarFieldEnum = (typeof WorkflowReminderScalarFieldEnum)[keyof typeof WorkflowReminderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: 'JsonNull'
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type EventTypeWhereInput = {
    AND?: Enumerable<EventTypeWhereInput>
    OR?: Enumerable<EventTypeWhereInput>
    NOT?: Enumerable<EventTypeWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    slug?: StringFilter | string
    description?: StringNullableFilter | string | null
    position?: IntFilter | number
    locations?: JsonNullableFilter
    length?: IntFilter | number
    hidden?: BoolFilter | boolean
    users?: UserListRelationFilter
    userId?: IntNullableFilter | number | null
    team?: XOR<TeamRelationFilter, TeamWhereInput> | null
    teamId?: IntNullableFilter | number | null
    hashedLink?: XOR<HashedLinkRelationFilter, HashedLinkWhereInput> | null
    bookings?: BookingListRelationFilter
    availability?: AvailabilityListRelationFilter
    webhooks?: WebhookListRelationFilter
    destinationCalendar?: XOR<DestinationCalendarRelationFilter, DestinationCalendarWhereInput> | null
    eventName?: StringNullableFilter | string | null
    customInputs?: EventTypeCustomInputListRelationFilter
    timeZone?: StringNullableFilter | string | null
    periodType?: EnumPeriodTypeFilter | PeriodType
    periodStartDate?: DateTimeNullableFilter | Date | string | null
    periodEndDate?: DateTimeNullableFilter | Date | string | null
    periodDays?: IntNullableFilter | number | null
    periodCountCalendarDays?: BoolNullableFilter | boolean | null
    requiresConfirmation?: BoolFilter | boolean
    recurringEvent?: JsonNullableFilter
    disableGuests?: BoolFilter | boolean
    hideCalendarNotes?: BoolFilter | boolean
    minimumBookingNotice?: IntFilter | number
    beforeEventBuffer?: IntFilter | number
    afterEventBuffer?: IntFilter | number
    seatsPerTimeSlot?: IntNullableFilter | number | null
    schedulingType?: EnumSchedulingTypeNullableFilter | SchedulingType | null
    schedule?: XOR<ScheduleRelationFilter, ScheduleWhereInput> | null
    scheduleId?: IntNullableFilter | number | null
    price?: IntFilter | number
    currency?: StringFilter | string
    slotInterval?: IntNullableFilter | number | null
    metadata?: JsonNullableFilter
    successRedirectUrl?: StringNullableFilter | string | null
    workflows?: WorkflowsOnEventTypesListRelationFilter
  }

  export type EventTypeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    position?: SortOrder
    locations?: SortOrder
    length?: SortOrder
    hidden?: SortOrder
    users?: UserOrderByRelationAggregateInput
    userId?: SortOrder
    team?: TeamOrderByWithRelationInput
    teamId?: SortOrder
    hashedLink?: HashedLinkOrderByWithRelationInput
    bookings?: BookingOrderByRelationAggregateInput
    availability?: AvailabilityOrderByRelationAggregateInput
    webhooks?: WebhookOrderByRelationAggregateInput
    destinationCalendar?: DestinationCalendarOrderByWithRelationInput
    eventName?: SortOrder
    customInputs?: EventTypeCustomInputOrderByRelationAggregateInput
    timeZone?: SortOrder
    periodType?: SortOrder
    periodStartDate?: SortOrder
    periodEndDate?: SortOrder
    periodDays?: SortOrder
    periodCountCalendarDays?: SortOrder
    requiresConfirmation?: SortOrder
    recurringEvent?: SortOrder
    disableGuests?: SortOrder
    hideCalendarNotes?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    schedulingType?: SortOrder
    schedule?: ScheduleOrderByWithRelationInput
    scheduleId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    slotInterval?: SortOrder
    metadata?: SortOrder
    successRedirectUrl?: SortOrder
    workflows?: WorkflowsOnEventTypesOrderByRelationAggregateInput
  }

  export type EventTypeWhereUniqueInput = {
    id?: number
    userId_slug?: EventTypeUserIdSlugCompoundUniqueInput
    teamId_slug?: EventTypeTeamIdSlugCompoundUniqueInput
  }

  export type EventTypeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    position?: SortOrder
    locations?: SortOrder
    length?: SortOrder
    hidden?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    eventName?: SortOrder
    timeZone?: SortOrder
    periodType?: SortOrder
    periodStartDate?: SortOrder
    periodEndDate?: SortOrder
    periodDays?: SortOrder
    periodCountCalendarDays?: SortOrder
    requiresConfirmation?: SortOrder
    recurringEvent?: SortOrder
    disableGuests?: SortOrder
    hideCalendarNotes?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    schedulingType?: SortOrder
    scheduleId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    slotInterval?: SortOrder
    metadata?: SortOrder
    successRedirectUrl?: SortOrder
    _count?: EventTypeCountOrderByAggregateInput
    _avg?: EventTypeAvgOrderByAggregateInput
    _max?: EventTypeMaxOrderByAggregateInput
    _min?: EventTypeMinOrderByAggregateInput
    _sum?: EventTypeSumOrderByAggregateInput
  }

  export type EventTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    position?: IntWithAggregatesFilter | number
    locations?: JsonNullableWithAggregatesFilter
    length?: IntWithAggregatesFilter | number
    hidden?: BoolWithAggregatesFilter | boolean
    userId?: IntNullableWithAggregatesFilter | number | null
    teamId?: IntNullableWithAggregatesFilter | number | null
    eventName?: StringNullableWithAggregatesFilter | string | null
    timeZone?: StringNullableWithAggregatesFilter | string | null
    periodType?: EnumPeriodTypeWithAggregatesFilter | PeriodType
    periodStartDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    periodEndDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    periodDays?: IntNullableWithAggregatesFilter | number | null
    periodCountCalendarDays?: BoolNullableWithAggregatesFilter | boolean | null
    requiresConfirmation?: BoolWithAggregatesFilter | boolean
    recurringEvent?: JsonNullableWithAggregatesFilter
    disableGuests?: BoolWithAggregatesFilter | boolean
    hideCalendarNotes?: BoolWithAggregatesFilter | boolean
    minimumBookingNotice?: IntWithAggregatesFilter | number
    beforeEventBuffer?: IntWithAggregatesFilter | number
    afterEventBuffer?: IntWithAggregatesFilter | number
    seatsPerTimeSlot?: IntNullableWithAggregatesFilter | number | null
    schedulingType?: EnumSchedulingTypeNullableWithAggregatesFilter | SchedulingType | null
    scheduleId?: IntNullableWithAggregatesFilter | number | null
    price?: IntWithAggregatesFilter | number
    currency?: StringWithAggregatesFilter | string
    slotInterval?: IntNullableWithAggregatesFilter | number | null
    metadata?: JsonNullableWithAggregatesFilter
    successRedirectUrl?: StringNullableWithAggregatesFilter | string | null
  }

  export type CredentialWhereInput = {
    AND?: Enumerable<CredentialWhereInput>
    OR?: Enumerable<CredentialWhereInput>
    NOT?: Enumerable<CredentialWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    key?: JsonFilter
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    app?: XOR<AppRelationFilter, AppWhereInput> | null
    appId?: StringNullableFilter | string | null
    destinationCalendars?: DestinationCalendarListRelationFilter
  }

  export type CredentialOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    key?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    app?: AppOrderByWithRelationInput
    appId?: SortOrder
    destinationCalendars?: DestinationCalendarOrderByRelationAggregateInput
  }

  export type CredentialWhereUniqueInput = {
    id?: number
  }

  export type CredentialOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    appId?: SortOrder
    _count?: CredentialCountOrderByAggregateInput
    _avg?: CredentialAvgOrderByAggregateInput
    _max?: CredentialMaxOrderByAggregateInput
    _min?: CredentialMinOrderByAggregateInput
    _sum?: CredentialSumOrderByAggregateInput
  }

  export type CredentialScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CredentialScalarWhereWithAggregatesInput>
    OR?: Enumerable<CredentialScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CredentialScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    key?: JsonWithAggregatesFilter
    userId?: IntNullableWithAggregatesFilter | number | null
    appId?: StringNullableWithAggregatesFilter | string | null
  }

  export type DestinationCalendarWhereInput = {
    AND?: Enumerable<DestinationCalendarWhereInput>
    OR?: Enumerable<DestinationCalendarWhereInput>
    NOT?: Enumerable<DestinationCalendarWhereInput>
    id?: IntFilter | number
    integration?: StringFilter | string
    externalId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    booking?: BookingListRelationFilter
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput> | null
    eventTypeId?: IntNullableFilter | number | null
    credentialId?: IntNullableFilter | number | null
    credential?: XOR<CredentialRelationFilter, CredentialWhereInput> | null
  }

  export type DestinationCalendarOrderByWithRelationInput = {
    id?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    booking?: BookingOrderByRelationAggregateInput
    eventType?: EventTypeOrderByWithRelationInput
    eventTypeId?: SortOrder
    credentialId?: SortOrder
    credential?: CredentialOrderByWithRelationInput
  }

  export type DestinationCalendarWhereUniqueInput = {
    id?: number
    userId?: number
    eventTypeId?: number
  }

  export type DestinationCalendarOrderByWithAggregationInput = {
    id?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    credentialId?: SortOrder
    _count?: DestinationCalendarCountOrderByAggregateInput
    _avg?: DestinationCalendarAvgOrderByAggregateInput
    _max?: DestinationCalendarMaxOrderByAggregateInput
    _min?: DestinationCalendarMinOrderByAggregateInput
    _sum?: DestinationCalendarSumOrderByAggregateInput
  }

  export type DestinationCalendarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DestinationCalendarScalarWhereWithAggregatesInput>
    OR?: Enumerable<DestinationCalendarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DestinationCalendarScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    integration?: StringWithAggregatesFilter | string
    externalId?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
    eventTypeId?: IntNullableWithAggregatesFilter | number | null
    credentialId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    email?: StringFilter | string
    emailVerified?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    bio?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    timeZone?: StringFilter | string
    weekStart?: StringFilter | string
    startTime?: IntFilter | number
    endTime?: IntFilter | number
    bufferTime?: IntFilter | number
    hideBranding?: BoolFilter | boolean
    theme?: StringNullableFilter | string | null
    createdDate?: DateTimeFilter | Date | string
    trialEndsAt?: DateTimeNullableFilter | Date | string | null
    eventTypes?: EventTypeListRelationFilter
    credentials?: CredentialListRelationFilter
    teams?: MembershipListRelationFilter
    bookings?: BookingListRelationFilter
    schedules?: ScheduleListRelationFilter
    defaultScheduleId?: IntNullableFilter | number | null
    selectedCalendars?: SelectedCalendarListRelationFilter
    completedOnboarding?: BoolFilter | boolean
    locale?: StringNullableFilter | string | null
    timeFormat?: IntNullableFilter | number | null
    twoFactorSecret?: StringNullableFilter | string | null
    twoFactorEnabled?: BoolFilter | boolean
    identityProvider?: EnumIdentityProviderFilter | IdentityProvider
    identityProviderId?: StringNullableFilter | string | null
    availability?: AvailabilityListRelationFilter
    invitedTo?: IntNullableFilter | number | null
    plan?: EnumUserPlanFilter | UserPlan
    webhooks?: WebhookListRelationFilter
    brandColor?: StringFilter | string
    darkBrandColor?: StringFilter | string
    destinationCalendar?: XOR<DestinationCalendarRelationFilter, DestinationCalendarWhereInput> | null
    away?: BoolFilter | boolean
    allowDynamicBooking?: BoolNullableFilter | boolean | null
    metadata?: JsonNullableFilter
    verified?: BoolNullableFilter | boolean | null
    role?: EnumUserPermissionRoleFilter | UserPermissionRole
    disableImpersonation?: BoolFilter | boolean
    impersonatedUsers?: ImpersonationsListRelationFilter
    impersonatedBy?: ImpersonationsListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    workflows?: WorkflowListRelationFilter
    routingForms?: App_RoutingForms_FormListRelationFilter
    Feedback?: FeedbackListRelationFilter
    emailVerificationToken?: StringNullableFilter | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    timeZone?: SortOrder
    weekStart?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    hideBranding?: SortOrder
    theme?: SortOrder
    createdDate?: SortOrder
    trialEndsAt?: SortOrder
    eventTypes?: EventTypeOrderByRelationAggregateInput
    credentials?: CredentialOrderByRelationAggregateInput
    teams?: MembershipOrderByRelationAggregateInput
    bookings?: BookingOrderByRelationAggregateInput
    schedules?: ScheduleOrderByRelationAggregateInput
    defaultScheduleId?: SortOrder
    selectedCalendars?: SelectedCalendarOrderByRelationAggregateInput
    completedOnboarding?: SortOrder
    locale?: SortOrder
    timeFormat?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    identityProvider?: SortOrder
    identityProviderId?: SortOrder
    availability?: AvailabilityOrderByRelationAggregateInput
    invitedTo?: SortOrder
    plan?: SortOrder
    webhooks?: WebhookOrderByRelationAggregateInput
    brandColor?: SortOrder
    darkBrandColor?: SortOrder
    destinationCalendar?: DestinationCalendarOrderByWithRelationInput
    away?: SortOrder
    allowDynamicBooking?: SortOrder
    metadata?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    disableImpersonation?: SortOrder
    impersonatedUsers?: ImpersonationsOrderByRelationAggregateInput
    impersonatedBy?: ImpersonationsOrderByRelationAggregateInput
    apiKeys?: ApiKeyOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    workflows?: WorkflowOrderByRelationAggregateInput
    routingForms?: App_RoutingForms_FormOrderByRelationAggregateInput
    Feedback?: FeedbackOrderByRelationAggregateInput
    emailVerificationToken?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    timeZone?: SortOrder
    weekStart?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    hideBranding?: SortOrder
    theme?: SortOrder
    createdDate?: SortOrder
    trialEndsAt?: SortOrder
    defaultScheduleId?: SortOrder
    completedOnboarding?: SortOrder
    locale?: SortOrder
    timeFormat?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    identityProvider?: SortOrder
    identityProviderId?: SortOrder
    invitedTo?: SortOrder
    plan?: SortOrder
    brandColor?: SortOrder
    darkBrandColor?: SortOrder
    away?: SortOrder
    allowDynamicBooking?: SortOrder
    metadata?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    disableImpersonation?: SortOrder
    emailVerificationToken?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringNullableWithAggregatesFilter | string | null
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    bio?: StringNullableWithAggregatesFilter | string | null
    avatar?: StringNullableWithAggregatesFilter | string | null
    timeZone?: StringWithAggregatesFilter | string
    weekStart?: StringWithAggregatesFilter | string
    startTime?: IntWithAggregatesFilter | number
    endTime?: IntWithAggregatesFilter | number
    bufferTime?: IntWithAggregatesFilter | number
    hideBranding?: BoolWithAggregatesFilter | boolean
    theme?: StringNullableWithAggregatesFilter | string | null
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    trialEndsAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    defaultScheduleId?: IntNullableWithAggregatesFilter | number | null
    completedOnboarding?: BoolWithAggregatesFilter | boolean
    locale?: StringNullableWithAggregatesFilter | string | null
    timeFormat?: IntNullableWithAggregatesFilter | number | null
    twoFactorSecret?: StringNullableWithAggregatesFilter | string | null
    twoFactorEnabled?: BoolWithAggregatesFilter | boolean
    identityProvider?: EnumIdentityProviderWithAggregatesFilter | IdentityProvider
    identityProviderId?: StringNullableWithAggregatesFilter | string | null
    invitedTo?: IntNullableWithAggregatesFilter | number | null
    plan?: EnumUserPlanWithAggregatesFilter | UserPlan
    brandColor?: StringWithAggregatesFilter | string
    darkBrandColor?: StringWithAggregatesFilter | string
    away?: BoolWithAggregatesFilter | boolean
    allowDynamicBooking?: BoolNullableWithAggregatesFilter | boolean | null
    metadata?: JsonNullableWithAggregatesFilter
    verified?: BoolNullableWithAggregatesFilter | boolean | null
    role?: EnumUserPermissionRoleWithAggregatesFilter | UserPermissionRole
    disableImpersonation?: BoolWithAggregatesFilter | boolean
    emailVerificationToken?: StringNullableWithAggregatesFilter | string | null
  }

  export type TeamWhereInput = {
    AND?: Enumerable<TeamWhereInput>
    OR?: Enumerable<TeamWhereInput>
    NOT?: Enumerable<TeamWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    slug?: StringNullableFilter | string | null
    logo?: StringNullableFilter | string | null
    bio?: StringNullableFilter | string | null
    hideBranding?: BoolFilter | boolean
    members?: MembershipListRelationFilter
    eventTypes?: EventTypeListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    bio?: SortOrder
    hideBranding?: SortOrder
    members?: MembershipOrderByRelationAggregateInput
    eventTypes?: EventTypeOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    bio?: SortOrder
    hideBranding?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    slug?: StringNullableWithAggregatesFilter | string | null
    logo?: StringNullableWithAggregatesFilter | string | null
    bio?: StringNullableWithAggregatesFilter | string | null
    hideBranding?: BoolWithAggregatesFilter | boolean
  }

  export type MembershipWhereInput = {
    AND?: Enumerable<MembershipWhereInput>
    OR?: Enumerable<MembershipWhereInput>
    NOT?: Enumerable<MembershipWhereInput>
    teamId?: IntFilter | number
    userId?: IntFilter | number
    accepted?: BoolFilter | boolean
    role?: EnumMembershipRoleFilter | MembershipRole
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MembershipOrderByWithRelationInput = {
    teamId?: SortOrder
    userId?: SortOrder
    accepted?: SortOrder
    role?: SortOrder
    team?: TeamOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MembershipWhereUniqueInput = {
    userId_teamId?: MembershipUserIdTeamIdCompoundUniqueInput
  }

  export type MembershipOrderByWithAggregationInput = {
    teamId?: SortOrder
    userId?: SortOrder
    accepted?: SortOrder
    role?: SortOrder
    _count?: MembershipCountOrderByAggregateInput
    _avg?: MembershipAvgOrderByAggregateInput
    _max?: MembershipMaxOrderByAggregateInput
    _min?: MembershipMinOrderByAggregateInput
    _sum?: MembershipSumOrderByAggregateInput
  }

  export type MembershipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    OR?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    teamId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    accepted?: BoolWithAggregatesFilter | boolean
    role?: EnumMembershipRoleWithAggregatesFilter | MembershipRole
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    id?: IntFilter | number
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = {
    id?: number
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type VerificationTokenOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _avg?: VerificationTokenAvgOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
    _sum?: VerificationTokenSumOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BookingReferenceWhereInput = {
    AND?: Enumerable<BookingReferenceWhereInput>
    OR?: Enumerable<BookingReferenceWhereInput>
    NOT?: Enumerable<BookingReferenceWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    uid?: StringFilter | string
    meetingId?: StringNullableFilter | string | null
    meetingPassword?: StringNullableFilter | string | null
    meetingUrl?: StringNullableFilter | string | null
    booking?: XOR<BookingRelationFilter, BookingWhereInput> | null
    bookingId?: IntNullableFilter | number | null
    externalCalendarId?: StringNullableFilter | string | null
    deleted?: BoolNullableFilter | boolean | null
    credentialId?: IntNullableFilter | number | null
  }

  export type BookingReferenceOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    uid?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    meetingUrl?: SortOrder
    booking?: BookingOrderByWithRelationInput
    bookingId?: SortOrder
    externalCalendarId?: SortOrder
    deleted?: SortOrder
    credentialId?: SortOrder
  }

  export type BookingReferenceWhereUniqueInput = {
    id?: number
  }

  export type BookingReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    uid?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    meetingUrl?: SortOrder
    bookingId?: SortOrder
    externalCalendarId?: SortOrder
    deleted?: SortOrder
    credentialId?: SortOrder
    _count?: BookingReferenceCountOrderByAggregateInput
    _avg?: BookingReferenceAvgOrderByAggregateInput
    _max?: BookingReferenceMaxOrderByAggregateInput
    _min?: BookingReferenceMinOrderByAggregateInput
    _sum?: BookingReferenceSumOrderByAggregateInput
  }

  export type BookingReferenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookingReferenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookingReferenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookingReferenceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    meetingId?: StringNullableWithAggregatesFilter | string | null
    meetingPassword?: StringNullableWithAggregatesFilter | string | null
    meetingUrl?: StringNullableWithAggregatesFilter | string | null
    bookingId?: IntNullableWithAggregatesFilter | number | null
    externalCalendarId?: StringNullableWithAggregatesFilter | string | null
    deleted?: BoolNullableWithAggregatesFilter | boolean | null
    credentialId?: IntNullableWithAggregatesFilter | number | null
  }

  export type AttendeeWhereInput = {
    AND?: Enumerable<AttendeeWhereInput>
    OR?: Enumerable<AttendeeWhereInput>
    NOT?: Enumerable<AttendeeWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    timeZone?: StringFilter | string
    locale?: StringNullableFilter | string | null
    booking?: XOR<BookingRelationFilter, BookingWhereInput> | null
    bookingId?: IntNullableFilter | number | null
  }

  export type AttendeeOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
    locale?: SortOrder
    booking?: BookingOrderByWithRelationInput
    bookingId?: SortOrder
  }

  export type AttendeeWhereUniqueInput = {
    id?: number
  }

  export type AttendeeOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
    locale?: SortOrder
    bookingId?: SortOrder
    _count?: AttendeeCountOrderByAggregateInput
    _avg?: AttendeeAvgOrderByAggregateInput
    _max?: AttendeeMaxOrderByAggregateInput
    _min?: AttendeeMinOrderByAggregateInput
    _sum?: AttendeeSumOrderByAggregateInput
  }

  export type AttendeeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AttendeeScalarWhereWithAggregatesInput>
    OR?: Enumerable<AttendeeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AttendeeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    timeZone?: StringWithAggregatesFilter | string
    locale?: StringNullableWithAggregatesFilter | string | null
    bookingId?: IntNullableWithAggregatesFilter | number | null
  }

  export type DailyEventReferenceWhereInput = {
    AND?: Enumerable<DailyEventReferenceWhereInput>
    OR?: Enumerable<DailyEventReferenceWhereInput>
    NOT?: Enumerable<DailyEventReferenceWhereInput>
    id?: IntFilter | number
    dailyurl?: StringFilter | string
    dailytoken?: StringFilter | string
    booking?: XOR<BookingRelationFilter, BookingWhereInput> | null
    bookingId?: IntNullableFilter | number | null
  }

  export type DailyEventReferenceOrderByWithRelationInput = {
    id?: SortOrder
    dailyurl?: SortOrder
    dailytoken?: SortOrder
    booking?: BookingOrderByWithRelationInput
    bookingId?: SortOrder
  }

  export type DailyEventReferenceWhereUniqueInput = {
    id?: number
    bookingId?: number
  }

  export type DailyEventReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    dailyurl?: SortOrder
    dailytoken?: SortOrder
    bookingId?: SortOrder
    _count?: DailyEventReferenceCountOrderByAggregateInput
    _avg?: DailyEventReferenceAvgOrderByAggregateInput
    _max?: DailyEventReferenceMaxOrderByAggregateInput
    _min?: DailyEventReferenceMinOrderByAggregateInput
    _sum?: DailyEventReferenceSumOrderByAggregateInput
  }

  export type DailyEventReferenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DailyEventReferenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<DailyEventReferenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DailyEventReferenceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    dailyurl?: StringWithAggregatesFilter | string
    dailytoken?: StringWithAggregatesFilter | string
    bookingId?: IntNullableWithAggregatesFilter | number | null
  }

  export type BookingWhereInput = {
    AND?: Enumerable<BookingWhereInput>
    OR?: Enumerable<BookingWhereInput>
    NOT?: Enumerable<BookingWhereInput>
    id?: IntFilter | number
    uid?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    references?: BookingReferenceListRelationFilter
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput> | null
    eventTypeId?: IntNullableFilter | number | null
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    customInputs?: JsonNullableFilter
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    attendees?: AttendeeListRelationFilter
    location?: StringNullableFilter | string | null
    dailyRef?: XOR<DailyEventReferenceRelationFilter, DailyEventReferenceWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
    status?: EnumBookingStatusFilter | BookingStatus
    paid?: BoolFilter | boolean
    payment?: PaymentListRelationFilter
    destinationCalendar?: XOR<DestinationCalendarRelationFilter, DestinationCalendarWhereInput> | null
    destinationCalendarId?: IntNullableFilter | number | null
    cancellationReason?: StringNullableFilter | string | null
    rejectionReason?: StringNullableFilter | string | null
    dynamicEventSlugRef?: StringNullableFilter | string | null
    dynamicGroupSlugRef?: StringNullableFilter | string | null
    rescheduled?: BoolNullableFilter | boolean | null
    fromReschedule?: StringNullableFilter | string | null
    recurringEventId?: StringNullableFilter | string | null
    smsReminderNumber?: StringNullableFilter | string | null
    workflowReminders?: WorkflowReminderListRelationFilter
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    references?: BookingReferenceOrderByRelationAggregateInput
    eventType?: EventTypeOrderByWithRelationInput
    eventTypeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customInputs?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    attendees?: AttendeeOrderByRelationAggregateInput
    location?: SortOrder
    dailyRef?: DailyEventReferenceOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    paid?: SortOrder
    payment?: PaymentOrderByRelationAggregateInput
    destinationCalendar?: DestinationCalendarOrderByWithRelationInput
    destinationCalendarId?: SortOrder
    cancellationReason?: SortOrder
    rejectionReason?: SortOrder
    dynamicEventSlugRef?: SortOrder
    dynamicGroupSlugRef?: SortOrder
    rescheduled?: SortOrder
    fromReschedule?: SortOrder
    recurringEventId?: SortOrder
    smsReminderNumber?: SortOrder
    workflowReminders?: WorkflowReminderOrderByRelationAggregateInput
  }

  export type BookingWhereUniqueInput = {
    id?: number
    uid?: string
  }

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customInputs?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    paid?: SortOrder
    destinationCalendarId?: SortOrder
    cancellationReason?: SortOrder
    rejectionReason?: SortOrder
    dynamicEventSlugRef?: SortOrder
    dynamicGroupSlugRef?: SortOrder
    rescheduled?: SortOrder
    fromReschedule?: SortOrder
    recurringEventId?: SortOrder
    smsReminderNumber?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    uid?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
    eventTypeId?: IntNullableWithAggregatesFilter | number | null
    title?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    customInputs?: JsonNullableWithAggregatesFilter
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    location?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    status?: EnumBookingStatusWithAggregatesFilter | BookingStatus
    paid?: BoolWithAggregatesFilter | boolean
    destinationCalendarId?: IntNullableWithAggregatesFilter | number | null
    cancellationReason?: StringNullableWithAggregatesFilter | string | null
    rejectionReason?: StringNullableWithAggregatesFilter | string | null
    dynamicEventSlugRef?: StringNullableWithAggregatesFilter | string | null
    dynamicGroupSlugRef?: StringNullableWithAggregatesFilter | string | null
    rescheduled?: BoolNullableWithAggregatesFilter | boolean | null
    fromReschedule?: StringNullableWithAggregatesFilter | string | null
    recurringEventId?: StringNullableWithAggregatesFilter | string | null
    smsReminderNumber?: StringNullableWithAggregatesFilter | string | null
  }

  export type ScheduleWhereInput = {
    AND?: Enumerable<ScheduleWhereInput>
    OR?: Enumerable<ScheduleWhereInput>
    NOT?: Enumerable<ScheduleWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    eventType?: EventTypeListRelationFilter
    name?: StringFilter | string
    timeZone?: StringNullableFilter | string | null
    availability?: AvailabilityListRelationFilter
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    eventType?: EventTypeOrderByRelationAggregateInput
    name?: SortOrder
    timeZone?: SortOrder
    availability?: AvailabilityOrderByRelationAggregateInput
  }

  export type ScheduleWhereUniqueInput = {
    id?: number
  }

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ScheduleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ScheduleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ScheduleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    timeZone?: StringNullableWithAggregatesFilter | string | null
  }

  export type AvailabilityWhereInput = {
    AND?: Enumerable<AvailabilityWhereInput>
    OR?: Enumerable<AvailabilityWhereInput>
    NOT?: Enumerable<AvailabilityWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    userId?: IntNullableFilter | number | null
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput> | null
    eventTypeId?: IntNullableFilter | number | null
    days?: IntNullableListFilter
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    date?: DateTimeNullableFilter | Date | string | null
    Schedule?: XOR<ScheduleRelationFilter, ScheduleWhereInput> | null
    scheduleId?: IntNullableFilter | number | null
  }

  export type AvailabilityOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    eventType?: EventTypeOrderByWithRelationInput
    eventTypeId?: SortOrder
    days?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    date?: SortOrder
    Schedule?: ScheduleOrderByWithRelationInput
    scheduleId?: SortOrder
  }

  export type AvailabilityWhereUniqueInput = {
    id?: number
  }

  export type AvailabilityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    days?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    date?: SortOrder
    scheduleId?: SortOrder
    _count?: AvailabilityCountOrderByAggregateInput
    _avg?: AvailabilityAvgOrderByAggregateInput
    _max?: AvailabilityMaxOrderByAggregateInput
    _min?: AvailabilityMinOrderByAggregateInput
    _sum?: AvailabilitySumOrderByAggregateInput
  }

  export type AvailabilityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AvailabilityScalarWhereWithAggregatesInput>
    OR?: Enumerable<AvailabilityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AvailabilityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntNullableWithAggregatesFilter | number | null
    eventTypeId?: IntNullableWithAggregatesFilter | number | null
    days?: IntNullableListFilter
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    scheduleId?: IntNullableWithAggregatesFilter | number | null
  }

  export type SelectedCalendarWhereInput = {
    AND?: Enumerable<SelectedCalendarWhereInput>
    OR?: Enumerable<SelectedCalendarWhereInput>
    NOT?: Enumerable<SelectedCalendarWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    integration?: StringFilter | string
    externalId?: StringFilter | string
  }

  export type SelectedCalendarOrderByWithRelationInput = {
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
  }

  export type SelectedCalendarWhereUniqueInput = {
    userId_integration_externalId?: SelectedCalendarUserIdIntegrationExternalIdCompoundUniqueInput
  }

  export type SelectedCalendarOrderByWithAggregationInput = {
    userId?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
    _count?: SelectedCalendarCountOrderByAggregateInput
    _avg?: SelectedCalendarAvgOrderByAggregateInput
    _max?: SelectedCalendarMaxOrderByAggregateInput
    _min?: SelectedCalendarMinOrderByAggregateInput
    _sum?: SelectedCalendarSumOrderByAggregateInput
  }

  export type SelectedCalendarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SelectedCalendarScalarWhereWithAggregatesInput>
    OR?: Enumerable<SelectedCalendarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SelectedCalendarScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    integration?: StringWithAggregatesFilter | string
    externalId?: StringWithAggregatesFilter | string
  }

  export type EventTypeCustomInputWhereInput = {
    AND?: Enumerable<EventTypeCustomInputWhereInput>
    OR?: Enumerable<EventTypeCustomInputWhereInput>
    NOT?: Enumerable<EventTypeCustomInputWhereInput>
    id?: IntFilter | number
    eventTypeId?: IntFilter | number
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput>
    label?: StringFilter | string
    type?: EnumEventTypeCustomInputTypeFilter | EventTypeCustomInputType
    required?: BoolFilter | boolean
    placeholder?: StringFilter | string
  }

  export type EventTypeCustomInputOrderByWithRelationInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
    eventType?: EventTypeOrderByWithRelationInput
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    placeholder?: SortOrder
  }

  export type EventTypeCustomInputWhereUniqueInput = {
    id?: number
  }

  export type EventTypeCustomInputOrderByWithAggregationInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    placeholder?: SortOrder
    _count?: EventTypeCustomInputCountOrderByAggregateInput
    _avg?: EventTypeCustomInputAvgOrderByAggregateInput
    _max?: EventTypeCustomInputMaxOrderByAggregateInput
    _min?: EventTypeCustomInputMinOrderByAggregateInput
    _sum?: EventTypeCustomInputSumOrderByAggregateInput
  }

  export type EventTypeCustomInputScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventTypeCustomInputScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventTypeCustomInputScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventTypeCustomInputScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    eventTypeId?: IntWithAggregatesFilter | number
    label?: StringWithAggregatesFilter | string
    type?: EnumEventTypeCustomInputTypeWithAggregatesFilter | EventTypeCustomInputType
    required?: BoolWithAggregatesFilter | boolean
    placeholder?: StringWithAggregatesFilter | string
  }

  export type ResetPasswordRequestWhereInput = {
    AND?: Enumerable<ResetPasswordRequestWhereInput>
    OR?: Enumerable<ResetPasswordRequestWhereInput>
    NOT?: Enumerable<ResetPasswordRequestWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    email?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type ResetPasswordRequestOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    expires?: SortOrder
  }

  export type ResetPasswordRequestWhereUniqueInput = {
    id?: string
  }

  export type ResetPasswordRequestOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    expires?: SortOrder
    _count?: ResetPasswordRequestCountOrderByAggregateInput
    _max?: ResetPasswordRequestMaxOrderByAggregateInput
    _min?: ResetPasswordRequestMinOrderByAggregateInput
  }

  export type ResetPasswordRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResetPasswordRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResetPasswordRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResetPasswordRequestScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReminderMailWhereInput = {
    AND?: Enumerable<ReminderMailWhereInput>
    OR?: Enumerable<ReminderMailWhereInput>
    NOT?: Enumerable<ReminderMailWhereInput>
    id?: IntFilter | number
    referenceId?: IntFilter | number
    reminderType?: EnumReminderTypeFilter | ReminderType
    elapsedMinutes?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type ReminderMailOrderByWithRelationInput = {
    id?: SortOrder
    referenceId?: SortOrder
    reminderType?: SortOrder
    elapsedMinutes?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderMailWhereUniqueInput = {
    id?: number
  }

  export type ReminderMailOrderByWithAggregationInput = {
    id?: SortOrder
    referenceId?: SortOrder
    reminderType?: SortOrder
    elapsedMinutes?: SortOrder
    createdAt?: SortOrder
    _count?: ReminderMailCountOrderByAggregateInput
    _avg?: ReminderMailAvgOrderByAggregateInput
    _max?: ReminderMailMaxOrderByAggregateInput
    _min?: ReminderMailMinOrderByAggregateInput
    _sum?: ReminderMailSumOrderByAggregateInput
  }

  export type ReminderMailScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReminderMailScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReminderMailScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReminderMailScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    referenceId?: IntWithAggregatesFilter | number
    reminderType?: EnumReminderTypeWithAggregatesFilter | ReminderType
    elapsedMinutes?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PaymentWhereInput = {
    AND?: Enumerable<PaymentWhereInput>
    OR?: Enumerable<PaymentWhereInput>
    NOT?: Enumerable<PaymentWhereInput>
    id?: IntFilter | number
    uid?: StringFilter | string
    type?: EnumPaymentTypeFilter | PaymentType
    bookingId?: IntFilter | number
    booking?: XOR<BookingRelationFilter, BookingWhereInput> | null
    amount?: IntFilter | number
    fee?: IntFilter | number
    currency?: StringFilter | string
    success?: BoolFilter | boolean
    refunded?: BoolFilter | boolean
    data?: JsonFilter
    externalId?: StringFilter | string
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    bookingId?: SortOrder
    booking?: BookingOrderByWithRelationInput
    amount?: SortOrder
    fee?: SortOrder
    currency?: SortOrder
    success?: SortOrder
    refunded?: SortOrder
    data?: SortOrder
    externalId?: SortOrder
  }

  export type PaymentWhereUniqueInput = {
    id?: number
    uid?: string
    externalId?: string
  }

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    fee?: SortOrder
    currency?: SortOrder
    success?: SortOrder
    refunded?: SortOrder
    data?: SortOrder
    externalId?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    OR?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    uid?: StringWithAggregatesFilter | string
    type?: EnumPaymentTypeWithAggregatesFilter | PaymentType
    bookingId?: IntWithAggregatesFilter | number
    amount?: IntWithAggregatesFilter | number
    fee?: IntWithAggregatesFilter | number
    currency?: StringWithAggregatesFilter | string
    success?: BoolWithAggregatesFilter | boolean
    refunded?: BoolWithAggregatesFilter | boolean
    data?: JsonWithAggregatesFilter
    externalId?: StringWithAggregatesFilter | string
  }

  export type WebhookWhereInput = {
    AND?: Enumerable<WebhookWhereInput>
    OR?: Enumerable<WebhookWhereInput>
    NOT?: Enumerable<WebhookWhereInput>
    id?: StringFilter | string
    userId?: IntNullableFilter | number | null
    eventTypeId?: IntNullableFilter | number | null
    subscriberUrl?: StringFilter | string
    payloadTemplate?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    active?: BoolFilter | boolean
    eventTriggers?: EnumWebhookTriggerEventsNullableListFilter
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput> | null
    app?: XOR<AppRelationFilter, AppWhereInput> | null
    appId?: StringNullableFilter | string | null
    secret?: StringNullableFilter | string | null
  }

  export type WebhookOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    subscriberUrl?: SortOrder
    payloadTemplate?: SortOrder
    createdAt?: SortOrder
    active?: SortOrder
    eventTriggers?: SortOrder
    user?: UserOrderByWithRelationInput
    eventType?: EventTypeOrderByWithRelationInput
    app?: AppOrderByWithRelationInput
    appId?: SortOrder
    secret?: SortOrder
  }

  export type WebhookWhereUniqueInput = {
    id?: string
  }

  export type WebhookOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    subscriberUrl?: SortOrder
    payloadTemplate?: SortOrder
    createdAt?: SortOrder
    active?: SortOrder
    eventTriggers?: SortOrder
    appId?: SortOrder
    secret?: SortOrder
    _count?: WebhookCountOrderByAggregateInput
    _avg?: WebhookAvgOrderByAggregateInput
    _max?: WebhookMaxOrderByAggregateInput
    _min?: WebhookMinOrderByAggregateInput
    _sum?: WebhookSumOrderByAggregateInput
  }

  export type WebhookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WebhookScalarWhereWithAggregatesInput>
    OR?: Enumerable<WebhookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WebhookScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: IntNullableWithAggregatesFilter | number | null
    eventTypeId?: IntNullableWithAggregatesFilter | number | null
    subscriberUrl?: StringWithAggregatesFilter | string
    payloadTemplate?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    active?: BoolWithAggregatesFilter | boolean
    eventTriggers?: EnumWebhookTriggerEventsNullableListFilter
    appId?: StringNullableWithAggregatesFilter | string | null
    secret?: StringNullableWithAggregatesFilter | string | null
  }

  export type ImpersonationsWhereInput = {
    AND?: Enumerable<ImpersonationsWhereInput>
    OR?: Enumerable<ImpersonationsWhereInput>
    NOT?: Enumerable<ImpersonationsWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    impersonatedUser?: XOR<UserRelationFilter, UserWhereInput>
    impersonatedBy?: XOR<UserRelationFilter, UserWhereInput>
    impersonatedUserId?: IntFilter | number
    impersonatedById?: IntFilter | number
  }

  export type ImpersonationsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    impersonatedUser?: UserOrderByWithRelationInput
    impersonatedBy?: UserOrderByWithRelationInput
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
  }

  export type ImpersonationsWhereUniqueInput = {
    id?: number
  }

  export type ImpersonationsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
    _count?: ImpersonationsCountOrderByAggregateInput
    _avg?: ImpersonationsAvgOrderByAggregateInput
    _max?: ImpersonationsMaxOrderByAggregateInput
    _min?: ImpersonationsMinOrderByAggregateInput
    _sum?: ImpersonationsSumOrderByAggregateInput
  }

  export type ImpersonationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImpersonationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImpersonationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImpersonationsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    impersonatedUserId?: IntWithAggregatesFilter | number
    impersonatedById?: IntWithAggregatesFilter | number
  }

  export type ApiKeyWhereInput = {
    AND?: Enumerable<ApiKeyWhereInput>
    OR?: Enumerable<ApiKeyWhereInput>
    NOT?: Enumerable<ApiKeyWhereInput>
    id?: StringFilter | string
    userId?: IntFilter | number
    note?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    expiresAt?: DateTimeNullableFilter | Date | string | null
    lastUsedAt?: DateTimeNullableFilter | Date | string | null
    hashedKey?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    app?: XOR<AppRelationFilter, AppWhereInput> | null
    appId?: StringNullableFilter | string | null
  }

  export type ApiKeyOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    hashedKey?: SortOrder
    user?: UserOrderByWithRelationInput
    app?: AppOrderByWithRelationInput
    appId?: SortOrder
  }

  export type ApiKeyWhereUniqueInput = {
    id?: string
    hashedKey?: string
  }

  export type ApiKeyOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    hashedKey?: SortOrder
    appId?: SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _avg?: ApiKeyAvgOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
    _sum?: ApiKeySumOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    note?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    lastUsedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    hashedKey?: StringWithAggregatesFilter | string
    appId?: StringNullableWithAggregatesFilter | string | null
  }

  export type HashedLinkWhereInput = {
    AND?: Enumerable<HashedLinkWhereInput>
    OR?: Enumerable<HashedLinkWhereInput>
    NOT?: Enumerable<HashedLinkWhereInput>
    id?: IntFilter | number
    link?: StringFilter | string
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput>
    eventTypeId?: IntFilter | number
  }

  export type HashedLinkOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
    eventType?: EventTypeOrderByWithRelationInput
    eventTypeId?: SortOrder
  }

  export type HashedLinkWhereUniqueInput = {
    id?: number
    link?: string
    eventTypeId?: number
  }

  export type HashedLinkOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    eventTypeId?: SortOrder
    _count?: HashedLinkCountOrderByAggregateInput
    _avg?: HashedLinkAvgOrderByAggregateInput
    _max?: HashedLinkMaxOrderByAggregateInput
    _min?: HashedLinkMinOrderByAggregateInput
    _sum?: HashedLinkSumOrderByAggregateInput
  }

  export type HashedLinkScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HashedLinkScalarWhereWithAggregatesInput>
    OR?: Enumerable<HashedLinkScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HashedLinkScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    link?: StringWithAggregatesFilter | string
    eventTypeId?: IntWithAggregatesFilter | number
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    userId?: IntFilter | number
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: IntFilter | number
    expires?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AppWhereInput = {
    AND?: Enumerable<AppWhereInput>
    OR?: Enumerable<AppWhereInput>
    NOT?: Enumerable<AppWhereInput>
    slug?: StringFilter | string
    dirName?: StringFilter | string
    keys?: JsonNullableFilter
    categories?: EnumAppCategoriesNullableListFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    credentials?: CredentialListRelationFilter
    Webhook?: WebhookListRelationFilter
    ApiKey?: ApiKeyListRelationFilter
  }

  export type AppOrderByWithRelationInput = {
    slug?: SortOrder
    dirName?: SortOrder
    keys?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    credentials?: CredentialOrderByRelationAggregateInput
    Webhook?: WebhookOrderByRelationAggregateInput
    ApiKey?: ApiKeyOrderByRelationAggregateInput
  }

  export type AppWhereUniqueInput = {
    slug?: string
    dirName?: string
  }

  export type AppOrderByWithAggregationInput = {
    slug?: SortOrder
    dirName?: SortOrder
    keys?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppCountOrderByAggregateInput
    _max?: AppMaxOrderByAggregateInput
    _min?: AppMinOrderByAggregateInput
  }

  export type AppScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppScalarWhereWithAggregatesInput>
    slug?: StringWithAggregatesFilter | string
    dirName?: StringWithAggregatesFilter | string
    keys?: JsonNullableWithAggregatesFilter
    categories?: EnumAppCategoriesNullableListFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type App_RoutingForms_FormWhereInput = {
    AND?: Enumerable<App_RoutingForms_FormWhereInput>
    OR?: Enumerable<App_RoutingForms_FormWhereInput>
    NOT?: Enumerable<App_RoutingForms_FormWhereInput>
    id?: StringFilter | string
    description?: StringNullableFilter | string | null
    routes?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    fields?: JsonNullableFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    responses?: App_RoutingForms_FormResponseListRelationFilter
    disabled?: BoolFilter | boolean
  }

  export type App_RoutingForms_FormOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    routes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    fields?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    responses?: App_RoutingForms_FormResponseOrderByRelationAggregateInput
    disabled?: SortOrder
  }

  export type App_RoutingForms_FormWhereUniqueInput = {
    id?: string
  }

  export type App_RoutingForms_FormOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    routes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    fields?: SortOrder
    userId?: SortOrder
    disabled?: SortOrder
    _count?: App_RoutingForms_FormCountOrderByAggregateInput
    _avg?: App_RoutingForms_FormAvgOrderByAggregateInput
    _max?: App_RoutingForms_FormMaxOrderByAggregateInput
    _min?: App_RoutingForms_FormMinOrderByAggregateInput
    _sum?: App_RoutingForms_FormSumOrderByAggregateInput
  }

  export type App_RoutingForms_FormScalarWhereWithAggregatesInput = {
    AND?: Enumerable<App_RoutingForms_FormScalarWhereWithAggregatesInput>
    OR?: Enumerable<App_RoutingForms_FormScalarWhereWithAggregatesInput>
    NOT?: Enumerable<App_RoutingForms_FormScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    routes?: JsonNullableWithAggregatesFilter
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    fields?: JsonNullableWithAggregatesFilter
    userId?: IntWithAggregatesFilter | number
    disabled?: BoolWithAggregatesFilter | boolean
  }

  export type App_RoutingForms_FormResponseWhereInput = {
    AND?: Enumerable<App_RoutingForms_FormResponseWhereInput>
    OR?: Enumerable<App_RoutingForms_FormResponseWhereInput>
    NOT?: Enumerable<App_RoutingForms_FormResponseWhereInput>
    id?: IntFilter | number
    formFillerId?: StringFilter | string
    form?: XOR<App_RoutingForms_FormRelationFilter, App_RoutingForms_FormWhereInput>
    formId?: StringFilter | string
    response?: JsonFilter
  }

  export type App_RoutingForms_FormResponseOrderByWithRelationInput = {
    id?: SortOrder
    formFillerId?: SortOrder
    form?: App_RoutingForms_FormOrderByWithRelationInput
    formId?: SortOrder
    response?: SortOrder
  }

  export type App_RoutingForms_FormResponseWhereUniqueInput = {
    id?: number
    formFillerId_formId?: App_RoutingForms_FormResponseFormFillerIdFormIdCompoundUniqueInput
  }

  export type App_RoutingForms_FormResponseOrderByWithAggregationInput = {
    id?: SortOrder
    formFillerId?: SortOrder
    formId?: SortOrder
    response?: SortOrder
    _count?: App_RoutingForms_FormResponseCountOrderByAggregateInput
    _avg?: App_RoutingForms_FormResponseAvgOrderByAggregateInput
    _max?: App_RoutingForms_FormResponseMaxOrderByAggregateInput
    _min?: App_RoutingForms_FormResponseMinOrderByAggregateInput
    _sum?: App_RoutingForms_FormResponseSumOrderByAggregateInput
  }

  export type App_RoutingForms_FormResponseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<App_RoutingForms_FormResponseScalarWhereWithAggregatesInput>
    OR?: Enumerable<App_RoutingForms_FormResponseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<App_RoutingForms_FormResponseScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    formFillerId?: StringWithAggregatesFilter | string
    formId?: StringWithAggregatesFilter | string
    response?: JsonWithAggregatesFilter
  }

  export type FeedbackWhereInput = {
    AND?: Enumerable<FeedbackWhereInput>
    OR?: Enumerable<FeedbackWhereInput>
    NOT?: Enumerable<FeedbackWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    rating?: StringFilter | string
    comment?: StringNullableFilter | string | null
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    rating?: SortOrder
    comment?: SortOrder
  }

  export type FeedbackWhereUniqueInput = {
    id?: number
  }

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FeedbackScalarWhereWithAggregatesInput>
    OR?: Enumerable<FeedbackScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FeedbackScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntWithAggregatesFilter | number
    rating?: StringWithAggregatesFilter | string
    comment?: StringNullableWithAggregatesFilter | string | null
  }

  export type WorkflowStepWhereInput = {
    AND?: Enumerable<WorkflowStepWhereInput>
    OR?: Enumerable<WorkflowStepWhereInput>
    NOT?: Enumerable<WorkflowStepWhereInput>
    id?: IntFilter | number
    stepNumber?: IntFilter | number
    action?: EnumWorkflowActionsFilter | WorkflowActions
    workflowId?: IntFilter | number
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    sendTo?: StringNullableFilter | string | null
    reminderBody?: StringNullableFilter | string | null
    emailSubject?: StringNullableFilter | string | null
    template?: EnumWorkflowTemplatesFilter | WorkflowTemplates
    workflowReminders?: WorkflowReminderListRelationFilter
  }

  export type WorkflowStepOrderByWithRelationInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    action?: SortOrder
    workflowId?: SortOrder
    workflow?: WorkflowOrderByWithRelationInput
    sendTo?: SortOrder
    reminderBody?: SortOrder
    emailSubject?: SortOrder
    template?: SortOrder
    workflowReminders?: WorkflowReminderOrderByRelationAggregateInput
  }

  export type WorkflowStepWhereUniqueInput = {
    id?: number
  }

  export type WorkflowStepOrderByWithAggregationInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    action?: SortOrder
    workflowId?: SortOrder
    sendTo?: SortOrder
    reminderBody?: SortOrder
    emailSubject?: SortOrder
    template?: SortOrder
    _count?: WorkflowStepCountOrderByAggregateInput
    _avg?: WorkflowStepAvgOrderByAggregateInput
    _max?: WorkflowStepMaxOrderByAggregateInput
    _min?: WorkflowStepMinOrderByAggregateInput
    _sum?: WorkflowStepSumOrderByAggregateInput
  }

  export type WorkflowStepScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkflowStepScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkflowStepScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkflowStepScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    stepNumber?: IntWithAggregatesFilter | number
    action?: EnumWorkflowActionsWithAggregatesFilter | WorkflowActions
    workflowId?: IntWithAggregatesFilter | number
    sendTo?: StringNullableWithAggregatesFilter | string | null
    reminderBody?: StringNullableWithAggregatesFilter | string | null
    emailSubject?: StringNullableWithAggregatesFilter | string | null
    template?: EnumWorkflowTemplatesWithAggregatesFilter | WorkflowTemplates
  }

  export type WorkflowWhereInput = {
    AND?: Enumerable<WorkflowWhereInput>
    OR?: Enumerable<WorkflowWhereInput>
    NOT?: Enumerable<WorkflowWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    activeOn?: WorkflowsOnEventTypesListRelationFilter
    trigger?: EnumWorkflowTriggerEventsFilter | WorkflowTriggerEvents
    time?: IntNullableFilter | number | null
    timeUnit?: EnumTimeUnitNullableFilter | TimeUnit | null
    steps?: WorkflowStepListRelationFilter
  }

  export type WorkflowOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    activeOn?: WorkflowsOnEventTypesOrderByRelationAggregateInput
    trigger?: SortOrder
    time?: SortOrder
    timeUnit?: SortOrder
    steps?: WorkflowStepOrderByRelationAggregateInput
  }

  export type WorkflowWhereUniqueInput = {
    id?: number
  }

  export type WorkflowOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    trigger?: SortOrder
    time?: SortOrder
    timeUnit?: SortOrder
    _count?: WorkflowCountOrderByAggregateInput
    _avg?: WorkflowAvgOrderByAggregateInput
    _max?: WorkflowMaxOrderByAggregateInput
    _min?: WorkflowMinOrderByAggregateInput
    _sum?: WorkflowSumOrderByAggregateInput
  }

  export type WorkflowScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkflowScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkflowScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkflowScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    trigger?: EnumWorkflowTriggerEventsWithAggregatesFilter | WorkflowTriggerEvents
    time?: IntNullableWithAggregatesFilter | number | null
    timeUnit?: EnumTimeUnitNullableWithAggregatesFilter | TimeUnit | null
  }

  export type WorkflowsOnEventTypesWhereInput = {
    AND?: Enumerable<WorkflowsOnEventTypesWhereInput>
    OR?: Enumerable<WorkflowsOnEventTypesWhereInput>
    NOT?: Enumerable<WorkflowsOnEventTypesWhereInput>
    id?: IntFilter | number
    workflow?: XOR<WorkflowRelationFilter, WorkflowWhereInput>
    workflowId?: IntFilter | number
    eventType?: XOR<EventTypeRelationFilter, EventTypeWhereInput>
    eventTypeId?: IntFilter | number
  }

  export type WorkflowsOnEventTypesOrderByWithRelationInput = {
    id?: SortOrder
    workflow?: WorkflowOrderByWithRelationInput
    workflowId?: SortOrder
    eventType?: EventTypeOrderByWithRelationInput
    eventTypeId?: SortOrder
  }

  export type WorkflowsOnEventTypesWhereUniqueInput = {
    id?: number
  }

  export type WorkflowsOnEventTypesOrderByWithAggregationInput = {
    id?: SortOrder
    workflowId?: SortOrder
    eventTypeId?: SortOrder
    _count?: WorkflowsOnEventTypesCountOrderByAggregateInput
    _avg?: WorkflowsOnEventTypesAvgOrderByAggregateInput
    _max?: WorkflowsOnEventTypesMaxOrderByAggregateInput
    _min?: WorkflowsOnEventTypesMinOrderByAggregateInput
    _sum?: WorkflowsOnEventTypesSumOrderByAggregateInput
  }

  export type WorkflowsOnEventTypesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkflowsOnEventTypesScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkflowsOnEventTypesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkflowsOnEventTypesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    workflowId?: IntWithAggregatesFilter | number
    eventTypeId?: IntWithAggregatesFilter | number
  }

  export type WorkflowReminderWhereInput = {
    AND?: Enumerable<WorkflowReminderWhereInput>
    OR?: Enumerable<WorkflowReminderWhereInput>
    NOT?: Enumerable<WorkflowReminderWhereInput>
    id?: IntFilter | number
    bookingUid?: StringFilter | string
    booking?: XOR<BookingRelationFilter, BookingWhereInput> | null
    method?: EnumWorkflowMethodsFilter | WorkflowMethods
    scheduledDate?: DateTimeFilter | Date | string
    referenceId?: StringNullableFilter | string | null
    scheduled?: BoolFilter | boolean
    workflowStepId?: IntFilter | number
    workflowStep?: XOR<WorkflowStepRelationFilter, WorkflowStepWhereInput>
  }

  export type WorkflowReminderOrderByWithRelationInput = {
    id?: SortOrder
    bookingUid?: SortOrder
    booking?: BookingOrderByWithRelationInput
    method?: SortOrder
    scheduledDate?: SortOrder
    referenceId?: SortOrder
    scheduled?: SortOrder
    workflowStepId?: SortOrder
    workflowStep?: WorkflowStepOrderByWithRelationInput
  }

  export type WorkflowReminderWhereUniqueInput = {
    id?: number
    referenceId?: string
  }

  export type WorkflowReminderOrderByWithAggregationInput = {
    id?: SortOrder
    bookingUid?: SortOrder
    method?: SortOrder
    scheduledDate?: SortOrder
    referenceId?: SortOrder
    scheduled?: SortOrder
    workflowStepId?: SortOrder
    _count?: WorkflowReminderCountOrderByAggregateInput
    _avg?: WorkflowReminderAvgOrderByAggregateInput
    _max?: WorkflowReminderMaxOrderByAggregateInput
    _min?: WorkflowReminderMinOrderByAggregateInput
    _sum?: WorkflowReminderSumOrderByAggregateInput
  }

  export type WorkflowReminderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WorkflowReminderScalarWhereWithAggregatesInput>
    OR?: Enumerable<WorkflowReminderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WorkflowReminderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookingUid?: StringWithAggregatesFilter | string
    method?: EnumWorkflowMethodsWithAggregatesFilter | WorkflowMethods
    scheduledDate?: DateTimeWithAggregatesFilter | Date | string
    referenceId?: StringNullableWithAggregatesFilter | string | null
    scheduled?: BoolWithAggregatesFilter | boolean
    workflowStepId?: IntWithAggregatesFilter | number
  }

  export type EventTypeCreateInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type EventTypeCreateManyInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    userId?: number | null
    teamId?: number | null
    eventName?: string | null
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
  }

  export type EventTypeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CredentialCreateInput = {
    type: string
    key: JsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutCredentialsInput
    app?: AppCreateNestedOneWithoutCredentialsInput
    destinationCalendars?: DestinationCalendarCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUncheckedCreateInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    userId?: number | null
    appId?: string | null
    destinationCalendars?: DestinationCalendarUncheckedCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutCredentialsInput
    app?: AppUpdateOneWithoutCredentialsInput
    destinationCalendars?: DestinationCalendarUpdateManyWithoutCredentialInput
  }

  export type CredentialUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    destinationCalendars?: DestinationCalendarUncheckedUpdateManyWithoutCredentialInput
  }

  export type CredentialCreateManyInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    userId?: number | null
    appId?: string | null
  }

  export type CredentialUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
  }

  export type CredentialUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DestinationCalendarCreateInput = {
    integration: string
    externalId: string
    user?: UserCreateNestedOneWithoutDestinationCalendarInput
    booking?: BookingCreateNestedManyWithoutDestinationCalendarInput
    eventType?: EventTypeCreateNestedOneWithoutDestinationCalendarInput
    credential?: CredentialCreateNestedOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedCreateInput = {
    id?: number
    integration: string
    externalId: string
    userId?: number | null
    booking?: BookingUncheckedCreateNestedManyWithoutDestinationCalendarInput
    eventTypeId?: number | null
    credentialId?: number | null
  }

  export type DestinationCalendarUpdateInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutDestinationCalendarInput
    booking?: BookingUpdateManyWithoutDestinationCalendarInput
    eventType?: EventTypeUpdateOneWithoutDestinationCalendarInput
    credential?: CredentialUpdateOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    booking?: BookingUncheckedUpdateManyWithoutDestinationCalendarInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DestinationCalendarCreateManyInput = {
    id?: number
    integration: string
    externalId: string
    userId?: number | null
    eventTypeId?: number | null
    credentialId?: number | null
  }

  export type DestinationCalendarUpdateManyMutationInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type DestinationCalendarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUpdateInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    defaultScheduleId?: number | null
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    invitedTo?: number | null
    plan?: UserPlan
    brandColor?: string
    darkBrandColor?: string
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    emailVerificationToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamCreateInput = {
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
    members?: MembershipCreateNestedManyWithoutTeamInput
    eventTypes?: EventTypeCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
    members?: MembershipUncheckedCreateNestedManyWithoutTeamInput
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    members?: MembershipUpdateManyWithoutTeamInput
    eventTypes?: EventTypeUpdateManyWithoutTeamInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    members?: MembershipUncheckedUpdateManyWithoutTeamInput
    eventTypes?: EventTypeUncheckedUpdateManyWithoutTeamInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
  }

  export type TeamUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MembershipCreateInput = {
    accepted?: boolean
    role: MembershipRole
    team: TeamCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutTeamsInput
  }

  export type MembershipUncheckedCreateInput = {
    teamId: number
    userId: number
    accepted?: boolean
    role: MembershipRole
  }

  export type MembershipUpdateInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
    team?: TeamUpdateOneRequiredWithoutMembersInput
    user?: UserUpdateOneRequiredWithoutTeamsInput
  }

  export type MembershipUncheckedUpdateInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type MembershipCreateManyInput = {
    teamId: number
    userId: number
    accepted?: boolean
    role: MembershipRole
  }

  export type MembershipUpdateManyMutationInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type MembershipUncheckedUpdateManyInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    id?: number
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    id?: number
    identifier: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingReferenceCreateInput = {
    type: string
    uid: string
    meetingId?: string | null
    meetingPassword?: string | null
    meetingUrl?: string | null
    booking?: BookingCreateNestedOneWithoutReferencesInput
    externalCalendarId?: string | null
    deleted?: boolean | null
    credentialId?: number | null
  }

  export type BookingReferenceUncheckedCreateInput = {
    id?: number
    type: string
    uid: string
    meetingId?: string | null
    meetingPassword?: string | null
    meetingUrl?: string | null
    bookingId?: number | null
    externalCalendarId?: string | null
    deleted?: boolean | null
    credentialId?: number | null
  }

  export type BookingReferenceUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    booking?: BookingUpdateOneWithoutReferencesInput
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingReferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingReferenceCreateManyInput = {
    id?: number
    type: string
    uid: string
    meetingId?: string | null
    meetingPassword?: string | null
    meetingUrl?: string | null
    bookingId?: number | null
    externalCalendarId?: string | null
    deleted?: boolean | null
    credentialId?: number | null
  }

  export type BookingReferenceUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingReferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendeeCreateInput = {
    email: string
    name: string
    timeZone: string
    locale?: string | null
    booking?: BookingCreateNestedOneWithoutAttendeesInput
  }

  export type AttendeeUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    timeZone: string
    locale?: string | null
    bookingId?: number | null
  }

  export type AttendeeUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    booking?: BookingUpdateOneWithoutAttendeesInput
  }

  export type AttendeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendeeCreateManyInput = {
    id?: number
    email: string
    name: string
    timeZone: string
    locale?: string | null
    bookingId?: number | null
  }

  export type AttendeeUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DailyEventReferenceCreateInput = {
    dailyurl?: string
    dailytoken?: string
    booking?: BookingCreateNestedOneWithoutDailyRefInput
  }

  export type DailyEventReferenceUncheckedCreateInput = {
    id?: number
    dailyurl?: string
    dailytoken?: string
    bookingId?: number | null
  }

  export type DailyEventReferenceUpdateInput = {
    dailyurl?: StringFieldUpdateOperationsInput | string
    dailytoken?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateOneWithoutDailyRefInput
  }

  export type DailyEventReferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dailyurl?: StringFieldUpdateOperationsInput | string
    dailytoken?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DailyEventReferenceCreateManyInput = {
    id?: number
    dailyurl?: string
    dailytoken?: string
    bookingId?: number | null
  }

  export type DailyEventReferenceUpdateManyMutationInput = {
    dailyurl?: StringFieldUpdateOperationsInput | string
    dailytoken?: StringFieldUpdateOperationsInput | string
  }

  export type DailyEventReferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dailyurl?: StringFieldUpdateOperationsInput | string
    dailytoken?: StringFieldUpdateOperationsInput | string
    bookingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingCreateInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type BookingCreateManyInput = {
    id?: number
    uid: string
    userId?: number | null
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
  }

  export type BookingUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleCreateInput = {
    user: UserCreateNestedOneWithoutSchedulesInput
    eventType?: EventTypeCreateNestedManyWithoutScheduleInput
    name: string
    timeZone?: string | null
    availability?: AvailabilityCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    userId: number
    eventType?: EventTypeUncheckedCreateNestedManyWithoutScheduleInput
    name: string
    timeZone?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUpdateInput = {
    user?: UserUpdateOneRequiredWithoutSchedulesInput
    eventType?: EventTypeUpdateManyWithoutScheduleInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutScheduleInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    eventType?: EventTypeUncheckedUpdateManyWithoutScheduleInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutScheduleInput
  }

  export type ScheduleCreateManyInput = {
    id?: number
    userId: number
    name: string
    timeZone?: string | null
  }

  export type ScheduleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvailabilityCreateInput = {
    user?: UserCreateNestedOneWithoutAvailabilityInput
    eventType?: EventTypeCreateNestedOneWithoutAvailabilityInput
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    Schedule?: ScheduleCreateNestedOneWithoutAvailabilityInput
  }

  export type AvailabilityUncheckedCreateInput = {
    id?: number
    userId?: number | null
    eventTypeId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    scheduleId?: number | null
  }

  export type AvailabilityUpdateInput = {
    user?: UserUpdateOneWithoutAvailabilityInput
    eventType?: EventTypeUpdateOneWithoutAvailabilityInput
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Schedule?: ScheduleUpdateOneWithoutAvailabilityInput
  }

  export type AvailabilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvailabilityCreateManyInput = {
    id?: number
    userId?: number | null
    eventTypeId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    scheduleId?: number | null
  }

  export type AvailabilityUpdateManyMutationInput = {
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AvailabilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SelectedCalendarCreateInput = {
    user: UserCreateNestedOneWithoutSelectedCalendarsInput
    integration: string
    externalId: string
  }

  export type SelectedCalendarUncheckedCreateInput = {
    userId: number
    integration: string
    externalId: string
  }

  export type SelectedCalendarUpdateInput = {
    user?: UserUpdateOneRequiredWithoutSelectedCalendarsInput
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedCalendarUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedCalendarCreateManyInput = {
    userId: number
    integration: string
    externalId: string
  }

  export type SelectedCalendarUpdateManyMutationInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedCalendarUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type EventTypeCustomInputCreateInput = {
    eventType: EventTypeCreateNestedOneWithoutCustomInputsInput
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder?: string
  }

  export type EventTypeCustomInputUncheckedCreateInput = {
    id?: number
    eventTypeId: number
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder?: string
  }

  export type EventTypeCustomInputUpdateInput = {
    eventType?: EventTypeUpdateOneRequiredWithoutCustomInputsInput
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type EventTypeCustomInputUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventTypeId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type EventTypeCustomInputCreateManyInput = {
    id?: number
    eventTypeId: number
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder?: string
  }

  export type EventTypeCustomInputUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type EventTypeCustomInputUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventTypeId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type ResetPasswordRequestCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    expires: Date | string
  }

  export type ResetPasswordRequestUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    expires: Date | string
  }

  export type ResetPasswordRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetPasswordRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetPasswordRequestCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    expires: Date | string
  }

  export type ResetPasswordRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResetPasswordRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReminderMailCreateInput = {
    referenceId: number
    reminderType: ReminderType
    elapsedMinutes: number
    createdAt?: Date | string
  }

  export type ReminderMailUncheckedCreateInput = {
    id?: number
    referenceId: number
    reminderType: ReminderType
    elapsedMinutes: number
    createdAt?: Date | string
  }

  export type ReminderMailUpdateInput = {
    referenceId?: IntFieldUpdateOperationsInput | number
    reminderType?: EnumReminderTypeFieldUpdateOperationsInput | ReminderType
    elapsedMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReminderMailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    referenceId?: IntFieldUpdateOperationsInput | number
    reminderType?: EnumReminderTypeFieldUpdateOperationsInput | ReminderType
    elapsedMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReminderMailCreateManyInput = {
    id?: number
    referenceId: number
    reminderType: ReminderType
    elapsedMinutes: number
    createdAt?: Date | string
  }

  export type ReminderMailUpdateManyMutationInput = {
    referenceId?: IntFieldUpdateOperationsInput | number
    reminderType?: EnumReminderTypeFieldUpdateOperationsInput | ReminderType
    elapsedMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReminderMailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    referenceId?: IntFieldUpdateOperationsInput | number
    reminderType?: EnumReminderTypeFieldUpdateOperationsInput | ReminderType
    elapsedMinutes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    uid: string
    type: PaymentType
    booking?: BookingCreateNestedOneWithoutPaymentInput
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonNullValueInput | InputJsonValue
    externalId: string
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    uid: string
    type: PaymentType
    bookingId: number
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonNullValueInput | InputJsonValue
    externalId: string
  }

  export type PaymentUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    booking?: BookingUpdateOneWithoutPaymentInput
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    bookingId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    uid: string
    type: PaymentType
    bookingId: number
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonNullValueInput | InputJsonValue
    externalId: string
  }

  export type PaymentUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    bookingId?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type WebhookCreateInput = {
    id: string
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    user?: UserCreateNestedOneWithoutWebhooksInput
    eventType?: EventTypeCreateNestedOneWithoutWebhooksInput
    app?: AppCreateNestedOneWithoutWebhookInput
    secret?: string | null
  }

  export type WebhookUncheckedCreateInput = {
    id: string
    userId?: number | null
    eventTypeId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: string | null
    secret?: string | null
  }

  export type WebhookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    user?: UserUpdateOneWithoutWebhooksInput
    eventType?: EventTypeUpdateOneWithoutWebhooksInput
    app?: AppUpdateOneWithoutWebhookInput
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookCreateManyInput = {
    id: string
    userId?: number | null
    eventTypeId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: string | null
    secret?: string | null
  }

  export type WebhookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImpersonationsCreateInput = {
    createdAt?: Date | string
    impersonatedUser: UserCreateNestedOneWithoutImpersonatedUsersInput
    impersonatedBy: UserCreateNestedOneWithoutImpersonatedByInput
  }

  export type ImpersonationsUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    impersonatedUserId: number
    impersonatedById: number
  }

  export type ImpersonationsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedUser?: UserUpdateOneRequiredWithoutImpersonatedUsersInput
    impersonatedBy?: UserUpdateOneRequiredWithoutImpersonatedByInput
  }

  export type ImpersonationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedUserId?: IntFieldUpdateOperationsInput | number
    impersonatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ImpersonationsCreateManyInput = {
    id?: number
    createdAt?: Date | string
    impersonatedUserId: number
    impersonatedById: number
  }

  export type ImpersonationsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImpersonationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedUserId?: IntFieldUpdateOperationsInput | number
    impersonatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ApiKeyCreateInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    user?: UserCreateNestedOneWithoutApiKeysInput
    app?: AppCreateNestedOneWithoutApiKeyInput
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: string
    userId: number
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    appId?: string | null
  }

  export type ApiKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutApiKeysInput
    app?: AppUpdateOneWithoutApiKeyInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyCreateManyInput = {
    id?: string
    userId: number
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    appId?: string | null
  }

  export type ApiKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HashedLinkCreateInput = {
    link: string
    eventType: EventTypeCreateNestedOneWithoutHashedLinkInput
  }

  export type HashedLinkUncheckedCreateInput = {
    id?: number
    link: string
    eventTypeId: number
  }

  export type HashedLinkUpdateInput = {
    link?: StringFieldUpdateOperationsInput | string
    eventType?: EventTypeUpdateOneRequiredWithoutHashedLinkInput
  }

  export type HashedLinkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    eventTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type HashedLinkCreateManyInput = {
    id?: number
    link: string
    eventTypeId: number
  }

  export type HashedLinkUpdateManyMutationInput = {
    link?: StringFieldUpdateOperationsInput | string
  }

  export type HashedLinkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    eventTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user?: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutAccountsInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user?: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutSessionsInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppCreateInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialCreateNestedManyWithoutAppInput
    Webhook?: WebhookCreateNestedManyWithoutAppInput
    ApiKey?: ApiKeyCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialUncheckedCreateNestedManyWithoutAppInput
    Webhook?: WebhookUncheckedCreateNestedManyWithoutAppInput
    ApiKey?: ApiKeyUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppUpdateInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUpdateManyWithoutAppInput
    Webhook?: WebhookUpdateManyWithoutAppInput
    ApiKey?: ApiKeyUpdateManyWithoutAppInput
  }

  export type AppUncheckedUpdateInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUncheckedUpdateManyWithoutAppInput
    Webhook?: WebhookUncheckedUpdateManyWithoutAppInput
    ApiKey?: ApiKeyUncheckedUpdateManyWithoutAppInput
  }

  export type AppCreateManyInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppUpdateManyMutationInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppUncheckedUpdateManyInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type App_RoutingForms_FormCreateInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutRoutingFormsInput
    responses?: App_RoutingForms_FormResponseCreateNestedManyWithoutFormInput
    disabled?: boolean
  }

  export type App_RoutingForms_FormUncheckedCreateInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    userId: number
    responses?: App_RoutingForms_FormResponseUncheckedCreateNestedManyWithoutFormInput
    disabled?: boolean
  }

  export type App_RoutingForms_FormUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutRoutingFormsInput
    responses?: App_RoutingForms_FormResponseUpdateManyWithoutFormInput
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    responses?: App_RoutingForms_FormResponseUncheckedUpdateManyWithoutFormInput
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormCreateManyInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    userId: number
    disabled?: boolean
  }

  export type App_RoutingForms_FormUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormResponseCreateInput = {
    formFillerId?: string
    form: App_RoutingForms_FormCreateNestedOneWithoutResponsesInput
    response: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUncheckedCreateInput = {
    id?: number
    formFillerId?: string
    formId: string
    response: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUpdateInput = {
    formFillerId?: StringFieldUpdateOperationsInput | string
    form?: App_RoutingForms_FormUpdateOneRequiredWithoutResponsesInput
    response?: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    formFillerId?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    response?: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseCreateManyInput = {
    id?: number
    formFillerId?: string
    formId: string
    response: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUpdateManyMutationInput = {
    formFillerId?: StringFieldUpdateOperationsInput | string
    response?: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    formFillerId?: StringFieldUpdateOperationsInput | string
    formId?: StringFieldUpdateOperationsInput | string
    response?: JsonNullValueInput | InputJsonValue
  }

  export type FeedbackCreateInput = {
    date: Date | string
    user: UserCreateNestedOneWithoutFeedbackInput
    rating: string
    comment?: string | null
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    date: Date | string
    userId: number
    rating: string
    comment?: string | null
  }

  export type FeedbackUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbackInput
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateManyInput = {
    id?: number
    date: Date | string
    userId: number
    rating: string
    comment?: string | null
  }

  export type FeedbackUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepCreateInput = {
    stepNumber: number
    action: WorkflowActions
    workflow: WorkflowCreateNestedOneWithoutStepsInput
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutWorkflowStepInput
  }

  export type WorkflowStepUncheckedCreateInput = {
    id?: number
    stepNumber: number
    action: WorkflowActions
    workflowId: number
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutWorkflowStepInput
  }

  export type WorkflowStepUpdateInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    workflow?: WorkflowUpdateOneRequiredWithoutStepsInput
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
    workflowReminders?: WorkflowReminderUpdateManyWithoutWorkflowStepInput
  }

  export type WorkflowStepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    workflowId?: IntFieldUpdateOperationsInput | number
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutWorkflowStepInput
  }

  export type WorkflowStepCreateManyInput = {
    id?: number
    stepNumber: number
    action: WorkflowActions
    workflowId: number
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
  }

  export type WorkflowStepUpdateManyMutationInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
  }

  export type WorkflowStepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    workflowId?: IntFieldUpdateOperationsInput | number
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
  }

  export type WorkflowCreateInput = {
    name: string
    user: UserCreateNestedOneWithoutWorkflowsInput
    activeOn?: WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
    steps?: WorkflowStepCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateInput = {
    id?: number
    name: string
    userId: number
    activeOn?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
    steps?: WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutWorkflowsInput
    activeOn?: WorkflowsOnEventTypesUpdateManyWithoutWorkflowInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
    steps?: WorkflowStepUpdateManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    activeOn?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
    steps?: WorkflowStepUncheckedUpdateManyWithoutWorkflowInput
  }

  export type WorkflowCreateManyInput = {
    id?: number
    name: string
    userId: number
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
  }

  export type WorkflowUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
  }

  export type WorkflowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
  }

  export type WorkflowsOnEventTypesCreateInput = {
    workflow: WorkflowCreateNestedOneWithoutActiveOnInput
    eventType: EventTypeCreateNestedOneWithoutWorkflowsInput
  }

  export type WorkflowsOnEventTypesUncheckedCreateInput = {
    id?: number
    workflowId: number
    eventTypeId: number
  }

  export type WorkflowsOnEventTypesUpdateInput = {
    workflow?: WorkflowUpdateOneRequiredWithoutActiveOnInput
    eventType?: EventTypeUpdateOneRequiredWithoutWorkflowsInput
  }

  export type WorkflowsOnEventTypesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflowId?: IntFieldUpdateOperationsInput | number
    eventTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowsOnEventTypesCreateManyInput = {
    id?: number
    workflowId: number
    eventTypeId: number
  }

  export type WorkflowsOnEventTypesUpdateManyMutationInput = {

  }

  export type WorkflowsOnEventTypesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflowId?: IntFieldUpdateOperationsInput | number
    eventTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowReminderCreateInput = {
    booking?: BookingCreateNestedOneWithoutWorkflowRemindersInput
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
    workflowStep: WorkflowStepCreateNestedOneWithoutWorkflowRemindersInput
  }

  export type WorkflowReminderUncheckedCreateInput = {
    id?: number
    bookingUid: string
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
    workflowStepId: number
  }

  export type WorkflowReminderUpdateInput = {
    booking?: BookingUpdateOneWithoutWorkflowRemindersInput
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
    workflowStep?: WorkflowStepUpdateOneRequiredWithoutWorkflowRemindersInput
  }

  export type WorkflowReminderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingUid?: StringFieldUpdateOperationsInput | string
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
    workflowStepId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowReminderCreateManyInput = {
    id?: number
    bookingUid: string
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
    workflowStepId: number
  }

  export type WorkflowReminderUpdateManyMutationInput = {
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowReminderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingUid?: StringFieldUpdateOperationsInput | string
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
    workflowStepId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type HashedLinkRelationFilter = {
    is?: HashedLinkWhereInput | null
    isNot?: HashedLinkWhereInput | null
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type AvailabilityListRelationFilter = {
    every?: AvailabilityWhereInput
    some?: AvailabilityWhereInput
    none?: AvailabilityWhereInput
  }

  export type WebhookListRelationFilter = {
    every?: WebhookWhereInput
    some?: WebhookWhereInput
    none?: WebhookWhereInput
  }

  export type DestinationCalendarRelationFilter = {
    is?: DestinationCalendarWhereInput | null
    isNot?: DestinationCalendarWhereInput | null
  }

  export type EventTypeCustomInputListRelationFilter = {
    every?: EventTypeCustomInputWhereInput
    some?: EventTypeCustomInputWhereInput
    none?: EventTypeCustomInputWhereInput
  }

  export type EnumPeriodTypeFilter = {
    equals?: PeriodType
    in?: Enumerable<PeriodType>
    notIn?: Enumerable<PeriodType>
    not?: NestedEnumPeriodTypeFilter | PeriodType
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type EnumSchedulingTypeNullableFilter = {
    equals?: SchedulingType | null
    in?: Enumerable<SchedulingType> | null
    notIn?: Enumerable<SchedulingType> | null
    not?: NestedEnumSchedulingTypeNullableFilter | SchedulingType | null
  }

  export type ScheduleRelationFilter = {
    is?: ScheduleWhereInput | null
    isNot?: ScheduleWhereInput | null
  }

  export type WorkflowsOnEventTypesListRelationFilter = {
    every?: WorkflowsOnEventTypesWhereInput
    some?: WorkflowsOnEventTypesWhereInput
    none?: WorkflowsOnEventTypesWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvailabilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebhookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventTypeCustomInputOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowsOnEventTypesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventTypeUserIdSlugCompoundUniqueInput = {
    userId: number
    slug: string
  }

  export type EventTypeTeamIdSlugCompoundUniqueInput = {
    teamId: number
    slug: string
  }

  export type EventTypeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    position?: SortOrder
    locations?: SortOrder
    length?: SortOrder
    hidden?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    eventName?: SortOrder
    timeZone?: SortOrder
    periodType?: SortOrder
    periodStartDate?: SortOrder
    periodEndDate?: SortOrder
    periodDays?: SortOrder
    periodCountCalendarDays?: SortOrder
    requiresConfirmation?: SortOrder
    recurringEvent?: SortOrder
    disableGuests?: SortOrder
    hideCalendarNotes?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    schedulingType?: SortOrder
    scheduleId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    slotInterval?: SortOrder
    metadata?: SortOrder
    successRedirectUrl?: SortOrder
  }

  export type EventTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    length?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    periodDays?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    scheduleId?: SortOrder
    price?: SortOrder
    slotInterval?: SortOrder
  }

  export type EventTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    position?: SortOrder
    length?: SortOrder
    hidden?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    eventName?: SortOrder
    timeZone?: SortOrder
    periodType?: SortOrder
    periodStartDate?: SortOrder
    periodEndDate?: SortOrder
    periodDays?: SortOrder
    periodCountCalendarDays?: SortOrder
    requiresConfirmation?: SortOrder
    disableGuests?: SortOrder
    hideCalendarNotes?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    schedulingType?: SortOrder
    scheduleId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    slotInterval?: SortOrder
    successRedirectUrl?: SortOrder
  }

  export type EventTypeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    position?: SortOrder
    length?: SortOrder
    hidden?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    eventName?: SortOrder
    timeZone?: SortOrder
    periodType?: SortOrder
    periodStartDate?: SortOrder
    periodEndDate?: SortOrder
    periodDays?: SortOrder
    periodCountCalendarDays?: SortOrder
    requiresConfirmation?: SortOrder
    disableGuests?: SortOrder
    hideCalendarNotes?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    schedulingType?: SortOrder
    scheduleId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    slotInterval?: SortOrder
    successRedirectUrl?: SortOrder
  }

  export type EventTypeSumOrderByAggregateInput = {
    id?: SortOrder
    position?: SortOrder
    length?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    periodDays?: SortOrder
    minimumBookingNotice?: SortOrder
    beforeEventBuffer?: SortOrder
    afterEventBuffer?: SortOrder
    seatsPerTimeSlot?: SortOrder
    scheduleId?: SortOrder
    price?: SortOrder
    slotInterval?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumPeriodTypeWithAggregatesFilter = {
    equals?: PeriodType
    in?: Enumerable<PeriodType>
    notIn?: Enumerable<PeriodType>
    not?: NestedEnumPeriodTypeWithAggregatesFilter | PeriodType
    _count?: NestedIntFilter
    _min?: NestedEnumPeriodTypeFilter
    _max?: NestedEnumPeriodTypeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type EnumSchedulingTypeNullableWithAggregatesFilter = {
    equals?: SchedulingType | null
    in?: Enumerable<SchedulingType> | null
    notIn?: Enumerable<SchedulingType> | null
    not?: NestedEnumSchedulingTypeNullableWithAggregatesFilter | SchedulingType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumSchedulingTypeNullableFilter
    _max?: NestedEnumSchedulingTypeNullableFilter
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AppRelationFilter = {
    is?: AppWhereInput | null
    isNot?: AppWhereInput | null
  }

  export type DestinationCalendarListRelationFilter = {
    every?: DestinationCalendarWhereInput
    some?: DestinationCalendarWhereInput
    none?: DestinationCalendarWhereInput
  }

  export type DestinationCalendarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CredentialCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    key?: SortOrder
    userId?: SortOrder
    appId?: SortOrder
  }

  export type CredentialAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CredentialMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    appId?: SortOrder
  }

  export type CredentialMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    appId?: SortOrder
  }

  export type CredentialSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type EventTypeRelationFilter = {
    is?: EventTypeWhereInput
    isNot?: EventTypeWhereInput
  }

  export type CredentialRelationFilter = {
    is?: CredentialWhereInput | null
    isNot?: CredentialWhereInput | null
  }

  export type DestinationCalendarCountOrderByAggregateInput = {
    id?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    credentialId?: SortOrder
  }

  export type DestinationCalendarAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    credentialId?: SortOrder
  }

  export type DestinationCalendarMaxOrderByAggregateInput = {
    id?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    credentialId?: SortOrder
  }

  export type DestinationCalendarMinOrderByAggregateInput = {
    id?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    credentialId?: SortOrder
  }

  export type DestinationCalendarSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    credentialId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EventTypeListRelationFilter = {
    every?: EventTypeWhereInput
    some?: EventTypeWhereInput
    none?: EventTypeWhereInput
  }

  export type CredentialListRelationFilter = {
    every?: CredentialWhereInput
    some?: CredentialWhereInput
    none?: CredentialWhereInput
  }

  export type MembershipListRelationFilter = {
    every?: MembershipWhereInput
    some?: MembershipWhereInput
    none?: MembershipWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type SelectedCalendarListRelationFilter = {
    every?: SelectedCalendarWhereInput
    some?: SelectedCalendarWhereInput
    none?: SelectedCalendarWhereInput
  }

  export type EnumIdentityProviderFilter = {
    equals?: IdentityProvider
    in?: Enumerable<IdentityProvider>
    notIn?: Enumerable<IdentityProvider>
    not?: NestedEnumIdentityProviderFilter | IdentityProvider
  }

  export type EnumUserPlanFilter = {
    equals?: UserPlan
    in?: Enumerable<UserPlan>
    notIn?: Enumerable<UserPlan>
    not?: NestedEnumUserPlanFilter | UserPlan
  }

  export type EnumUserPermissionRoleFilter = {
    equals?: UserPermissionRole
    in?: Enumerable<UserPermissionRole>
    notIn?: Enumerable<UserPermissionRole>
    not?: NestedEnumUserPermissionRoleFilter | UserPermissionRole
  }

  export type ImpersonationsListRelationFilter = {
    every?: ImpersonationsWhereInput
    some?: ImpersonationsWhereInput
    none?: ImpersonationsWhereInput
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type WorkflowListRelationFilter = {
    every?: WorkflowWhereInput
    some?: WorkflowWhereInput
    none?: WorkflowWhereInput
  }

  export type App_RoutingForms_FormListRelationFilter = {
    every?: App_RoutingForms_FormWhereInput
    some?: App_RoutingForms_FormWhereInput
    none?: App_RoutingForms_FormWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type EventTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CredentialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SelectedCalendarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImpersonationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type App_RoutingForms_FormOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    timeZone?: SortOrder
    weekStart?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    hideBranding?: SortOrder
    theme?: SortOrder
    createdDate?: SortOrder
    trialEndsAt?: SortOrder
    defaultScheduleId?: SortOrder
    completedOnboarding?: SortOrder
    locale?: SortOrder
    timeFormat?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    identityProvider?: SortOrder
    identityProviderId?: SortOrder
    invitedTo?: SortOrder
    plan?: SortOrder
    brandColor?: SortOrder
    darkBrandColor?: SortOrder
    away?: SortOrder
    allowDynamicBooking?: SortOrder
    metadata?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    disableImpersonation?: SortOrder
    emailVerificationToken?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    defaultScheduleId?: SortOrder
    timeFormat?: SortOrder
    invitedTo?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    timeZone?: SortOrder
    weekStart?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    hideBranding?: SortOrder
    theme?: SortOrder
    createdDate?: SortOrder
    trialEndsAt?: SortOrder
    defaultScheduleId?: SortOrder
    completedOnboarding?: SortOrder
    locale?: SortOrder
    timeFormat?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    identityProvider?: SortOrder
    identityProviderId?: SortOrder
    invitedTo?: SortOrder
    plan?: SortOrder
    brandColor?: SortOrder
    darkBrandColor?: SortOrder
    away?: SortOrder
    allowDynamicBooking?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    disableImpersonation?: SortOrder
    emailVerificationToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    timeZone?: SortOrder
    weekStart?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    hideBranding?: SortOrder
    theme?: SortOrder
    createdDate?: SortOrder
    trialEndsAt?: SortOrder
    defaultScheduleId?: SortOrder
    completedOnboarding?: SortOrder
    locale?: SortOrder
    timeFormat?: SortOrder
    twoFactorSecret?: SortOrder
    twoFactorEnabled?: SortOrder
    identityProvider?: SortOrder
    identityProviderId?: SortOrder
    invitedTo?: SortOrder
    plan?: SortOrder
    brandColor?: SortOrder
    darkBrandColor?: SortOrder
    away?: SortOrder
    allowDynamicBooking?: SortOrder
    verified?: SortOrder
    role?: SortOrder
    disableImpersonation?: SortOrder
    emailVerificationToken?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    bufferTime?: SortOrder
    defaultScheduleId?: SortOrder
    timeFormat?: SortOrder
    invitedTo?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumIdentityProviderWithAggregatesFilter = {
    equals?: IdentityProvider
    in?: Enumerable<IdentityProvider>
    notIn?: Enumerable<IdentityProvider>
    not?: NestedEnumIdentityProviderWithAggregatesFilter | IdentityProvider
    _count?: NestedIntFilter
    _min?: NestedEnumIdentityProviderFilter
    _max?: NestedEnumIdentityProviderFilter
  }

  export type EnumUserPlanWithAggregatesFilter = {
    equals?: UserPlan
    in?: Enumerable<UserPlan>
    notIn?: Enumerable<UserPlan>
    not?: NestedEnumUserPlanWithAggregatesFilter | UserPlan
    _count?: NestedIntFilter
    _min?: NestedEnumUserPlanFilter
    _max?: NestedEnumUserPlanFilter
  }

  export type EnumUserPermissionRoleWithAggregatesFilter = {
    equals?: UserPermissionRole
    in?: Enumerable<UserPermissionRole>
    notIn?: Enumerable<UserPermissionRole>
    not?: NestedEnumUserPermissionRoleWithAggregatesFilter | UserPermissionRole
    _count?: NestedIntFilter
    _min?: NestedEnumUserPermissionRoleFilter
    _max?: NestedEnumUserPermissionRoleFilter
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    bio?: SortOrder
    hideBranding?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    bio?: SortOrder
    hideBranding?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    bio?: SortOrder
    hideBranding?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumMembershipRoleFilter = {
    equals?: MembershipRole
    in?: Enumerable<MembershipRole>
    notIn?: Enumerable<MembershipRole>
    not?: NestedEnumMembershipRoleFilter | MembershipRole
  }

  export type MembershipUserIdTeamIdCompoundUniqueInput = {
    userId: number
    teamId: number
  }

  export type MembershipCountOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    accepted?: SortOrder
    role?: SortOrder
  }

  export type MembershipAvgOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
  }

  export type MembershipMaxOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    accepted?: SortOrder
    role?: SortOrder
  }

  export type MembershipMinOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
    accepted?: SortOrder
    role?: SortOrder
  }

  export type MembershipSumOrderByAggregateInput = {
    teamId?: SortOrder
    userId?: SortOrder
  }

  export type EnumMembershipRoleWithAggregatesFilter = {
    equals?: MembershipRole
    in?: Enumerable<MembershipRole>
    notIn?: Enumerable<MembershipRole>
    not?: NestedEnumMembershipRoleWithAggregatesFilter | MembershipRole
    _count?: NestedIntFilter
    _min?: NestedEnumMembershipRoleFilter
    _max?: NestedEnumMembershipRoleFilter
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BookingRelationFilter = {
    is?: BookingWhereInput | null
    isNot?: BookingWhereInput | null
  }

  export type BookingReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    uid?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    meetingUrl?: SortOrder
    bookingId?: SortOrder
    externalCalendarId?: SortOrder
    deleted?: SortOrder
    credentialId?: SortOrder
  }

  export type BookingReferenceAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    credentialId?: SortOrder
  }

  export type BookingReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    uid?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    meetingUrl?: SortOrder
    bookingId?: SortOrder
    externalCalendarId?: SortOrder
    deleted?: SortOrder
    credentialId?: SortOrder
  }

  export type BookingReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    uid?: SortOrder
    meetingId?: SortOrder
    meetingPassword?: SortOrder
    meetingUrl?: SortOrder
    bookingId?: SortOrder
    externalCalendarId?: SortOrder
    deleted?: SortOrder
    credentialId?: SortOrder
  }

  export type BookingReferenceSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    credentialId?: SortOrder
  }

  export type AttendeeCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
    locale?: SortOrder
    bookingId?: SortOrder
  }

  export type AttendeeAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
  }

  export type AttendeeMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
    locale?: SortOrder
    bookingId?: SortOrder
  }

  export type AttendeeMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
    locale?: SortOrder
    bookingId?: SortOrder
  }

  export type AttendeeSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
  }

  export type DailyEventReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    dailyurl?: SortOrder
    dailytoken?: SortOrder
    bookingId?: SortOrder
  }

  export type DailyEventReferenceAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
  }

  export type DailyEventReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    dailyurl?: SortOrder
    dailytoken?: SortOrder
    bookingId?: SortOrder
  }

  export type DailyEventReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    dailyurl?: SortOrder
    dailytoken?: SortOrder
    bookingId?: SortOrder
  }

  export type DailyEventReferenceSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
  }

  export type BookingReferenceListRelationFilter = {
    every?: BookingReferenceWhereInput
    some?: BookingReferenceWhereInput
    none?: BookingReferenceWhereInput
  }

  export type AttendeeListRelationFilter = {
    every?: AttendeeWhereInput
    some?: AttendeeWhereInput
    none?: AttendeeWhereInput
  }

  export type DailyEventReferenceRelationFilter = {
    is?: DailyEventReferenceWhereInput | null
    isNot?: DailyEventReferenceWhereInput | null
  }

  export type EnumBookingStatusFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusFilter | BookingStatus
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type WorkflowReminderListRelationFilter = {
    every?: WorkflowReminderWhereInput
    some?: WorkflowReminderWhereInput
    none?: WorkflowReminderWhereInput
  }

  export type BookingReferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AttendeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowReminderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    customInputs?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    paid?: SortOrder
    destinationCalendarId?: SortOrder
    cancellationReason?: SortOrder
    rejectionReason?: SortOrder
    dynamicEventSlugRef?: SortOrder
    dynamicGroupSlugRef?: SortOrder
    rescheduled?: SortOrder
    fromReschedule?: SortOrder
    recurringEventId?: SortOrder
    smsReminderNumber?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    destinationCalendarId?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    paid?: SortOrder
    destinationCalendarId?: SortOrder
    cancellationReason?: SortOrder
    rejectionReason?: SortOrder
    dynamicEventSlugRef?: SortOrder
    dynamicGroupSlugRef?: SortOrder
    rescheduled?: SortOrder
    fromReschedule?: SortOrder
    recurringEventId?: SortOrder
    smsReminderNumber?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    paid?: SortOrder
    destinationCalendarId?: SortOrder
    cancellationReason?: SortOrder
    rejectionReason?: SortOrder
    dynamicEventSlugRef?: SortOrder
    dynamicGroupSlugRef?: SortOrder
    rescheduled?: SortOrder
    fromReschedule?: SortOrder
    recurringEventId?: SortOrder
    smsReminderNumber?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    destinationCalendarId?: SortOrder
  }

  export type EnumBookingStatusWithAggregatesFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusWithAggregatesFilter | BookingStatus
    _count?: NestedIntFilter
    _min?: NestedEnumBookingStatusFilter
    _max?: NestedEnumBookingStatusFilter
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    timeZone?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableListFilter = {
    equals?: Enumerable<number> | null
    has?: number | null
    hasEvery?: Enumerable<number>
    hasSome?: Enumerable<number>
    isEmpty?: boolean
  }

  export type AvailabilityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    days?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    date?: SortOrder
    scheduleId?: SortOrder
  }

  export type AvailabilityAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    days?: SortOrder
    scheduleId?: SortOrder
  }

  export type AvailabilityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    date?: SortOrder
    scheduleId?: SortOrder
  }

  export type AvailabilityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    date?: SortOrder
    scheduleId?: SortOrder
  }

  export type AvailabilitySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    days?: SortOrder
    scheduleId?: SortOrder
  }

  export type SelectedCalendarUserIdIntegrationExternalIdCompoundUniqueInput = {
    userId: number
    integration: string
    externalId: string
  }

  export type SelectedCalendarCountOrderByAggregateInput = {
    userId?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
  }

  export type SelectedCalendarAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SelectedCalendarMaxOrderByAggregateInput = {
    userId?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
  }

  export type SelectedCalendarMinOrderByAggregateInput = {
    userId?: SortOrder
    integration?: SortOrder
    externalId?: SortOrder
  }

  export type SelectedCalendarSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumEventTypeCustomInputTypeFilter = {
    equals?: EventTypeCustomInputType
    in?: Enumerable<EventTypeCustomInputType>
    notIn?: Enumerable<EventTypeCustomInputType>
    not?: NestedEnumEventTypeCustomInputTypeFilter | EventTypeCustomInputType
  }

  export type EventTypeCustomInputCountOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    placeholder?: SortOrder
  }

  export type EventTypeCustomInputAvgOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
  }

  export type EventTypeCustomInputMaxOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    placeholder?: SortOrder
  }

  export type EventTypeCustomInputMinOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
    label?: SortOrder
    type?: SortOrder
    required?: SortOrder
    placeholder?: SortOrder
  }

  export type EventTypeCustomInputSumOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
  }

  export type EnumEventTypeCustomInputTypeWithAggregatesFilter = {
    equals?: EventTypeCustomInputType
    in?: Enumerable<EventTypeCustomInputType>
    notIn?: Enumerable<EventTypeCustomInputType>
    not?: NestedEnumEventTypeCustomInputTypeWithAggregatesFilter | EventTypeCustomInputType
    _count?: NestedIntFilter
    _min?: NestedEnumEventTypeCustomInputTypeFilter
    _max?: NestedEnumEventTypeCustomInputTypeFilter
  }

  export type ResetPasswordRequestCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    expires?: SortOrder
  }

  export type ResetPasswordRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    expires?: SortOrder
  }

  export type ResetPasswordRequestMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    expires?: SortOrder
  }

  export type EnumReminderTypeFilter = {
    equals?: ReminderType
    in?: Enumerable<ReminderType>
    notIn?: Enumerable<ReminderType>
    not?: NestedEnumReminderTypeFilter | ReminderType
  }

  export type ReminderMailCountOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    reminderType?: SortOrder
    elapsedMinutes?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderMailAvgOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    elapsedMinutes?: SortOrder
  }

  export type ReminderMailMaxOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    reminderType?: SortOrder
    elapsedMinutes?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderMailMinOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    reminderType?: SortOrder
    elapsedMinutes?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderMailSumOrderByAggregateInput = {
    id?: SortOrder
    referenceId?: SortOrder
    elapsedMinutes?: SortOrder
  }

  export type EnumReminderTypeWithAggregatesFilter = {
    equals?: ReminderType
    in?: Enumerable<ReminderType>
    notIn?: Enumerable<ReminderType>
    not?: NestedEnumReminderTypeWithAggregatesFilter | ReminderType
    _count?: NestedIntFilter
    _min?: NestedEnumReminderTypeFilter
    _max?: NestedEnumReminderTypeFilter
  }

  export type EnumPaymentTypeFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeFilter | PaymentType
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    fee?: SortOrder
    currency?: SortOrder
    success?: SortOrder
    refunded?: SortOrder
    data?: SortOrder
    externalId?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    fee?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    fee?: SortOrder
    currency?: SortOrder
    success?: SortOrder
    refunded?: SortOrder
    externalId?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    fee?: SortOrder
    currency?: SortOrder
    success?: SortOrder
    refunded?: SortOrder
    externalId?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    amount?: SortOrder
    fee?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeWithAggregatesFilter | PaymentType
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTypeFilter
    _max?: NestedEnumPaymentTypeFilter
  }

  export type EnumWebhookTriggerEventsNullableListFilter = {
    equals?: Enumerable<WebhookTriggerEvents> | null
    has?: WebhookTriggerEvents | null
    hasEvery?: Enumerable<WebhookTriggerEvents>
    hasSome?: Enumerable<WebhookTriggerEvents>
    isEmpty?: boolean
  }

  export type WebhookCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    subscriberUrl?: SortOrder
    payloadTemplate?: SortOrder
    createdAt?: SortOrder
    active?: SortOrder
    eventTriggers?: SortOrder
    appId?: SortOrder
    secret?: SortOrder
  }

  export type WebhookAvgOrderByAggregateInput = {
    userId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type WebhookMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    subscriberUrl?: SortOrder
    payloadTemplate?: SortOrder
    createdAt?: SortOrder
    active?: SortOrder
    appId?: SortOrder
    secret?: SortOrder
  }

  export type WebhookMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventTypeId?: SortOrder
    subscriberUrl?: SortOrder
    payloadTemplate?: SortOrder
    createdAt?: SortOrder
    active?: SortOrder
    appId?: SortOrder
    secret?: SortOrder
  }

  export type WebhookSumOrderByAggregateInput = {
    userId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type ImpersonationsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
  }

  export type ImpersonationsAvgOrderByAggregateInput = {
    id?: SortOrder
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
  }

  export type ImpersonationsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
  }

  export type ImpersonationsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
  }

  export type ImpersonationsSumOrderByAggregateInput = {
    id?: SortOrder
    impersonatedUserId?: SortOrder
    impersonatedById?: SortOrder
  }

  export type ApiKeyCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    hashedKey?: SortOrder
    appId?: SortOrder
  }

  export type ApiKeyAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    hashedKey?: SortOrder
    appId?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    lastUsedAt?: SortOrder
    hashedKey?: SortOrder
    appId?: SortOrder
  }

  export type ApiKeySumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type HashedLinkCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    eventTypeId?: SortOrder
  }

  export type HashedLinkAvgOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
  }

  export type HashedLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    eventTypeId?: SortOrder
  }

  export type HashedLinkMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    eventTypeId?: SortOrder
  }

  export type HashedLinkSumOrderByAggregateInput = {
    id?: SortOrder
    eventTypeId?: SortOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumAppCategoriesNullableListFilter = {
    equals?: Enumerable<AppCategories> | null
    has?: AppCategories | null
    hasEvery?: Enumerable<AppCategories>
    hasSome?: Enumerable<AppCategories>
    isEmpty?: boolean
  }

  export type AppCountOrderByAggregateInput = {
    slug?: SortOrder
    dirName?: SortOrder
    keys?: SortOrder
    categories?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMaxOrderByAggregateInput = {
    slug?: SortOrder
    dirName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppMinOrderByAggregateInput = {
    slug?: SortOrder
    dirName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type App_RoutingForms_FormResponseListRelationFilter = {
    every?: App_RoutingForms_FormResponseWhereInput
    some?: App_RoutingForms_FormResponseWhereInput
    none?: App_RoutingForms_FormResponseWhereInput
  }

  export type App_RoutingForms_FormResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type App_RoutingForms_FormCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    routes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    fields?: SortOrder
    userId?: SortOrder
    disabled?: SortOrder
  }

  export type App_RoutingForms_FormAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type App_RoutingForms_FormMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    disabled?: SortOrder
  }

  export type App_RoutingForms_FormMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    disabled?: SortOrder
  }

  export type App_RoutingForms_FormSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type App_RoutingForms_FormRelationFilter = {
    is?: App_RoutingForms_FormWhereInput
    isNot?: App_RoutingForms_FormWhereInput
  }

  export type App_RoutingForms_FormResponseFormFillerIdFormIdCompoundUniqueInput = {
    formFillerId: string
    formId: string
  }

  export type App_RoutingForms_FormResponseCountOrderByAggregateInput = {
    id?: SortOrder
    formFillerId?: SortOrder
    formId?: SortOrder
    response?: SortOrder
  }

  export type App_RoutingForms_FormResponseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type App_RoutingForms_FormResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    formFillerId?: SortOrder
    formId?: SortOrder
  }

  export type App_RoutingForms_FormResponseMinOrderByAggregateInput = {
    id?: SortOrder
    formFillerId?: SortOrder
    formId?: SortOrder
  }

  export type App_RoutingForms_FormResponseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumWorkflowActionsFilter = {
    equals?: WorkflowActions
    in?: Enumerable<WorkflowActions>
    notIn?: Enumerable<WorkflowActions>
    not?: NestedEnumWorkflowActionsFilter | WorkflowActions
  }

  export type WorkflowRelationFilter = {
    is?: WorkflowWhereInput
    isNot?: WorkflowWhereInput
  }

  export type EnumWorkflowTemplatesFilter = {
    equals?: WorkflowTemplates
    in?: Enumerable<WorkflowTemplates>
    notIn?: Enumerable<WorkflowTemplates>
    not?: NestedEnumWorkflowTemplatesFilter | WorkflowTemplates
  }

  export type WorkflowStepCountOrderByAggregateInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    action?: SortOrder
    workflowId?: SortOrder
    sendTo?: SortOrder
    reminderBody?: SortOrder
    emailSubject?: SortOrder
    template?: SortOrder
  }

  export type WorkflowStepAvgOrderByAggregateInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    workflowId?: SortOrder
  }

  export type WorkflowStepMaxOrderByAggregateInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    action?: SortOrder
    workflowId?: SortOrder
    sendTo?: SortOrder
    reminderBody?: SortOrder
    emailSubject?: SortOrder
    template?: SortOrder
  }

  export type WorkflowStepMinOrderByAggregateInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    action?: SortOrder
    workflowId?: SortOrder
    sendTo?: SortOrder
    reminderBody?: SortOrder
    emailSubject?: SortOrder
    template?: SortOrder
  }

  export type WorkflowStepSumOrderByAggregateInput = {
    id?: SortOrder
    stepNumber?: SortOrder
    workflowId?: SortOrder
  }

  export type EnumWorkflowActionsWithAggregatesFilter = {
    equals?: WorkflowActions
    in?: Enumerable<WorkflowActions>
    notIn?: Enumerable<WorkflowActions>
    not?: NestedEnumWorkflowActionsWithAggregatesFilter | WorkflowActions
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowActionsFilter
    _max?: NestedEnumWorkflowActionsFilter
  }

  export type EnumWorkflowTemplatesWithAggregatesFilter = {
    equals?: WorkflowTemplates
    in?: Enumerable<WorkflowTemplates>
    notIn?: Enumerable<WorkflowTemplates>
    not?: NestedEnumWorkflowTemplatesWithAggregatesFilter | WorkflowTemplates
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowTemplatesFilter
    _max?: NestedEnumWorkflowTemplatesFilter
  }

  export type EnumWorkflowTriggerEventsFilter = {
    equals?: WorkflowTriggerEvents
    in?: Enumerable<WorkflowTriggerEvents>
    notIn?: Enumerable<WorkflowTriggerEvents>
    not?: NestedEnumWorkflowTriggerEventsFilter | WorkflowTriggerEvents
  }

  export type EnumTimeUnitNullableFilter = {
    equals?: TimeUnit | null
    in?: Enumerable<TimeUnit> | null
    notIn?: Enumerable<TimeUnit> | null
    not?: NestedEnumTimeUnitNullableFilter | TimeUnit | null
  }

  export type WorkflowStepListRelationFilter = {
    every?: WorkflowStepWhereInput
    some?: WorkflowStepWhereInput
    none?: WorkflowStepWhereInput
  }

  export type WorkflowStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    trigger?: SortOrder
    time?: SortOrder
    timeUnit?: SortOrder
  }

  export type WorkflowAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
  }

  export type WorkflowMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    trigger?: SortOrder
    time?: SortOrder
    timeUnit?: SortOrder
  }

  export type WorkflowMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    trigger?: SortOrder
    time?: SortOrder
    timeUnit?: SortOrder
  }

  export type WorkflowSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
  }

  export type EnumWorkflowTriggerEventsWithAggregatesFilter = {
    equals?: WorkflowTriggerEvents
    in?: Enumerable<WorkflowTriggerEvents>
    notIn?: Enumerable<WorkflowTriggerEvents>
    not?: NestedEnumWorkflowTriggerEventsWithAggregatesFilter | WorkflowTriggerEvents
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowTriggerEventsFilter
    _max?: NestedEnumWorkflowTriggerEventsFilter
  }

  export type EnumTimeUnitNullableWithAggregatesFilter = {
    equals?: TimeUnit | null
    in?: Enumerable<TimeUnit> | null
    notIn?: Enumerable<TimeUnit> | null
    not?: NestedEnumTimeUnitNullableWithAggregatesFilter | TimeUnit | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumTimeUnitNullableFilter
    _max?: NestedEnumTimeUnitNullableFilter
  }

  export type WorkflowsOnEventTypesCountOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type WorkflowsOnEventTypesAvgOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type WorkflowsOnEventTypesMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type WorkflowsOnEventTypesMinOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type WorkflowsOnEventTypesSumOrderByAggregateInput = {
    id?: SortOrder
    workflowId?: SortOrder
    eventTypeId?: SortOrder
  }

  export type EnumWorkflowMethodsFilter = {
    equals?: WorkflowMethods
    in?: Enumerable<WorkflowMethods>
    notIn?: Enumerable<WorkflowMethods>
    not?: NestedEnumWorkflowMethodsFilter | WorkflowMethods
  }

  export type WorkflowStepRelationFilter = {
    is?: WorkflowStepWhereInput
    isNot?: WorkflowStepWhereInput
  }

  export type WorkflowReminderCountOrderByAggregateInput = {
    id?: SortOrder
    bookingUid?: SortOrder
    method?: SortOrder
    scheduledDate?: SortOrder
    referenceId?: SortOrder
    scheduled?: SortOrder
    workflowStepId?: SortOrder
  }

  export type WorkflowReminderAvgOrderByAggregateInput = {
    id?: SortOrder
    workflowStepId?: SortOrder
  }

  export type WorkflowReminderMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingUid?: SortOrder
    method?: SortOrder
    scheduledDate?: SortOrder
    referenceId?: SortOrder
    scheduled?: SortOrder
    workflowStepId?: SortOrder
  }

  export type WorkflowReminderMinOrderByAggregateInput = {
    id?: SortOrder
    bookingUid?: SortOrder
    method?: SortOrder
    scheduledDate?: SortOrder
    referenceId?: SortOrder
    scheduled?: SortOrder
    workflowStepId?: SortOrder
  }

  export type WorkflowReminderSumOrderByAggregateInput = {
    id?: SortOrder
    workflowStepId?: SortOrder
  }

  export type EnumWorkflowMethodsWithAggregatesFilter = {
    equals?: WorkflowMethods
    in?: Enumerable<WorkflowMethods>
    notIn?: Enumerable<WorkflowMethods>
    not?: NestedEnumWorkflowMethodsWithAggregatesFilter | WorkflowMethods
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowMethodsFilter
    _max?: NestedEnumWorkflowMethodsFilter
  }

  export type UserCreateNestedManyWithoutEventTypesInput = {
    create?: XOR<Enumerable<UserCreateWithoutEventTypesInput>, Enumerable<UserUncheckedCreateWithoutEventTypesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEventTypesInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TeamCreateNestedOneWithoutEventTypesInput = {
    create?: XOR<TeamCreateWithoutEventTypesInput, TeamUncheckedCreateWithoutEventTypesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutEventTypesInput
    connect?: TeamWhereUniqueInput
  }

  export type HashedLinkCreateNestedOneWithoutEventTypeInput = {
    create?: XOR<HashedLinkCreateWithoutEventTypeInput, HashedLinkUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: HashedLinkCreateOrConnectWithoutEventTypeInput
    connect?: HashedLinkWhereUniqueInput
  }

  export type BookingCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<BookingCreateWithoutEventTypeInput>, Enumerable<BookingUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutEventTypeInput>
    createMany?: BookingCreateManyEventTypeInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type AvailabilityCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutEventTypeInput>, Enumerable<AvailabilityUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutEventTypeInput>
    createMany?: AvailabilityCreateManyEventTypeInputEnvelope
    connect?: Enumerable<AvailabilityWhereUniqueInput>
  }

  export type WebhookCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutEventTypeInput>, Enumerable<WebhookUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutEventTypeInput>
    createMany?: WebhookCreateManyEventTypeInputEnvelope
    connect?: Enumerable<WebhookWhereUniqueInput>
  }

  export type DestinationCalendarCreateNestedOneWithoutEventTypeInput = {
    create?: XOR<DestinationCalendarCreateWithoutEventTypeInput, DestinationCalendarUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutEventTypeInput
    connect?: DestinationCalendarWhereUniqueInput
  }

  export type EventTypeCustomInputCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<EventTypeCustomInputCreateWithoutEventTypeInput>, Enumerable<EventTypeCustomInputUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<EventTypeCustomInputCreateOrConnectWithoutEventTypeInput>
    createMany?: EventTypeCustomInputCreateManyEventTypeInputEnvelope
    connect?: Enumerable<EventTypeCustomInputWhereUniqueInput>
  }

  export type ScheduleCreateNestedOneWithoutEventTypeInput = {
    create?: XOR<ScheduleCreateWithoutEventTypeInput, ScheduleUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutEventTypeInput
    connect?: ScheduleWhereUniqueInput
  }

  export type WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutEventTypeInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput>
    createMany?: WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutEventTypesInput = {
    create?: XOR<Enumerable<UserCreateWithoutEventTypesInput>, Enumerable<UserUncheckedCreateWithoutEventTypesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEventTypesInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput = {
    create?: XOR<HashedLinkCreateWithoutEventTypeInput, HashedLinkUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: HashedLinkCreateOrConnectWithoutEventTypeInput
    connect?: HashedLinkWhereUniqueInput
  }

  export type BookingUncheckedCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<BookingCreateWithoutEventTypeInput>, Enumerable<BookingUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutEventTypeInput>
    createMany?: BookingCreateManyEventTypeInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutEventTypeInput>, Enumerable<AvailabilityUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutEventTypeInput>
    createMany?: AvailabilityCreateManyEventTypeInputEnvelope
    connect?: Enumerable<AvailabilityWhereUniqueInput>
  }

  export type WebhookUncheckedCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutEventTypeInput>, Enumerable<WebhookUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutEventTypeInput>
    createMany?: WebhookCreateManyEventTypeInputEnvelope
    connect?: Enumerable<WebhookWhereUniqueInput>
  }

  export type DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput = {
    create?: XOR<DestinationCalendarCreateWithoutEventTypeInput, DestinationCalendarUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutEventTypeInput
    connect?: DestinationCalendarWhereUniqueInput
  }

  export type EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<EventTypeCustomInputCreateWithoutEventTypeInput>, Enumerable<EventTypeCustomInputUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<EventTypeCustomInputCreateOrConnectWithoutEventTypeInput>
    createMany?: EventTypeCustomInputCreateManyEventTypeInputEnvelope
    connect?: Enumerable<EventTypeCustomInputWhereUniqueInput>
  }

  export type WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutEventTypeInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput>
    createMany?: WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateManyWithoutEventTypesInput = {
    create?: XOR<Enumerable<UserCreateWithoutEventTypesInput>, Enumerable<UserUncheckedCreateWithoutEventTypesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEventTypesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutEventTypesInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutEventTypesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutEventTypesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamUpdateOneWithoutEventTypesInput = {
    create?: XOR<TeamCreateWithoutEventTypesInput, TeamUncheckedCreateWithoutEventTypesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutEventTypesInput
    upsert?: TeamUpsertWithoutEventTypesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutEventTypesInput, TeamUncheckedUpdateWithoutEventTypesInput>
  }

  export type HashedLinkUpdateOneWithoutEventTypeInput = {
    create?: XOR<HashedLinkCreateWithoutEventTypeInput, HashedLinkUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: HashedLinkCreateOrConnectWithoutEventTypeInput
    upsert?: HashedLinkUpsertWithoutEventTypeInput
    disconnect?: boolean
    delete?: boolean
    connect?: HashedLinkWhereUniqueInput
    update?: XOR<HashedLinkUpdateWithoutEventTypeInput, HashedLinkUncheckedUpdateWithoutEventTypeInput>
  }

  export type BookingUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<BookingCreateWithoutEventTypeInput>, Enumerable<BookingUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: BookingCreateManyEventTypeInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type AvailabilityUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutEventTypeInput>, Enumerable<AvailabilityUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: AvailabilityCreateManyEventTypeInputEnvelope
    set?: Enumerable<AvailabilityWhereUniqueInput>
    disconnect?: Enumerable<AvailabilityWhereUniqueInput>
    delete?: Enumerable<AvailabilityWhereUniqueInput>
    connect?: Enumerable<AvailabilityWhereUniqueInput>
    update?: Enumerable<AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<AvailabilityUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<AvailabilityScalarWhereInput>
  }

  export type WebhookUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutEventTypeInput>, Enumerable<WebhookUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<WebhookUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: WebhookCreateManyEventTypeInputEnvelope
    set?: Enumerable<WebhookWhereUniqueInput>
    disconnect?: Enumerable<WebhookWhereUniqueInput>
    delete?: Enumerable<WebhookWhereUniqueInput>
    connect?: Enumerable<WebhookWhereUniqueInput>
    update?: Enumerable<WebhookUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<WebhookUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<WebhookScalarWhereInput>
  }

  export type DestinationCalendarUpdateOneWithoutEventTypeInput = {
    create?: XOR<DestinationCalendarCreateWithoutEventTypeInput, DestinationCalendarUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutEventTypeInput
    upsert?: DestinationCalendarUpsertWithoutEventTypeInput
    disconnect?: boolean
    delete?: boolean
    connect?: DestinationCalendarWhereUniqueInput
    update?: XOR<DestinationCalendarUpdateWithoutEventTypeInput, DestinationCalendarUncheckedUpdateWithoutEventTypeInput>
  }

  export type EventTypeCustomInputUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<EventTypeCustomInputCreateWithoutEventTypeInput>, Enumerable<EventTypeCustomInputUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<EventTypeCustomInputCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<EventTypeCustomInputUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: EventTypeCustomInputCreateManyEventTypeInputEnvelope
    set?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    disconnect?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    delete?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    connect?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    update?: Enumerable<EventTypeCustomInputUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<EventTypeCustomInputUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<EventTypeCustomInputScalarWhereInput>
  }

  export type EnumPeriodTypeFieldUpdateOperationsInput = {
    set?: PeriodType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableEnumSchedulingTypeFieldUpdateOperationsInput = {
    set?: SchedulingType | null
  }

  export type ScheduleUpdateOneWithoutEventTypeInput = {
    create?: XOR<ScheduleCreateWithoutEventTypeInput, ScheduleUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutEventTypeInput
    upsert?: ScheduleUpsertWithoutEventTypeInput
    disconnect?: boolean
    delete?: boolean
    connect?: ScheduleWhereUniqueInput
    update?: XOR<ScheduleUpdateWithoutEventTypeInput, ScheduleUncheckedUpdateWithoutEventTypeInput>
  }

  export type WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutEventTypeInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope
    set?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    disconnect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    delete?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    update?: Enumerable<WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutEventTypesInput = {
    create?: XOR<Enumerable<UserCreateWithoutEventTypesInput>, Enumerable<UserUncheckedCreateWithoutEventTypesInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutEventTypesInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutEventTypesInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutEventTypesInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutEventTypesInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type HashedLinkUncheckedUpdateOneWithoutEventTypeInput = {
    create?: XOR<HashedLinkCreateWithoutEventTypeInput, HashedLinkUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: HashedLinkCreateOrConnectWithoutEventTypeInput
    upsert?: HashedLinkUpsertWithoutEventTypeInput
    disconnect?: boolean
    delete?: boolean
    connect?: HashedLinkWhereUniqueInput
    update?: XOR<HashedLinkUpdateWithoutEventTypeInput, HashedLinkUncheckedUpdateWithoutEventTypeInput>
  }

  export type BookingUncheckedUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<BookingCreateWithoutEventTypeInput>, Enumerable<BookingUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: BookingCreateManyEventTypeInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type AvailabilityUncheckedUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutEventTypeInput>, Enumerable<AvailabilityUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: AvailabilityCreateManyEventTypeInputEnvelope
    set?: Enumerable<AvailabilityWhereUniqueInput>
    disconnect?: Enumerable<AvailabilityWhereUniqueInput>
    delete?: Enumerable<AvailabilityWhereUniqueInput>
    connect?: Enumerable<AvailabilityWhereUniqueInput>
    update?: Enumerable<AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<AvailabilityUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<AvailabilityScalarWhereInput>
  }

  export type WebhookUncheckedUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutEventTypeInput>, Enumerable<WebhookUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<WebhookUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: WebhookCreateManyEventTypeInputEnvelope
    set?: Enumerable<WebhookWhereUniqueInput>
    disconnect?: Enumerable<WebhookWhereUniqueInput>
    delete?: Enumerable<WebhookWhereUniqueInput>
    connect?: Enumerable<WebhookWhereUniqueInput>
    update?: Enumerable<WebhookUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<WebhookUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<WebhookScalarWhereInput>
  }

  export type DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput = {
    create?: XOR<DestinationCalendarCreateWithoutEventTypeInput, DestinationCalendarUncheckedCreateWithoutEventTypeInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutEventTypeInput
    upsert?: DestinationCalendarUpsertWithoutEventTypeInput
    disconnect?: boolean
    delete?: boolean
    connect?: DestinationCalendarWhereUniqueInput
    update?: XOR<DestinationCalendarUpdateWithoutEventTypeInput, DestinationCalendarUncheckedUpdateWithoutEventTypeInput>
  }

  export type EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<EventTypeCustomInputCreateWithoutEventTypeInput>, Enumerable<EventTypeCustomInputUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<EventTypeCustomInputCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<EventTypeCustomInputUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: EventTypeCustomInputCreateManyEventTypeInputEnvelope
    set?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    disconnect?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    delete?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    connect?: Enumerable<EventTypeCustomInputWhereUniqueInput>
    update?: Enumerable<EventTypeCustomInputUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<EventTypeCustomInputUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<EventTypeCustomInputScalarWhereInput>
  }

  export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutEventTypeInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput>
    upsert?: Enumerable<WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput>
    createMany?: WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope
    set?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    disconnect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    delete?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    update?: Enumerable<WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput>
    updateMany?: Enumerable<WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput>
    deleteMany?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCredentialsInput
    connect?: UserWhereUniqueInput
  }

  export type AppCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<AppCreateWithoutCredentialsInput, AppUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: AppCreateOrConnectWithoutCredentialsInput
    connect?: AppWhereUniqueInput
  }

  export type DestinationCalendarCreateNestedManyWithoutCredentialInput = {
    create?: XOR<Enumerable<DestinationCalendarCreateWithoutCredentialInput>, Enumerable<DestinationCalendarUncheckedCreateWithoutCredentialInput>>
    connectOrCreate?: Enumerable<DestinationCalendarCreateOrConnectWithoutCredentialInput>
    createMany?: DestinationCalendarCreateManyCredentialInputEnvelope
    connect?: Enumerable<DestinationCalendarWhereUniqueInput>
  }

  export type DestinationCalendarUncheckedCreateNestedManyWithoutCredentialInput = {
    create?: XOR<Enumerable<DestinationCalendarCreateWithoutCredentialInput>, Enumerable<DestinationCalendarUncheckedCreateWithoutCredentialInput>>
    connectOrCreate?: Enumerable<DestinationCalendarCreateOrConnectWithoutCredentialInput>
    createMany?: DestinationCalendarCreateManyCredentialInputEnvelope
    connect?: Enumerable<DestinationCalendarWhereUniqueInput>
  }

  export type UserUpdateOneWithoutCredentialsInput = {
    create?: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCredentialsInput
    upsert?: UserUpsertWithoutCredentialsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCredentialsInput, UserUncheckedUpdateWithoutCredentialsInput>
  }

  export type AppUpdateOneWithoutCredentialsInput = {
    create?: XOR<AppCreateWithoutCredentialsInput, AppUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: AppCreateOrConnectWithoutCredentialsInput
    upsert?: AppUpsertWithoutCredentialsInput
    disconnect?: boolean
    delete?: boolean
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutCredentialsInput, AppUncheckedUpdateWithoutCredentialsInput>
  }

  export type DestinationCalendarUpdateManyWithoutCredentialInput = {
    create?: XOR<Enumerable<DestinationCalendarCreateWithoutCredentialInput>, Enumerable<DestinationCalendarUncheckedCreateWithoutCredentialInput>>
    connectOrCreate?: Enumerable<DestinationCalendarCreateOrConnectWithoutCredentialInput>
    upsert?: Enumerable<DestinationCalendarUpsertWithWhereUniqueWithoutCredentialInput>
    createMany?: DestinationCalendarCreateManyCredentialInputEnvelope
    set?: Enumerable<DestinationCalendarWhereUniqueInput>
    disconnect?: Enumerable<DestinationCalendarWhereUniqueInput>
    delete?: Enumerable<DestinationCalendarWhereUniqueInput>
    connect?: Enumerable<DestinationCalendarWhereUniqueInput>
    update?: Enumerable<DestinationCalendarUpdateWithWhereUniqueWithoutCredentialInput>
    updateMany?: Enumerable<DestinationCalendarUpdateManyWithWhereWithoutCredentialInput>
    deleteMany?: Enumerable<DestinationCalendarScalarWhereInput>
  }

  export type DestinationCalendarUncheckedUpdateManyWithoutCredentialInput = {
    create?: XOR<Enumerable<DestinationCalendarCreateWithoutCredentialInput>, Enumerable<DestinationCalendarUncheckedCreateWithoutCredentialInput>>
    connectOrCreate?: Enumerable<DestinationCalendarCreateOrConnectWithoutCredentialInput>
    upsert?: Enumerable<DestinationCalendarUpsertWithWhereUniqueWithoutCredentialInput>
    createMany?: DestinationCalendarCreateManyCredentialInputEnvelope
    set?: Enumerable<DestinationCalendarWhereUniqueInput>
    disconnect?: Enumerable<DestinationCalendarWhereUniqueInput>
    delete?: Enumerable<DestinationCalendarWhereUniqueInput>
    connect?: Enumerable<DestinationCalendarWhereUniqueInput>
    update?: Enumerable<DestinationCalendarUpdateWithWhereUniqueWithoutCredentialInput>
    updateMany?: Enumerable<DestinationCalendarUpdateManyWithWhereWithoutCredentialInput>
    deleteMany?: Enumerable<DestinationCalendarScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutDestinationCalendarInput = {
    create?: XOR<UserCreateWithoutDestinationCalendarInput, UserUncheckedCreateWithoutDestinationCalendarInput>
    connectOrCreate?: UserCreateOrConnectWithoutDestinationCalendarInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedManyWithoutDestinationCalendarInput = {
    create?: XOR<Enumerable<BookingCreateWithoutDestinationCalendarInput>, Enumerable<BookingUncheckedCreateWithoutDestinationCalendarInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutDestinationCalendarInput>
    createMany?: BookingCreateManyDestinationCalendarInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type EventTypeCreateNestedOneWithoutDestinationCalendarInput = {
    create?: XOR<EventTypeCreateWithoutDestinationCalendarInput, EventTypeUncheckedCreateWithoutDestinationCalendarInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutDestinationCalendarInput
    connect?: EventTypeWhereUniqueInput
  }

  export type CredentialCreateNestedOneWithoutDestinationCalendarsInput = {
    create?: XOR<CredentialCreateWithoutDestinationCalendarsInput, CredentialUncheckedCreateWithoutDestinationCalendarsInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutDestinationCalendarsInput
    connect?: CredentialWhereUniqueInput
  }

  export type BookingUncheckedCreateNestedManyWithoutDestinationCalendarInput = {
    create?: XOR<Enumerable<BookingCreateWithoutDestinationCalendarInput>, Enumerable<BookingUncheckedCreateWithoutDestinationCalendarInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutDestinationCalendarInput>
    createMany?: BookingCreateManyDestinationCalendarInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type UserUpdateOneWithoutDestinationCalendarInput = {
    create?: XOR<UserCreateWithoutDestinationCalendarInput, UserUncheckedCreateWithoutDestinationCalendarInput>
    connectOrCreate?: UserCreateOrConnectWithoutDestinationCalendarInput
    upsert?: UserUpsertWithoutDestinationCalendarInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDestinationCalendarInput, UserUncheckedUpdateWithoutDestinationCalendarInput>
  }

  export type BookingUpdateManyWithoutDestinationCalendarInput = {
    create?: XOR<Enumerable<BookingCreateWithoutDestinationCalendarInput>, Enumerable<BookingUncheckedCreateWithoutDestinationCalendarInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutDestinationCalendarInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutDestinationCalendarInput>
    createMany?: BookingCreateManyDestinationCalendarInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutDestinationCalendarInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutDestinationCalendarInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type EventTypeUpdateOneWithoutDestinationCalendarInput = {
    create?: XOR<EventTypeCreateWithoutDestinationCalendarInput, EventTypeUncheckedCreateWithoutDestinationCalendarInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutDestinationCalendarInput
    upsert?: EventTypeUpsertWithoutDestinationCalendarInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutDestinationCalendarInput, EventTypeUncheckedUpdateWithoutDestinationCalendarInput>
  }

  export type CredentialUpdateOneWithoutDestinationCalendarsInput = {
    create?: XOR<CredentialCreateWithoutDestinationCalendarsInput, CredentialUncheckedCreateWithoutDestinationCalendarsInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutDestinationCalendarsInput
    upsert?: CredentialUpsertWithoutDestinationCalendarsInput
    disconnect?: boolean
    delete?: boolean
    connect?: CredentialWhereUniqueInput
    update?: XOR<CredentialUpdateWithoutDestinationCalendarsInput, CredentialUncheckedUpdateWithoutDestinationCalendarsInput>
  }

  export type BookingUncheckedUpdateManyWithoutDestinationCalendarInput = {
    create?: XOR<Enumerable<BookingCreateWithoutDestinationCalendarInput>, Enumerable<BookingUncheckedCreateWithoutDestinationCalendarInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutDestinationCalendarInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutDestinationCalendarInput>
    createMany?: BookingCreateManyDestinationCalendarInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutDestinationCalendarInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutDestinationCalendarInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type EventTypeCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutUsersInput>, Enumerable<EventTypeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
  }

  export type CredentialCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutUserInput>, Enumerable<CredentialUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutUserInput>
    createMany?: CredentialCreateManyUserInputEnvelope
    connect?: Enumerable<CredentialWhereUniqueInput>
  }

  export type MembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ScheduleCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ScheduleCreateWithoutUserInput>, Enumerable<ScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ScheduleCreateOrConnectWithoutUserInput>
    createMany?: ScheduleCreateManyUserInputEnvelope
    connect?: Enumerable<ScheduleWhereUniqueInput>
  }

  export type SelectedCalendarCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SelectedCalendarCreateWithoutUserInput>, Enumerable<SelectedCalendarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SelectedCalendarCreateOrConnectWithoutUserInput>
    createMany?: SelectedCalendarCreateManyUserInputEnvelope
    connect?: Enumerable<SelectedCalendarWhereUniqueInput>
  }

  export type AvailabilityCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutUserInput>, Enumerable<AvailabilityUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutUserInput>
    createMany?: AvailabilityCreateManyUserInputEnvelope
    connect?: Enumerable<AvailabilityWhereUniqueInput>
  }

  export type WebhookCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutUserInput>, Enumerable<WebhookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutUserInput>
    createMany?: WebhookCreateManyUserInputEnvelope
    connect?: Enumerable<WebhookWhereUniqueInput>
  }

  export type DestinationCalendarCreateNestedOneWithoutUserInput = {
    create?: XOR<DestinationCalendarCreateWithoutUserInput, DestinationCalendarUncheckedCreateWithoutUserInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutUserInput
    connect?: DestinationCalendarWhereUniqueInput
  }

  export type ImpersonationsCreateNestedManyWithoutImpersonatedUserInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedUserInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedUserInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedUserInput>
    createMany?: ImpersonationsCreateManyImpersonatedUserInputEnvelope
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
  }

  export type ImpersonationsCreateNestedManyWithoutImpersonatedByInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedByInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedByInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedByInput>
    createMany?: ImpersonationsCreateManyImpersonatedByInputEnvelope
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
  }

  export type ApiKeyCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutUserInput>, Enumerable<ApiKeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutUserInput>
    createMany?: ApiKeyCreateManyUserInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type WorkflowCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WorkflowCreateWithoutUserInput>, Enumerable<WorkflowUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WorkflowCreateOrConnectWithoutUserInput>
    createMany?: WorkflowCreateManyUserInputEnvelope
    connect?: Enumerable<WorkflowWhereUniqueInput>
  }

  export type App_RoutingForms_FormCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormCreateWithoutUserInput>, Enumerable<App_RoutingForms_FormUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormCreateOrConnectWithoutUserInput>
    createMany?: App_RoutingForms_FormCreateManyUserInputEnvelope
    connect?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: Enumerable<FeedbackWhereUniqueInput>
  }

  export type EventTypeUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutUsersInput>, Enumerable<EventTypeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
  }

  export type CredentialUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutUserInput>, Enumerable<CredentialUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutUserInput>
    createMany?: CredentialCreateManyUserInputEnvelope
    connect?: Enumerable<CredentialWhereUniqueInput>
  }

  export type MembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ScheduleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ScheduleCreateWithoutUserInput>, Enumerable<ScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ScheduleCreateOrConnectWithoutUserInput>
    createMany?: ScheduleCreateManyUserInputEnvelope
    connect?: Enumerable<ScheduleWhereUniqueInput>
  }

  export type SelectedCalendarUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SelectedCalendarCreateWithoutUserInput>, Enumerable<SelectedCalendarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SelectedCalendarCreateOrConnectWithoutUserInput>
    createMany?: SelectedCalendarCreateManyUserInputEnvelope
    connect?: Enumerable<SelectedCalendarWhereUniqueInput>
  }

  export type AvailabilityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutUserInput>, Enumerable<AvailabilityUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutUserInput>
    createMany?: AvailabilityCreateManyUserInputEnvelope
    connect?: Enumerable<AvailabilityWhereUniqueInput>
  }

  export type WebhookUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutUserInput>, Enumerable<WebhookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutUserInput>
    createMany?: WebhookCreateManyUserInputEnvelope
    connect?: Enumerable<WebhookWhereUniqueInput>
  }

  export type DestinationCalendarUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DestinationCalendarCreateWithoutUserInput, DestinationCalendarUncheckedCreateWithoutUserInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutUserInput
    connect?: DestinationCalendarWhereUniqueInput
  }

  export type ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedUserInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedUserInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedUserInput>
    createMany?: ImpersonationsCreateManyImpersonatedUserInputEnvelope
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
  }

  export type ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedByInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedByInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedByInput>
    createMany?: ImpersonationsCreateManyImpersonatedByInputEnvelope
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutUserInput>, Enumerable<ApiKeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutUserInput>
    createMany?: ApiKeyCreateManyUserInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type WorkflowUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WorkflowCreateWithoutUserInput>, Enumerable<WorkflowUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WorkflowCreateOrConnectWithoutUserInput>
    createMany?: WorkflowCreateManyUserInputEnvelope
    connect?: Enumerable<WorkflowWhereUniqueInput>
  }

  export type App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormCreateWithoutUserInput>, Enumerable<App_RoutingForms_FormUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormCreateOrConnectWithoutUserInput>
    createMany?: App_RoutingForms_FormCreateManyUserInputEnvelope
    connect?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: Enumerable<FeedbackWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EventTypeUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutUsersInput>, Enumerable<EventTypeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<EventTypeUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<EventTypeWhereUniqueInput>
    disconnect?: Enumerable<EventTypeWhereUniqueInput>
    delete?: Enumerable<EventTypeWhereUniqueInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
    update?: Enumerable<EventTypeUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<EventTypeUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<EventTypeScalarWhereInput>
  }

  export type CredentialUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutUserInput>, Enumerable<CredentialUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CredentialUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CredentialCreateManyUserInputEnvelope
    set?: Enumerable<CredentialWhereUniqueInput>
    disconnect?: Enumerable<CredentialWhereUniqueInput>
    delete?: Enumerable<CredentialWhereUniqueInput>
    connect?: Enumerable<CredentialWhereUniqueInput>
    update?: Enumerable<CredentialUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CredentialUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CredentialScalarWhereInput>
  }

  export type MembershipUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type BookingUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ScheduleUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ScheduleCreateWithoutUserInput>, Enumerable<ScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ScheduleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ScheduleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ScheduleCreateManyUserInputEnvelope
    set?: Enumerable<ScheduleWhereUniqueInput>
    disconnect?: Enumerable<ScheduleWhereUniqueInput>
    delete?: Enumerable<ScheduleWhereUniqueInput>
    connect?: Enumerable<ScheduleWhereUniqueInput>
    update?: Enumerable<ScheduleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ScheduleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ScheduleScalarWhereInput>
  }

  export type SelectedCalendarUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SelectedCalendarCreateWithoutUserInput>, Enumerable<SelectedCalendarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SelectedCalendarCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SelectedCalendarUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SelectedCalendarCreateManyUserInputEnvelope
    set?: Enumerable<SelectedCalendarWhereUniqueInput>
    disconnect?: Enumerable<SelectedCalendarWhereUniqueInput>
    delete?: Enumerable<SelectedCalendarWhereUniqueInput>
    connect?: Enumerable<SelectedCalendarWhereUniqueInput>
    update?: Enumerable<SelectedCalendarUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SelectedCalendarUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SelectedCalendarScalarWhereInput>
  }

  export type EnumIdentityProviderFieldUpdateOperationsInput = {
    set?: IdentityProvider
  }

  export type AvailabilityUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutUserInput>, Enumerable<AvailabilityUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AvailabilityUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AvailabilityCreateManyUserInputEnvelope
    set?: Enumerable<AvailabilityWhereUniqueInput>
    disconnect?: Enumerable<AvailabilityWhereUniqueInput>
    delete?: Enumerable<AvailabilityWhereUniqueInput>
    connect?: Enumerable<AvailabilityWhereUniqueInput>
    update?: Enumerable<AvailabilityUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AvailabilityUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AvailabilityScalarWhereInput>
  }

  export type EnumUserPlanFieldUpdateOperationsInput = {
    set?: UserPlan
  }

  export type WebhookUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutUserInput>, Enumerable<WebhookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WebhookUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WebhookCreateManyUserInputEnvelope
    set?: Enumerable<WebhookWhereUniqueInput>
    disconnect?: Enumerable<WebhookWhereUniqueInput>
    delete?: Enumerable<WebhookWhereUniqueInput>
    connect?: Enumerable<WebhookWhereUniqueInput>
    update?: Enumerable<WebhookUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WebhookUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WebhookScalarWhereInput>
  }

  export type DestinationCalendarUpdateOneWithoutUserInput = {
    create?: XOR<DestinationCalendarCreateWithoutUserInput, DestinationCalendarUncheckedCreateWithoutUserInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutUserInput
    upsert?: DestinationCalendarUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: DestinationCalendarWhereUniqueInput
    update?: XOR<DestinationCalendarUpdateWithoutUserInput, DestinationCalendarUncheckedUpdateWithoutUserInput>
  }

  export type EnumUserPermissionRoleFieldUpdateOperationsInput = {
    set?: UserPermissionRole
  }

  export type ImpersonationsUpdateManyWithoutImpersonatedUserInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedUserInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedUserInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedUserInput>
    upsert?: Enumerable<ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput>
    createMany?: ImpersonationsCreateManyImpersonatedUserInputEnvelope
    set?: Enumerable<ImpersonationsWhereUniqueInput>
    disconnect?: Enumerable<ImpersonationsWhereUniqueInput>
    delete?: Enumerable<ImpersonationsWhereUniqueInput>
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
    update?: Enumerable<ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput>
    updateMany?: Enumerable<ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput>
    deleteMany?: Enumerable<ImpersonationsScalarWhereInput>
  }

  export type ImpersonationsUpdateManyWithoutImpersonatedByInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedByInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedByInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedByInput>
    upsert?: Enumerable<ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput>
    createMany?: ImpersonationsCreateManyImpersonatedByInputEnvelope
    set?: Enumerable<ImpersonationsWhereUniqueInput>
    disconnect?: Enumerable<ImpersonationsWhereUniqueInput>
    delete?: Enumerable<ImpersonationsWhereUniqueInput>
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
    update?: Enumerable<ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput>
    updateMany?: Enumerable<ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput>
    deleteMany?: Enumerable<ImpersonationsScalarWhereInput>
  }

  export type ApiKeyUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutUserInput>, Enumerable<ApiKeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ApiKeyCreateManyUserInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type AccountUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type WorkflowUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<WorkflowCreateWithoutUserInput>, Enumerable<WorkflowUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WorkflowCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WorkflowUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WorkflowCreateManyUserInputEnvelope
    set?: Enumerable<WorkflowWhereUniqueInput>
    disconnect?: Enumerable<WorkflowWhereUniqueInput>
    delete?: Enumerable<WorkflowWhereUniqueInput>
    connect?: Enumerable<WorkflowWhereUniqueInput>
    update?: Enumerable<WorkflowUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WorkflowUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WorkflowScalarWhereInput>
  }

  export type App_RoutingForms_FormUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormCreateWithoutUserInput>, Enumerable<App_RoutingForms_FormUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<App_RoutingForms_FormUpsertWithWhereUniqueWithoutUserInput>
    createMany?: App_RoutingForms_FormCreateManyUserInputEnvelope
    set?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    disconnect?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    delete?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    connect?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    update?: Enumerable<App_RoutingForms_FormUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<App_RoutingForms_FormUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<App_RoutingForms_FormScalarWhereInput>
  }

  export type FeedbackUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FeedbackUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: Enumerable<FeedbackWhereUniqueInput>
    disconnect?: Enumerable<FeedbackWhereUniqueInput>
    delete?: Enumerable<FeedbackWhereUniqueInput>
    connect?: Enumerable<FeedbackWhereUniqueInput>
    update?: Enumerable<FeedbackUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FeedbackUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FeedbackScalarWhereInput>
  }

  export type EventTypeUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutUsersInput>, Enumerable<EventTypeUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<EventTypeUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<EventTypeWhereUniqueInput>
    disconnect?: Enumerable<EventTypeWhereUniqueInput>
    delete?: Enumerable<EventTypeWhereUniqueInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
    update?: Enumerable<EventTypeUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<EventTypeUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<EventTypeScalarWhereInput>
  }

  export type CredentialUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutUserInput>, Enumerable<CredentialUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CredentialUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CredentialCreateManyUserInputEnvelope
    set?: Enumerable<CredentialWhereUniqueInput>
    disconnect?: Enumerable<CredentialWhereUniqueInput>
    delete?: Enumerable<CredentialWhereUniqueInput>
    connect?: Enumerable<CredentialWhereUniqueInput>
    update?: Enumerable<CredentialUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CredentialUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CredentialScalarWhereInput>
  }

  export type MembershipUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ScheduleUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ScheduleCreateWithoutUserInput>, Enumerable<ScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ScheduleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ScheduleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ScheduleCreateManyUserInputEnvelope
    set?: Enumerable<ScheduleWhereUniqueInput>
    disconnect?: Enumerable<ScheduleWhereUniqueInput>
    delete?: Enumerable<ScheduleWhereUniqueInput>
    connect?: Enumerable<ScheduleWhereUniqueInput>
    update?: Enumerable<ScheduleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ScheduleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ScheduleScalarWhereInput>
  }

  export type SelectedCalendarUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SelectedCalendarCreateWithoutUserInput>, Enumerable<SelectedCalendarUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SelectedCalendarCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SelectedCalendarUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SelectedCalendarCreateManyUserInputEnvelope
    set?: Enumerable<SelectedCalendarWhereUniqueInput>
    disconnect?: Enumerable<SelectedCalendarWhereUniqueInput>
    delete?: Enumerable<SelectedCalendarWhereUniqueInput>
    connect?: Enumerable<SelectedCalendarWhereUniqueInput>
    update?: Enumerable<SelectedCalendarUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SelectedCalendarUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SelectedCalendarScalarWhereInput>
  }

  export type AvailabilityUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutUserInput>, Enumerable<AvailabilityUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AvailabilityUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AvailabilityCreateManyUserInputEnvelope
    set?: Enumerable<AvailabilityWhereUniqueInput>
    disconnect?: Enumerable<AvailabilityWhereUniqueInput>
    delete?: Enumerable<AvailabilityWhereUniqueInput>
    connect?: Enumerable<AvailabilityWhereUniqueInput>
    update?: Enumerable<AvailabilityUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AvailabilityUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AvailabilityScalarWhereInput>
  }

  export type WebhookUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutUserInput>, Enumerable<WebhookUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WebhookUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WebhookCreateManyUserInputEnvelope
    set?: Enumerable<WebhookWhereUniqueInput>
    disconnect?: Enumerable<WebhookWhereUniqueInput>
    delete?: Enumerable<WebhookWhereUniqueInput>
    connect?: Enumerable<WebhookWhereUniqueInput>
    update?: Enumerable<WebhookUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WebhookUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WebhookScalarWhereInput>
  }

  export type DestinationCalendarUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<DestinationCalendarCreateWithoutUserInput, DestinationCalendarUncheckedCreateWithoutUserInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutUserInput
    upsert?: DestinationCalendarUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: DestinationCalendarWhereUniqueInput
    update?: XOR<DestinationCalendarUpdateWithoutUserInput, DestinationCalendarUncheckedUpdateWithoutUserInput>
  }

  export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedUserInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedUserInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedUserInput>
    upsert?: Enumerable<ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput>
    createMany?: ImpersonationsCreateManyImpersonatedUserInputEnvelope
    set?: Enumerable<ImpersonationsWhereUniqueInput>
    disconnect?: Enumerable<ImpersonationsWhereUniqueInput>
    delete?: Enumerable<ImpersonationsWhereUniqueInput>
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
    update?: Enumerable<ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput>
    updateMany?: Enumerable<ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput>
    deleteMany?: Enumerable<ImpersonationsScalarWhereInput>
  }

  export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput = {
    create?: XOR<Enumerable<ImpersonationsCreateWithoutImpersonatedByInput>, Enumerable<ImpersonationsUncheckedCreateWithoutImpersonatedByInput>>
    connectOrCreate?: Enumerable<ImpersonationsCreateOrConnectWithoutImpersonatedByInput>
    upsert?: Enumerable<ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput>
    createMany?: ImpersonationsCreateManyImpersonatedByInputEnvelope
    set?: Enumerable<ImpersonationsWhereUniqueInput>
    disconnect?: Enumerable<ImpersonationsWhereUniqueInput>
    delete?: Enumerable<ImpersonationsWhereUniqueInput>
    connect?: Enumerable<ImpersonationsWhereUniqueInput>
    update?: Enumerable<ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput>
    updateMany?: Enumerable<ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput>
    deleteMany?: Enumerable<ImpersonationsScalarWhereInput>
  }

  export type ApiKeyUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutUserInput>, Enumerable<ApiKeyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ApiKeyCreateManyUserInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type WorkflowUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<WorkflowCreateWithoutUserInput>, Enumerable<WorkflowUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WorkflowCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WorkflowUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WorkflowCreateManyUserInputEnvelope
    set?: Enumerable<WorkflowWhereUniqueInput>
    disconnect?: Enumerable<WorkflowWhereUniqueInput>
    delete?: Enumerable<WorkflowWhereUniqueInput>
    connect?: Enumerable<WorkflowWhereUniqueInput>
    update?: Enumerable<WorkflowUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WorkflowUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WorkflowScalarWhereInput>
  }

  export type App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormCreateWithoutUserInput>, Enumerable<App_RoutingForms_FormUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<App_RoutingForms_FormUpsertWithWhereUniqueWithoutUserInput>
    createMany?: App_RoutingForms_FormCreateManyUserInputEnvelope
    set?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    disconnect?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    delete?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    connect?: Enumerable<App_RoutingForms_FormWhereUniqueInput>
    update?: Enumerable<App_RoutingForms_FormUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<App_RoutingForms_FormUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<App_RoutingForms_FormScalarWhereInput>
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FeedbackUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: Enumerable<FeedbackWhereUniqueInput>
    disconnect?: Enumerable<FeedbackWhereUniqueInput>
    delete?: Enumerable<FeedbackWhereUniqueInput>
    connect?: Enumerable<FeedbackWhereUniqueInput>
    update?: Enumerable<FeedbackUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FeedbackUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FeedbackScalarWhereInput>
  }

  export type MembershipCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutTeamInput>, Enumerable<MembershipUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutTeamInput>
    createMany?: MembershipCreateManyTeamInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type EventTypeCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutTeamInput>, Enumerable<EventTypeUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutTeamInput>
    createMany?: EventTypeCreateManyTeamInputEnvelope
    connect?: Enumerable<EventTypeWhereUniqueInput>
  }

  export type MembershipUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutTeamInput>, Enumerable<MembershipUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutTeamInput>
    createMany?: MembershipCreateManyTeamInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type EventTypeUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutTeamInput>, Enumerable<EventTypeUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutTeamInput>
    createMany?: EventTypeCreateManyTeamInputEnvelope
    connect?: Enumerable<EventTypeWhereUniqueInput>
  }

  export type MembershipUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutTeamInput>, Enumerable<MembershipUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: MembershipCreateManyTeamInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type EventTypeUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutTeamInput>, Enumerable<EventTypeUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<EventTypeUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: EventTypeCreateManyTeamInputEnvelope
    set?: Enumerable<EventTypeWhereUniqueInput>
    disconnect?: Enumerable<EventTypeWhereUniqueInput>
    delete?: Enumerable<EventTypeWhereUniqueInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
    update?: Enumerable<EventTypeUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<EventTypeUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<EventTypeScalarWhereInput>
  }

  export type MembershipUncheckedUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutTeamInput>, Enumerable<MembershipUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: MembershipCreateManyTeamInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type EventTypeUncheckedUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutTeamInput>, Enumerable<EventTypeUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<EventTypeUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: EventTypeCreateManyTeamInputEnvelope
    set?: Enumerable<EventTypeWhereUniqueInput>
    disconnect?: Enumerable<EventTypeWhereUniqueInput>
    delete?: Enumerable<EventTypeWhereUniqueInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
    update?: Enumerable<EventTypeUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<EventTypeUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<EventTypeScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMembershipRoleFieldUpdateOperationsInput = {
    set?: MembershipRole
  }

  export type TeamUpdateOneRequiredWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    upsert?: TeamUpsertWithoutMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutTeamsInput = {
    create?: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamsInput
    upsert?: UserUpsertWithoutTeamsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
  }

  export type BookingCreateNestedOneWithoutReferencesInput = {
    create?: XOR<BookingCreateWithoutReferencesInput, BookingUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: BookingCreateOrConnectWithoutReferencesInput
    connect?: BookingWhereUniqueInput
  }

  export type BookingUpdateOneWithoutReferencesInput = {
    create?: XOR<BookingCreateWithoutReferencesInput, BookingUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: BookingCreateOrConnectWithoutReferencesInput
    upsert?: BookingUpsertWithoutReferencesInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<BookingUpdateWithoutReferencesInput, BookingUncheckedUpdateWithoutReferencesInput>
  }

  export type BookingCreateNestedOneWithoutAttendeesInput = {
    create?: XOR<BookingCreateWithoutAttendeesInput, BookingUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: BookingCreateOrConnectWithoutAttendeesInput
    connect?: BookingWhereUniqueInput
  }

  export type BookingUpdateOneWithoutAttendeesInput = {
    create?: XOR<BookingCreateWithoutAttendeesInput, BookingUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: BookingCreateOrConnectWithoutAttendeesInput
    upsert?: BookingUpsertWithoutAttendeesInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<BookingUpdateWithoutAttendeesInput, BookingUncheckedUpdateWithoutAttendeesInput>
  }

  export type BookingCreateNestedOneWithoutDailyRefInput = {
    create?: XOR<BookingCreateWithoutDailyRefInput, BookingUncheckedCreateWithoutDailyRefInput>
    connectOrCreate?: BookingCreateOrConnectWithoutDailyRefInput
    connect?: BookingWhereUniqueInput
  }

  export type BookingUpdateOneWithoutDailyRefInput = {
    create?: XOR<BookingCreateWithoutDailyRefInput, BookingUncheckedCreateWithoutDailyRefInput>
    connectOrCreate?: BookingCreateOrConnectWithoutDailyRefInput
    upsert?: BookingUpsertWithoutDailyRefInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<BookingUpdateWithoutDailyRefInput, BookingUncheckedUpdateWithoutDailyRefInput>
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type BookingReferenceCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<BookingReferenceCreateWithoutBookingInput>, Enumerable<BookingReferenceUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<BookingReferenceCreateOrConnectWithoutBookingInput>
    createMany?: BookingReferenceCreateManyBookingInputEnvelope
    connect?: Enumerable<BookingReferenceWhereUniqueInput>
  }

  export type EventTypeCreateNestedOneWithoutBookingsInput = {
    create?: XOR<EventTypeCreateWithoutBookingsInput, EventTypeUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutBookingsInput
    connect?: EventTypeWhereUniqueInput
  }

  export type AttendeeCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<AttendeeCreateWithoutBookingInput>, Enumerable<AttendeeUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<AttendeeCreateOrConnectWithoutBookingInput>
    createMany?: AttendeeCreateManyBookingInputEnvelope
    connect?: Enumerable<AttendeeWhereUniqueInput>
  }

  export type DailyEventReferenceCreateNestedOneWithoutBookingInput = {
    create?: XOR<DailyEventReferenceCreateWithoutBookingInput, DailyEventReferenceUncheckedCreateWithoutBookingInput>
    connectOrCreate?: DailyEventReferenceCreateOrConnectWithoutBookingInput
    connect?: DailyEventReferenceWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutBookingInput>, Enumerable<PaymentUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutBookingInput>
    createMany?: PaymentCreateManyBookingInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type DestinationCalendarCreateNestedOneWithoutBookingInput = {
    create?: XOR<DestinationCalendarCreateWithoutBookingInput, DestinationCalendarUncheckedCreateWithoutBookingInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutBookingInput
    connect?: DestinationCalendarWhereUniqueInput
  }

  export type WorkflowReminderCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutBookingInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutBookingInput>
    createMany?: WorkflowReminderCreateManyBookingInputEnvelope
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
  }

  export type BookingReferenceUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<BookingReferenceCreateWithoutBookingInput>, Enumerable<BookingReferenceUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<BookingReferenceCreateOrConnectWithoutBookingInput>
    createMany?: BookingReferenceCreateManyBookingInputEnvelope
    connect?: Enumerable<BookingReferenceWhereUniqueInput>
  }

  export type AttendeeUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<AttendeeCreateWithoutBookingInput>, Enumerable<AttendeeUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<AttendeeCreateOrConnectWithoutBookingInput>
    createMany?: AttendeeCreateManyBookingInputEnvelope
    connect?: Enumerable<AttendeeWhereUniqueInput>
  }

  export type DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput = {
    create?: XOR<DailyEventReferenceCreateWithoutBookingInput, DailyEventReferenceUncheckedCreateWithoutBookingInput>
    connectOrCreate?: DailyEventReferenceCreateOrConnectWithoutBookingInput
    connect?: DailyEventReferenceWhereUniqueInput
  }

  export type PaymentUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutBookingInput>, Enumerable<PaymentUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutBookingInput>
    createMany?: PaymentCreateManyBookingInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutBookingInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutBookingInput>
    createMany?: WorkflowReminderCreateManyBookingInputEnvelope
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
  }

  export type UserUpdateOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type BookingReferenceUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<BookingReferenceCreateWithoutBookingInput>, Enumerable<BookingReferenceUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<BookingReferenceCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<BookingReferenceUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: BookingReferenceCreateManyBookingInputEnvelope
    set?: Enumerable<BookingReferenceWhereUniqueInput>
    disconnect?: Enumerable<BookingReferenceWhereUniqueInput>
    delete?: Enumerable<BookingReferenceWhereUniqueInput>
    connect?: Enumerable<BookingReferenceWhereUniqueInput>
    update?: Enumerable<BookingReferenceUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<BookingReferenceUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<BookingReferenceScalarWhereInput>
  }

  export type EventTypeUpdateOneWithoutBookingsInput = {
    create?: XOR<EventTypeCreateWithoutBookingsInput, EventTypeUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutBookingsInput
    upsert?: EventTypeUpsertWithoutBookingsInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutBookingsInput, EventTypeUncheckedUpdateWithoutBookingsInput>
  }

  export type AttendeeUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<AttendeeCreateWithoutBookingInput>, Enumerable<AttendeeUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<AttendeeCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<AttendeeUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: AttendeeCreateManyBookingInputEnvelope
    set?: Enumerable<AttendeeWhereUniqueInput>
    disconnect?: Enumerable<AttendeeWhereUniqueInput>
    delete?: Enumerable<AttendeeWhereUniqueInput>
    connect?: Enumerable<AttendeeWhereUniqueInput>
    update?: Enumerable<AttendeeUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<AttendeeUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<AttendeeScalarWhereInput>
  }

  export type DailyEventReferenceUpdateOneWithoutBookingInput = {
    create?: XOR<DailyEventReferenceCreateWithoutBookingInput, DailyEventReferenceUncheckedCreateWithoutBookingInput>
    connectOrCreate?: DailyEventReferenceCreateOrConnectWithoutBookingInput
    upsert?: DailyEventReferenceUpsertWithoutBookingInput
    disconnect?: boolean
    delete?: boolean
    connect?: DailyEventReferenceWhereUniqueInput
    update?: XOR<DailyEventReferenceUpdateWithoutBookingInput, DailyEventReferenceUncheckedUpdateWithoutBookingInput>
  }

  export type EnumBookingStatusFieldUpdateOperationsInput = {
    set?: BookingStatus
  }

  export type PaymentUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutBookingInput>, Enumerable<PaymentUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: PaymentCreateManyBookingInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type DestinationCalendarUpdateOneWithoutBookingInput = {
    create?: XOR<DestinationCalendarCreateWithoutBookingInput, DestinationCalendarUncheckedCreateWithoutBookingInput>
    connectOrCreate?: DestinationCalendarCreateOrConnectWithoutBookingInput
    upsert?: DestinationCalendarUpsertWithoutBookingInput
    disconnect?: boolean
    delete?: boolean
    connect?: DestinationCalendarWhereUniqueInput
    update?: XOR<DestinationCalendarUpdateWithoutBookingInput, DestinationCalendarUncheckedUpdateWithoutBookingInput>
  }

  export type WorkflowReminderUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutBookingInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<WorkflowReminderUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: WorkflowReminderCreateManyBookingInputEnvelope
    set?: Enumerable<WorkflowReminderWhereUniqueInput>
    disconnect?: Enumerable<WorkflowReminderWhereUniqueInput>
    delete?: Enumerable<WorkflowReminderWhereUniqueInput>
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
    update?: Enumerable<WorkflowReminderUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<WorkflowReminderUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<WorkflowReminderScalarWhereInput>
  }

  export type BookingReferenceUncheckedUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<BookingReferenceCreateWithoutBookingInput>, Enumerable<BookingReferenceUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<BookingReferenceCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<BookingReferenceUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: BookingReferenceCreateManyBookingInputEnvelope
    set?: Enumerable<BookingReferenceWhereUniqueInput>
    disconnect?: Enumerable<BookingReferenceWhereUniqueInput>
    delete?: Enumerable<BookingReferenceWhereUniqueInput>
    connect?: Enumerable<BookingReferenceWhereUniqueInput>
    update?: Enumerable<BookingReferenceUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<BookingReferenceUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<BookingReferenceScalarWhereInput>
  }

  export type AttendeeUncheckedUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<AttendeeCreateWithoutBookingInput>, Enumerable<AttendeeUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<AttendeeCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<AttendeeUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: AttendeeCreateManyBookingInputEnvelope
    set?: Enumerable<AttendeeWhereUniqueInput>
    disconnect?: Enumerable<AttendeeWhereUniqueInput>
    delete?: Enumerable<AttendeeWhereUniqueInput>
    connect?: Enumerable<AttendeeWhereUniqueInput>
    update?: Enumerable<AttendeeUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<AttendeeUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<AttendeeScalarWhereInput>
  }

  export type DailyEventReferenceUncheckedUpdateOneWithoutBookingInput = {
    create?: XOR<DailyEventReferenceCreateWithoutBookingInput, DailyEventReferenceUncheckedCreateWithoutBookingInput>
    connectOrCreate?: DailyEventReferenceCreateOrConnectWithoutBookingInput
    upsert?: DailyEventReferenceUpsertWithoutBookingInput
    disconnect?: boolean
    delete?: boolean
    connect?: DailyEventReferenceWhereUniqueInput
    update?: XOR<DailyEventReferenceUpdateWithoutBookingInput, DailyEventReferenceUncheckedUpdateWithoutBookingInput>
  }

  export type PaymentUncheckedUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutBookingInput>, Enumerable<PaymentUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: PaymentCreateManyBookingInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type WorkflowReminderUncheckedUpdateManyWithoutBookingInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutBookingInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<WorkflowReminderUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: WorkflowReminderCreateManyBookingInputEnvelope
    set?: Enumerable<WorkflowReminderWhereUniqueInput>
    disconnect?: Enumerable<WorkflowReminderWhereUniqueInput>
    delete?: Enumerable<WorkflowReminderWhereUniqueInput>
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
    update?: Enumerable<WorkflowReminderUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<WorkflowReminderUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<WorkflowReminderScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type EventTypeCreateNestedManyWithoutScheduleInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutScheduleInput>, Enumerable<EventTypeUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutScheduleInput>
    createMany?: EventTypeCreateManyScheduleInputEnvelope
    connect?: Enumerable<EventTypeWhereUniqueInput>
  }

  export type AvailabilityCreateNestedManyWithoutScheduleInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutScheduleInput>, Enumerable<AvailabilityUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutScheduleInput>
    createMany?: AvailabilityCreateManyScheduleInputEnvelope
    connect?: Enumerable<AvailabilityWhereUniqueInput>
  }

  export type EventTypeUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutScheduleInput>, Enumerable<EventTypeUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutScheduleInput>
    createMany?: EventTypeCreateManyScheduleInputEnvelope
    connect?: Enumerable<EventTypeWhereUniqueInput>
  }

  export type AvailabilityUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutScheduleInput>, Enumerable<AvailabilityUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutScheduleInput>
    createMany?: AvailabilityCreateManyScheduleInputEnvelope
    connect?: Enumerable<AvailabilityWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutSchedulesInput = {
    create?: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchedulesInput
    upsert?: UserUpsertWithoutSchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSchedulesInput, UserUncheckedUpdateWithoutSchedulesInput>
  }

  export type EventTypeUpdateManyWithoutScheduleInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutScheduleInput>, Enumerable<EventTypeUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutScheduleInput>
    upsert?: Enumerable<EventTypeUpsertWithWhereUniqueWithoutScheduleInput>
    createMany?: EventTypeCreateManyScheduleInputEnvelope
    set?: Enumerable<EventTypeWhereUniqueInput>
    disconnect?: Enumerable<EventTypeWhereUniqueInput>
    delete?: Enumerable<EventTypeWhereUniqueInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
    update?: Enumerable<EventTypeUpdateWithWhereUniqueWithoutScheduleInput>
    updateMany?: Enumerable<EventTypeUpdateManyWithWhereWithoutScheduleInput>
    deleteMany?: Enumerable<EventTypeScalarWhereInput>
  }

  export type AvailabilityUpdateManyWithoutScheduleInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutScheduleInput>, Enumerable<AvailabilityUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutScheduleInput>
    upsert?: Enumerable<AvailabilityUpsertWithWhereUniqueWithoutScheduleInput>
    createMany?: AvailabilityCreateManyScheduleInputEnvelope
    set?: Enumerable<AvailabilityWhereUniqueInput>
    disconnect?: Enumerable<AvailabilityWhereUniqueInput>
    delete?: Enumerable<AvailabilityWhereUniqueInput>
    connect?: Enumerable<AvailabilityWhereUniqueInput>
    update?: Enumerable<AvailabilityUpdateWithWhereUniqueWithoutScheduleInput>
    updateMany?: Enumerable<AvailabilityUpdateManyWithWhereWithoutScheduleInput>
    deleteMany?: Enumerable<AvailabilityScalarWhereInput>
  }

  export type EventTypeUncheckedUpdateManyWithoutScheduleInput = {
    create?: XOR<Enumerable<EventTypeCreateWithoutScheduleInput>, Enumerable<EventTypeUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<EventTypeCreateOrConnectWithoutScheduleInput>
    upsert?: Enumerable<EventTypeUpsertWithWhereUniqueWithoutScheduleInput>
    createMany?: EventTypeCreateManyScheduleInputEnvelope
    set?: Enumerable<EventTypeWhereUniqueInput>
    disconnect?: Enumerable<EventTypeWhereUniqueInput>
    delete?: Enumerable<EventTypeWhereUniqueInput>
    connect?: Enumerable<EventTypeWhereUniqueInput>
    update?: Enumerable<EventTypeUpdateWithWhereUniqueWithoutScheduleInput>
    updateMany?: Enumerable<EventTypeUpdateManyWithWhereWithoutScheduleInput>
    deleteMany?: Enumerable<EventTypeScalarWhereInput>
  }

  export type AvailabilityUncheckedUpdateManyWithoutScheduleInput = {
    create?: XOR<Enumerable<AvailabilityCreateWithoutScheduleInput>, Enumerable<AvailabilityUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<AvailabilityCreateOrConnectWithoutScheduleInput>
    upsert?: Enumerable<AvailabilityUpsertWithWhereUniqueWithoutScheduleInput>
    createMany?: AvailabilityCreateManyScheduleInputEnvelope
    set?: Enumerable<AvailabilityWhereUniqueInput>
    disconnect?: Enumerable<AvailabilityWhereUniqueInput>
    delete?: Enumerable<AvailabilityWhereUniqueInput>
    connect?: Enumerable<AvailabilityWhereUniqueInput>
    update?: Enumerable<AvailabilityUpdateWithWhereUniqueWithoutScheduleInput>
    updateMany?: Enumerable<AvailabilityUpdateManyWithWhereWithoutScheduleInput>
    deleteMany?: Enumerable<AvailabilityScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAvailabilityInput = {
    create?: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvailabilityInput
    connect?: UserWhereUniqueInput
  }

  export type EventTypeCreateNestedOneWithoutAvailabilityInput = {
    create?: XOR<EventTypeCreateWithoutAvailabilityInput, EventTypeUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutAvailabilityInput
    connect?: EventTypeWhereUniqueInput
  }

  export type AvailabilityCreatedaysInput = {
    set: Enumerable<number>
  }

  export type ScheduleCreateNestedOneWithoutAvailabilityInput = {
    create?: XOR<ScheduleCreateWithoutAvailabilityInput, ScheduleUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutAvailabilityInput
    connect?: ScheduleWhereUniqueInput
  }

  export type UserUpdateOneWithoutAvailabilityInput = {
    create?: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvailabilityInput
    upsert?: UserUpsertWithoutAvailabilityInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAvailabilityInput, UserUncheckedUpdateWithoutAvailabilityInput>
  }

  export type EventTypeUpdateOneWithoutAvailabilityInput = {
    create?: XOR<EventTypeCreateWithoutAvailabilityInput, EventTypeUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutAvailabilityInput
    upsert?: EventTypeUpsertWithoutAvailabilityInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutAvailabilityInput, EventTypeUncheckedUpdateWithoutAvailabilityInput>
  }

  export type AvailabilityUpdatedaysInput = {
    set?: Enumerable<number>
    push?: number | Enumerable<number>
  }

  export type ScheduleUpdateOneWithoutAvailabilityInput = {
    create?: XOR<ScheduleCreateWithoutAvailabilityInput, ScheduleUncheckedCreateWithoutAvailabilityInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutAvailabilityInput
    upsert?: ScheduleUpsertWithoutAvailabilityInput
    disconnect?: boolean
    delete?: boolean
    connect?: ScheduleWhereUniqueInput
    update?: XOR<ScheduleUpdateWithoutAvailabilityInput, ScheduleUncheckedUpdateWithoutAvailabilityInput>
  }

  export type UserCreateNestedOneWithoutSelectedCalendarsInput = {
    create?: XOR<UserCreateWithoutSelectedCalendarsInput, UserUncheckedCreateWithoutSelectedCalendarsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelectedCalendarsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSelectedCalendarsInput = {
    create?: XOR<UserCreateWithoutSelectedCalendarsInput, UserUncheckedCreateWithoutSelectedCalendarsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSelectedCalendarsInput
    upsert?: UserUpsertWithoutSelectedCalendarsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSelectedCalendarsInput, UserUncheckedUpdateWithoutSelectedCalendarsInput>
  }

  export type EventTypeCreateNestedOneWithoutCustomInputsInput = {
    create?: XOR<EventTypeCreateWithoutCustomInputsInput, EventTypeUncheckedCreateWithoutCustomInputsInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutCustomInputsInput
    connect?: EventTypeWhereUniqueInput
  }

  export type EventTypeUpdateOneRequiredWithoutCustomInputsInput = {
    create?: XOR<EventTypeCreateWithoutCustomInputsInput, EventTypeUncheckedCreateWithoutCustomInputsInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutCustomInputsInput
    upsert?: EventTypeUpsertWithoutCustomInputsInput
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutCustomInputsInput, EventTypeUncheckedUpdateWithoutCustomInputsInput>
  }

  export type EnumEventTypeCustomInputTypeFieldUpdateOperationsInput = {
    set?: EventTypeCustomInputType
  }

  export type EnumReminderTypeFieldUpdateOperationsInput = {
    set?: ReminderType
  }

  export type BookingCreateNestedOneWithoutPaymentInput = {
    create?: XOR<BookingCreateWithoutPaymentInput, BookingUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: BookingCreateOrConnectWithoutPaymentInput
    connect?: BookingWhereUniqueInput
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: PaymentType
  }

  export type BookingUpdateOneWithoutPaymentInput = {
    create?: XOR<BookingCreateWithoutPaymentInput, BookingUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: BookingCreateOrConnectWithoutPaymentInput
    upsert?: BookingUpsertWithoutPaymentInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<BookingUpdateWithoutPaymentInput, BookingUncheckedUpdateWithoutPaymentInput>
  }

  export type WebhookCreateeventTriggersInput = {
    set: Enumerable<WebhookTriggerEvents>
  }

  export type UserCreateNestedOneWithoutWebhooksInput = {
    create?: XOR<UserCreateWithoutWebhooksInput, UserUncheckedCreateWithoutWebhooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebhooksInput
    connect?: UserWhereUniqueInput
  }

  export type EventTypeCreateNestedOneWithoutWebhooksInput = {
    create?: XOR<EventTypeCreateWithoutWebhooksInput, EventTypeUncheckedCreateWithoutWebhooksInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutWebhooksInput
    connect?: EventTypeWhereUniqueInput
  }

  export type AppCreateNestedOneWithoutWebhookInput = {
    create?: XOR<AppCreateWithoutWebhookInput, AppUncheckedCreateWithoutWebhookInput>
    connectOrCreate?: AppCreateOrConnectWithoutWebhookInput
    connect?: AppWhereUniqueInput
  }

  export type WebhookUpdateeventTriggersInput = {
    set?: Enumerable<WebhookTriggerEvents>
    push?: Enumerable<WebhookTriggerEvents>
  }

  export type UserUpdateOneWithoutWebhooksInput = {
    create?: XOR<UserCreateWithoutWebhooksInput, UserUncheckedCreateWithoutWebhooksInput>
    connectOrCreate?: UserCreateOrConnectWithoutWebhooksInput
    upsert?: UserUpsertWithoutWebhooksInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWebhooksInput, UserUncheckedUpdateWithoutWebhooksInput>
  }

  export type EventTypeUpdateOneWithoutWebhooksInput = {
    create?: XOR<EventTypeCreateWithoutWebhooksInput, EventTypeUncheckedCreateWithoutWebhooksInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutWebhooksInput
    upsert?: EventTypeUpsertWithoutWebhooksInput
    disconnect?: boolean
    delete?: boolean
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutWebhooksInput, EventTypeUncheckedUpdateWithoutWebhooksInput>
  }

  export type AppUpdateOneWithoutWebhookInput = {
    create?: XOR<AppCreateWithoutWebhookInput, AppUncheckedCreateWithoutWebhookInput>
    connectOrCreate?: AppCreateOrConnectWithoutWebhookInput
    upsert?: AppUpsertWithoutWebhookInput
    disconnect?: boolean
    delete?: boolean
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutWebhookInput, AppUncheckedUpdateWithoutWebhookInput>
  }

  export type UserCreateNestedOneWithoutImpersonatedUsersInput = {
    create?: XOR<UserCreateWithoutImpersonatedUsersInput, UserUncheckedCreateWithoutImpersonatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutImpersonatedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutImpersonatedByInput = {
    create?: XOR<UserCreateWithoutImpersonatedByInput, UserUncheckedCreateWithoutImpersonatedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutImpersonatedByInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutImpersonatedUsersInput = {
    create?: XOR<UserCreateWithoutImpersonatedUsersInput, UserUncheckedCreateWithoutImpersonatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutImpersonatedUsersInput
    upsert?: UserUpsertWithoutImpersonatedUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutImpersonatedUsersInput, UserUncheckedUpdateWithoutImpersonatedUsersInput>
  }

  export type UserUpdateOneRequiredWithoutImpersonatedByInput = {
    create?: XOR<UserCreateWithoutImpersonatedByInput, UserUncheckedCreateWithoutImpersonatedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutImpersonatedByInput
    upsert?: UserUpsertWithoutImpersonatedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutImpersonatedByInput, UserUncheckedUpdateWithoutImpersonatedByInput>
  }

  export type UserCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutApiKeysInput
    connect?: UserWhereUniqueInput
  }

  export type AppCreateNestedOneWithoutApiKeyInput = {
    create?: XOR<AppCreateWithoutApiKeyInput, AppUncheckedCreateWithoutApiKeyInput>
    connectOrCreate?: AppCreateOrConnectWithoutApiKeyInput
    connect?: AppWhereUniqueInput
  }

  export type UserUpdateOneWithoutApiKeysInput = {
    create?: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutApiKeysInput
    upsert?: UserUpsertWithoutApiKeysInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutApiKeysInput, UserUncheckedUpdateWithoutApiKeysInput>
  }

  export type AppUpdateOneWithoutApiKeyInput = {
    create?: XOR<AppCreateWithoutApiKeyInput, AppUncheckedCreateWithoutApiKeyInput>
    connectOrCreate?: AppCreateOrConnectWithoutApiKeyInput
    upsert?: AppUpsertWithoutApiKeyInput
    disconnect?: boolean
    delete?: boolean
    connect?: AppWhereUniqueInput
    update?: XOR<AppUpdateWithoutApiKeyInput, AppUncheckedUpdateWithoutApiKeyInput>
  }

  export type EventTypeCreateNestedOneWithoutHashedLinkInput = {
    create?: XOR<EventTypeCreateWithoutHashedLinkInput, EventTypeUncheckedCreateWithoutHashedLinkInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutHashedLinkInput
    connect?: EventTypeWhereUniqueInput
  }

  export type EventTypeUpdateOneRequiredWithoutHashedLinkInput = {
    create?: XOR<EventTypeCreateWithoutHashedLinkInput, EventTypeUncheckedCreateWithoutHashedLinkInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutHashedLinkInput
    upsert?: EventTypeUpsertWithoutHashedLinkInput
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutHashedLinkInput, EventTypeUncheckedUpdateWithoutHashedLinkInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AppCreatecategoriesInput = {
    set: Enumerable<AppCategories>
  }

  export type CredentialCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutAppInput>, Enumerable<CredentialUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutAppInput>
    createMany?: CredentialCreateManyAppInputEnvelope
    connect?: Enumerable<CredentialWhereUniqueInput>
  }

  export type WebhookCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutAppInput>, Enumerable<WebhookUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutAppInput>
    createMany?: WebhookCreateManyAppInputEnvelope
    connect?: Enumerable<WebhookWhereUniqueInput>
  }

  export type ApiKeyCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutAppInput>, Enumerable<ApiKeyUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutAppInput>
    createMany?: ApiKeyCreateManyAppInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type CredentialUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutAppInput>, Enumerable<CredentialUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutAppInput>
    createMany?: CredentialCreateManyAppInputEnvelope
    connect?: Enumerable<CredentialWhereUniqueInput>
  }

  export type WebhookUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutAppInput>, Enumerable<WebhookUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutAppInput>
    createMany?: WebhookCreateManyAppInputEnvelope
    connect?: Enumerable<WebhookWhereUniqueInput>
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutAppInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutAppInput>, Enumerable<ApiKeyUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutAppInput>
    createMany?: ApiKeyCreateManyAppInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type AppUpdatecategoriesInput = {
    set?: Enumerable<AppCategories>
    push?: Enumerable<AppCategories>
  }

  export type CredentialUpdateManyWithoutAppInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutAppInput>, Enumerable<CredentialUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<CredentialUpsertWithWhereUniqueWithoutAppInput>
    createMany?: CredentialCreateManyAppInputEnvelope
    set?: Enumerable<CredentialWhereUniqueInput>
    disconnect?: Enumerable<CredentialWhereUniqueInput>
    delete?: Enumerable<CredentialWhereUniqueInput>
    connect?: Enumerable<CredentialWhereUniqueInput>
    update?: Enumerable<CredentialUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<CredentialUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<CredentialScalarWhereInput>
  }

  export type WebhookUpdateManyWithoutAppInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutAppInput>, Enumerable<WebhookUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<WebhookUpsertWithWhereUniqueWithoutAppInput>
    createMany?: WebhookCreateManyAppInputEnvelope
    set?: Enumerable<WebhookWhereUniqueInput>
    disconnect?: Enumerable<WebhookWhereUniqueInput>
    delete?: Enumerable<WebhookWhereUniqueInput>
    connect?: Enumerable<WebhookWhereUniqueInput>
    update?: Enumerable<WebhookUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<WebhookUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<WebhookScalarWhereInput>
  }

  export type ApiKeyUpdateManyWithoutAppInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutAppInput>, Enumerable<ApiKeyUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutAppInput>
    createMany?: ApiKeyCreateManyAppInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type CredentialUncheckedUpdateManyWithoutAppInput = {
    create?: XOR<Enumerable<CredentialCreateWithoutAppInput>, Enumerable<CredentialUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<CredentialCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<CredentialUpsertWithWhereUniqueWithoutAppInput>
    createMany?: CredentialCreateManyAppInputEnvelope
    set?: Enumerable<CredentialWhereUniqueInput>
    disconnect?: Enumerable<CredentialWhereUniqueInput>
    delete?: Enumerable<CredentialWhereUniqueInput>
    connect?: Enumerable<CredentialWhereUniqueInput>
    update?: Enumerable<CredentialUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<CredentialUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<CredentialScalarWhereInput>
  }

  export type WebhookUncheckedUpdateManyWithoutAppInput = {
    create?: XOR<Enumerable<WebhookCreateWithoutAppInput>, Enumerable<WebhookUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<WebhookCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<WebhookUpsertWithWhereUniqueWithoutAppInput>
    createMany?: WebhookCreateManyAppInputEnvelope
    set?: Enumerable<WebhookWhereUniqueInput>
    disconnect?: Enumerable<WebhookWhereUniqueInput>
    delete?: Enumerable<WebhookWhereUniqueInput>
    connect?: Enumerable<WebhookWhereUniqueInput>
    update?: Enumerable<WebhookUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<WebhookUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<WebhookScalarWhereInput>
  }

  export type ApiKeyUncheckedUpdateManyWithoutAppInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutAppInput>, Enumerable<ApiKeyUncheckedCreateWithoutAppInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutAppInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutAppInput>
    createMany?: ApiKeyCreateManyAppInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutAppInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutAppInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutRoutingFormsInput = {
    create?: XOR<UserCreateWithoutRoutingFormsInput, UserUncheckedCreateWithoutRoutingFormsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutingFormsInput
    connect?: UserWhereUniqueInput
  }

  export type App_RoutingForms_FormResponseCreateNestedManyWithoutFormInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormResponseCreateWithoutFormInput>, Enumerable<App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormResponseCreateOrConnectWithoutFormInput>
    createMany?: App_RoutingForms_FormResponseCreateManyFormInputEnvelope
    connect?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
  }

  export type App_RoutingForms_FormResponseUncheckedCreateNestedManyWithoutFormInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormResponseCreateWithoutFormInput>, Enumerable<App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormResponseCreateOrConnectWithoutFormInput>
    createMany?: App_RoutingForms_FormResponseCreateManyFormInputEnvelope
    connect?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutRoutingFormsInput = {
    create?: XOR<UserCreateWithoutRoutingFormsInput, UserUncheckedCreateWithoutRoutingFormsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoutingFormsInput
    upsert?: UserUpsertWithoutRoutingFormsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRoutingFormsInput, UserUncheckedUpdateWithoutRoutingFormsInput>
  }

  export type App_RoutingForms_FormResponseUpdateManyWithoutFormInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormResponseCreateWithoutFormInput>, Enumerable<App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormResponseCreateOrConnectWithoutFormInput>
    upsert?: Enumerable<App_RoutingForms_FormResponseUpsertWithWhereUniqueWithoutFormInput>
    createMany?: App_RoutingForms_FormResponseCreateManyFormInputEnvelope
    set?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    disconnect?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    delete?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    connect?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    update?: Enumerable<App_RoutingForms_FormResponseUpdateWithWhereUniqueWithoutFormInput>
    updateMany?: Enumerable<App_RoutingForms_FormResponseUpdateManyWithWhereWithoutFormInput>
    deleteMany?: Enumerable<App_RoutingForms_FormResponseScalarWhereInput>
  }

  export type App_RoutingForms_FormResponseUncheckedUpdateManyWithoutFormInput = {
    create?: XOR<Enumerable<App_RoutingForms_FormResponseCreateWithoutFormInput>, Enumerable<App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput>>
    connectOrCreate?: Enumerable<App_RoutingForms_FormResponseCreateOrConnectWithoutFormInput>
    upsert?: Enumerable<App_RoutingForms_FormResponseUpsertWithWhereUniqueWithoutFormInput>
    createMany?: App_RoutingForms_FormResponseCreateManyFormInputEnvelope
    set?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    disconnect?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    delete?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    connect?: Enumerable<App_RoutingForms_FormResponseWhereUniqueInput>
    update?: Enumerable<App_RoutingForms_FormResponseUpdateWithWhereUniqueWithoutFormInput>
    updateMany?: Enumerable<App_RoutingForms_FormResponseUpdateManyWithWhereWithoutFormInput>
    deleteMany?: Enumerable<App_RoutingForms_FormResponseScalarWhereInput>
  }

  export type App_RoutingForms_FormCreateNestedOneWithoutResponsesInput = {
    create?: XOR<App_RoutingForms_FormCreateWithoutResponsesInput, App_RoutingForms_FormUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: App_RoutingForms_FormCreateOrConnectWithoutResponsesInput
    connect?: App_RoutingForms_FormWhereUniqueInput
  }

  export type App_RoutingForms_FormUpdateOneRequiredWithoutResponsesInput = {
    create?: XOR<App_RoutingForms_FormCreateWithoutResponsesInput, App_RoutingForms_FormUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: App_RoutingForms_FormCreateOrConnectWithoutResponsesInput
    upsert?: App_RoutingForms_FormUpsertWithoutResponsesInput
    connect?: App_RoutingForms_FormWhereUniqueInput
    update?: XOR<App_RoutingForms_FormUpdateWithoutResponsesInput, App_RoutingForms_FormUncheckedUpdateWithoutResponsesInput>
  }

  export type UserCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    upsert?: UserUpsertWithoutFeedbackInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type WorkflowCreateNestedOneWithoutStepsInput = {
    create?: XOR<WorkflowCreateWithoutStepsInput, WorkflowUncheckedCreateWithoutStepsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutStepsInput
    connect?: WorkflowWhereUniqueInput
  }

  export type WorkflowReminderCreateNestedManyWithoutWorkflowStepInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutWorkflowStepInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutWorkflowStepInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutWorkflowStepInput>
    createMany?: WorkflowReminderCreateManyWorkflowStepInputEnvelope
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
  }

  export type WorkflowReminderUncheckedCreateNestedManyWithoutWorkflowStepInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutWorkflowStepInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutWorkflowStepInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutWorkflowStepInput>
    createMany?: WorkflowReminderCreateManyWorkflowStepInputEnvelope
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
  }

  export type EnumWorkflowActionsFieldUpdateOperationsInput = {
    set?: WorkflowActions
  }

  export type WorkflowUpdateOneRequiredWithoutStepsInput = {
    create?: XOR<WorkflowCreateWithoutStepsInput, WorkflowUncheckedCreateWithoutStepsInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutStepsInput
    upsert?: WorkflowUpsertWithoutStepsInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<WorkflowUpdateWithoutStepsInput, WorkflowUncheckedUpdateWithoutStepsInput>
  }

  export type EnumWorkflowTemplatesFieldUpdateOperationsInput = {
    set?: WorkflowTemplates
  }

  export type WorkflowReminderUpdateManyWithoutWorkflowStepInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutWorkflowStepInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutWorkflowStepInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutWorkflowStepInput>
    upsert?: Enumerable<WorkflowReminderUpsertWithWhereUniqueWithoutWorkflowStepInput>
    createMany?: WorkflowReminderCreateManyWorkflowStepInputEnvelope
    set?: Enumerable<WorkflowReminderWhereUniqueInput>
    disconnect?: Enumerable<WorkflowReminderWhereUniqueInput>
    delete?: Enumerable<WorkflowReminderWhereUniqueInput>
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
    update?: Enumerable<WorkflowReminderUpdateWithWhereUniqueWithoutWorkflowStepInput>
    updateMany?: Enumerable<WorkflowReminderUpdateManyWithWhereWithoutWorkflowStepInput>
    deleteMany?: Enumerable<WorkflowReminderScalarWhereInput>
  }

  export type WorkflowReminderUncheckedUpdateManyWithoutWorkflowStepInput = {
    create?: XOR<Enumerable<WorkflowReminderCreateWithoutWorkflowStepInput>, Enumerable<WorkflowReminderUncheckedCreateWithoutWorkflowStepInput>>
    connectOrCreate?: Enumerable<WorkflowReminderCreateOrConnectWithoutWorkflowStepInput>
    upsert?: Enumerable<WorkflowReminderUpsertWithWhereUniqueWithoutWorkflowStepInput>
    createMany?: WorkflowReminderCreateManyWorkflowStepInputEnvelope
    set?: Enumerable<WorkflowReminderWhereUniqueInput>
    disconnect?: Enumerable<WorkflowReminderWhereUniqueInput>
    delete?: Enumerable<WorkflowReminderWhereUniqueInput>
    connect?: Enumerable<WorkflowReminderWhereUniqueInput>
    update?: Enumerable<WorkflowReminderUpdateWithWhereUniqueWithoutWorkflowStepInput>
    updateMany?: Enumerable<WorkflowReminderUpdateManyWithWhereWithoutWorkflowStepInput>
    deleteMany?: Enumerable<WorkflowReminderScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutWorkflowsInput = {
    create?: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutWorkflowInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput>
    createMany?: WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
  }

  export type WorkflowStepCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowStepCreateWithoutWorkflowInput>, Enumerable<WorkflowStepUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowStepCreateOrConnectWithoutWorkflowInput>
    createMany?: WorkflowStepCreateManyWorkflowInputEnvelope
    connect?: Enumerable<WorkflowStepWhereUniqueInput>
  }

  export type WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutWorkflowInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput>
    createMany?: WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
  }

  export type WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowStepCreateWithoutWorkflowInput>, Enumerable<WorkflowStepUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowStepCreateOrConnectWithoutWorkflowInput>
    createMany?: WorkflowStepCreateManyWorkflowInputEnvelope
    connect?: Enumerable<WorkflowStepWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutWorkflowsInput = {
    create?: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkflowsInput
    upsert?: UserUpsertWithoutWorkflowsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWorkflowsInput, UserUncheckedUpdateWithoutWorkflowsInput>
  }

  export type WorkflowsOnEventTypesUpdateManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutWorkflowInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput>
    upsert?: Enumerable<WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput>
    createMany?: WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope
    set?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    disconnect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    delete?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    update?: Enumerable<WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput>
    updateMany?: Enumerable<WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput>
    deleteMany?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
  }

  export type EnumWorkflowTriggerEventsFieldUpdateOperationsInput = {
    set?: WorkflowTriggerEvents
  }

  export type NullableEnumTimeUnitFieldUpdateOperationsInput = {
    set?: TimeUnit | null
  }

  export type WorkflowStepUpdateManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowStepCreateWithoutWorkflowInput>, Enumerable<WorkflowStepUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowStepCreateOrConnectWithoutWorkflowInput>
    upsert?: Enumerable<WorkflowStepUpsertWithWhereUniqueWithoutWorkflowInput>
    createMany?: WorkflowStepCreateManyWorkflowInputEnvelope
    set?: Enumerable<WorkflowStepWhereUniqueInput>
    disconnect?: Enumerable<WorkflowStepWhereUniqueInput>
    delete?: Enumerable<WorkflowStepWhereUniqueInput>
    connect?: Enumerable<WorkflowStepWhereUniqueInput>
    update?: Enumerable<WorkflowStepUpdateWithWhereUniqueWithoutWorkflowInput>
    updateMany?: Enumerable<WorkflowStepUpdateManyWithWhereWithoutWorkflowInput>
    deleteMany?: Enumerable<WorkflowStepScalarWhereInput>
  }

  export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowsOnEventTypesCreateWithoutWorkflowInput>, Enumerable<WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput>
    upsert?: Enumerable<WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput>
    createMany?: WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope
    set?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    disconnect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    delete?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    connect?: Enumerable<WorkflowsOnEventTypesWhereUniqueInput>
    update?: Enumerable<WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput>
    updateMany?: Enumerable<WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput>
    deleteMany?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
  }

  export type WorkflowStepUncheckedUpdateManyWithoutWorkflowInput = {
    create?: XOR<Enumerable<WorkflowStepCreateWithoutWorkflowInput>, Enumerable<WorkflowStepUncheckedCreateWithoutWorkflowInput>>
    connectOrCreate?: Enumerable<WorkflowStepCreateOrConnectWithoutWorkflowInput>
    upsert?: Enumerable<WorkflowStepUpsertWithWhereUniqueWithoutWorkflowInput>
    createMany?: WorkflowStepCreateManyWorkflowInputEnvelope
    set?: Enumerable<WorkflowStepWhereUniqueInput>
    disconnect?: Enumerable<WorkflowStepWhereUniqueInput>
    delete?: Enumerable<WorkflowStepWhereUniqueInput>
    connect?: Enumerable<WorkflowStepWhereUniqueInput>
    update?: Enumerable<WorkflowStepUpdateWithWhereUniqueWithoutWorkflowInput>
    updateMany?: Enumerable<WorkflowStepUpdateManyWithWhereWithoutWorkflowInput>
    deleteMany?: Enumerable<WorkflowStepScalarWhereInput>
  }

  export type WorkflowCreateNestedOneWithoutActiveOnInput = {
    create?: XOR<WorkflowCreateWithoutActiveOnInput, WorkflowUncheckedCreateWithoutActiveOnInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutActiveOnInput
    connect?: WorkflowWhereUniqueInput
  }

  export type EventTypeCreateNestedOneWithoutWorkflowsInput = {
    create?: XOR<EventTypeCreateWithoutWorkflowsInput, EventTypeUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutWorkflowsInput
    connect?: EventTypeWhereUniqueInput
  }

  export type WorkflowUpdateOneRequiredWithoutActiveOnInput = {
    create?: XOR<WorkflowCreateWithoutActiveOnInput, WorkflowUncheckedCreateWithoutActiveOnInput>
    connectOrCreate?: WorkflowCreateOrConnectWithoutActiveOnInput
    upsert?: WorkflowUpsertWithoutActiveOnInput
    connect?: WorkflowWhereUniqueInput
    update?: XOR<WorkflowUpdateWithoutActiveOnInput, WorkflowUncheckedUpdateWithoutActiveOnInput>
  }

  export type EventTypeUpdateOneRequiredWithoutWorkflowsInput = {
    create?: XOR<EventTypeCreateWithoutWorkflowsInput, EventTypeUncheckedCreateWithoutWorkflowsInput>
    connectOrCreate?: EventTypeCreateOrConnectWithoutWorkflowsInput
    upsert?: EventTypeUpsertWithoutWorkflowsInput
    connect?: EventTypeWhereUniqueInput
    update?: XOR<EventTypeUpdateWithoutWorkflowsInput, EventTypeUncheckedUpdateWithoutWorkflowsInput>
  }

  export type BookingCreateNestedOneWithoutWorkflowRemindersInput = {
    create?: XOR<BookingCreateWithoutWorkflowRemindersInput, BookingUncheckedCreateWithoutWorkflowRemindersInput>
    connectOrCreate?: BookingCreateOrConnectWithoutWorkflowRemindersInput
    connect?: BookingWhereUniqueInput
  }

  export type WorkflowStepCreateNestedOneWithoutWorkflowRemindersInput = {
    create?: XOR<WorkflowStepCreateWithoutWorkflowRemindersInput, WorkflowStepUncheckedCreateWithoutWorkflowRemindersInput>
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutWorkflowRemindersInput
    connect?: WorkflowStepWhereUniqueInput
  }

  export type BookingUpdateOneWithoutWorkflowRemindersInput = {
    create?: XOR<BookingCreateWithoutWorkflowRemindersInput, BookingUncheckedCreateWithoutWorkflowRemindersInput>
    connectOrCreate?: BookingCreateOrConnectWithoutWorkflowRemindersInput
    upsert?: BookingUpsertWithoutWorkflowRemindersInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<BookingUpdateWithoutWorkflowRemindersInput, BookingUncheckedUpdateWithoutWorkflowRemindersInput>
  }

  export type EnumWorkflowMethodsFieldUpdateOperationsInput = {
    set?: WorkflowMethods
  }

  export type WorkflowStepUpdateOneRequiredWithoutWorkflowRemindersInput = {
    create?: XOR<WorkflowStepCreateWithoutWorkflowRemindersInput, WorkflowStepUncheckedCreateWithoutWorkflowRemindersInput>
    connectOrCreate?: WorkflowStepCreateOrConnectWithoutWorkflowRemindersInput
    upsert?: WorkflowStepUpsertWithoutWorkflowRemindersInput
    connect?: WorkflowStepWhereUniqueInput
    update?: XOR<WorkflowStepUpdateWithoutWorkflowRemindersInput, WorkflowStepUncheckedUpdateWithoutWorkflowRemindersInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumPeriodTypeFilter = {
    equals?: PeriodType
    in?: Enumerable<PeriodType>
    notIn?: Enumerable<PeriodType>
    not?: NestedEnumPeriodTypeFilter | PeriodType
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedEnumSchedulingTypeNullableFilter = {
    equals?: SchedulingType | null
    in?: Enumerable<SchedulingType> | null
    notIn?: Enumerable<SchedulingType> | null
    not?: NestedEnumSchedulingTypeNullableFilter | SchedulingType | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumPeriodTypeWithAggregatesFilter = {
    equals?: PeriodType
    in?: Enumerable<PeriodType>
    notIn?: Enumerable<PeriodType>
    not?: NestedEnumPeriodTypeWithAggregatesFilter | PeriodType
    _count?: NestedIntFilter
    _min?: NestedEnumPeriodTypeFilter
    _max?: NestedEnumPeriodTypeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedEnumSchedulingTypeNullableWithAggregatesFilter = {
    equals?: SchedulingType | null
    in?: Enumerable<SchedulingType> | null
    notIn?: Enumerable<SchedulingType> | null
    not?: NestedEnumSchedulingTypeNullableWithAggregatesFilter | SchedulingType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumSchedulingTypeNullableFilter
    _max?: NestedEnumSchedulingTypeNullableFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumIdentityProviderFilter = {
    equals?: IdentityProvider
    in?: Enumerable<IdentityProvider>
    notIn?: Enumerable<IdentityProvider>
    not?: NestedEnumIdentityProviderFilter | IdentityProvider
  }

  export type NestedEnumUserPlanFilter = {
    equals?: UserPlan
    in?: Enumerable<UserPlan>
    notIn?: Enumerable<UserPlan>
    not?: NestedEnumUserPlanFilter | UserPlan
  }

  export type NestedEnumUserPermissionRoleFilter = {
    equals?: UserPermissionRole
    in?: Enumerable<UserPermissionRole>
    notIn?: Enumerable<UserPermissionRole>
    not?: NestedEnumUserPermissionRoleFilter | UserPermissionRole
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumIdentityProviderWithAggregatesFilter = {
    equals?: IdentityProvider
    in?: Enumerable<IdentityProvider>
    notIn?: Enumerable<IdentityProvider>
    not?: NestedEnumIdentityProviderWithAggregatesFilter | IdentityProvider
    _count?: NestedIntFilter
    _min?: NestedEnumIdentityProviderFilter
    _max?: NestedEnumIdentityProviderFilter
  }

  export type NestedEnumUserPlanWithAggregatesFilter = {
    equals?: UserPlan
    in?: Enumerable<UserPlan>
    notIn?: Enumerable<UserPlan>
    not?: NestedEnumUserPlanWithAggregatesFilter | UserPlan
    _count?: NestedIntFilter
    _min?: NestedEnumUserPlanFilter
    _max?: NestedEnumUserPlanFilter
  }

  export type NestedEnumUserPermissionRoleWithAggregatesFilter = {
    equals?: UserPermissionRole
    in?: Enumerable<UserPermissionRole>
    notIn?: Enumerable<UserPermissionRole>
    not?: NestedEnumUserPermissionRoleWithAggregatesFilter | UserPermissionRole
    _count?: NestedIntFilter
    _min?: NestedEnumUserPermissionRoleFilter
    _max?: NestedEnumUserPermissionRoleFilter
  }

  export type NestedEnumMembershipRoleFilter = {
    equals?: MembershipRole
    in?: Enumerable<MembershipRole>
    notIn?: Enumerable<MembershipRole>
    not?: NestedEnumMembershipRoleFilter | MembershipRole
  }

  export type NestedEnumMembershipRoleWithAggregatesFilter = {
    equals?: MembershipRole
    in?: Enumerable<MembershipRole>
    notIn?: Enumerable<MembershipRole>
    not?: NestedEnumMembershipRoleWithAggregatesFilter | MembershipRole
    _count?: NestedIntFilter
    _min?: NestedEnumMembershipRoleFilter
    _max?: NestedEnumMembershipRoleFilter
  }

  export type NestedEnumBookingStatusFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusFilter | BookingStatus
  }

  export type NestedEnumBookingStatusWithAggregatesFilter = {
    equals?: BookingStatus
    in?: Enumerable<BookingStatus>
    notIn?: Enumerable<BookingStatus>
    not?: NestedEnumBookingStatusWithAggregatesFilter | BookingStatus
    _count?: NestedIntFilter
    _min?: NestedEnumBookingStatusFilter
    _max?: NestedEnumBookingStatusFilter
  }

  export type NestedEnumEventTypeCustomInputTypeFilter = {
    equals?: EventTypeCustomInputType
    in?: Enumerable<EventTypeCustomInputType>
    notIn?: Enumerable<EventTypeCustomInputType>
    not?: NestedEnumEventTypeCustomInputTypeFilter | EventTypeCustomInputType
  }

  export type NestedEnumEventTypeCustomInputTypeWithAggregatesFilter = {
    equals?: EventTypeCustomInputType
    in?: Enumerable<EventTypeCustomInputType>
    notIn?: Enumerable<EventTypeCustomInputType>
    not?: NestedEnumEventTypeCustomInputTypeWithAggregatesFilter | EventTypeCustomInputType
    _count?: NestedIntFilter
    _min?: NestedEnumEventTypeCustomInputTypeFilter
    _max?: NestedEnumEventTypeCustomInputTypeFilter
  }

  export type NestedEnumReminderTypeFilter = {
    equals?: ReminderType
    in?: Enumerable<ReminderType>
    notIn?: Enumerable<ReminderType>
    not?: NestedEnumReminderTypeFilter | ReminderType
  }

  export type NestedEnumReminderTypeWithAggregatesFilter = {
    equals?: ReminderType
    in?: Enumerable<ReminderType>
    notIn?: Enumerable<ReminderType>
    not?: NestedEnumReminderTypeWithAggregatesFilter | ReminderType
    _count?: NestedIntFilter
    _min?: NestedEnumReminderTypeFilter
    _max?: NestedEnumReminderTypeFilter
  }

  export type NestedEnumPaymentTypeFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeFilter | PaymentType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter = {
    equals?: PaymentType
    in?: Enumerable<PaymentType>
    notIn?: Enumerable<PaymentType>
    not?: NestedEnumPaymentTypeWithAggregatesFilter | PaymentType
    _count?: NestedIntFilter
    _min?: NestedEnumPaymentTypeFilter
    _max?: NestedEnumPaymentTypeFilter
  }

  export type NestedEnumWorkflowActionsFilter = {
    equals?: WorkflowActions
    in?: Enumerable<WorkflowActions>
    notIn?: Enumerable<WorkflowActions>
    not?: NestedEnumWorkflowActionsFilter | WorkflowActions
  }

  export type NestedEnumWorkflowTemplatesFilter = {
    equals?: WorkflowTemplates
    in?: Enumerable<WorkflowTemplates>
    notIn?: Enumerable<WorkflowTemplates>
    not?: NestedEnumWorkflowTemplatesFilter | WorkflowTemplates
  }

  export type NestedEnumWorkflowActionsWithAggregatesFilter = {
    equals?: WorkflowActions
    in?: Enumerable<WorkflowActions>
    notIn?: Enumerable<WorkflowActions>
    not?: NestedEnumWorkflowActionsWithAggregatesFilter | WorkflowActions
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowActionsFilter
    _max?: NestedEnumWorkflowActionsFilter
  }

  export type NestedEnumWorkflowTemplatesWithAggregatesFilter = {
    equals?: WorkflowTemplates
    in?: Enumerable<WorkflowTemplates>
    notIn?: Enumerable<WorkflowTemplates>
    not?: NestedEnumWorkflowTemplatesWithAggregatesFilter | WorkflowTemplates
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowTemplatesFilter
    _max?: NestedEnumWorkflowTemplatesFilter
  }

  export type NestedEnumWorkflowTriggerEventsFilter = {
    equals?: WorkflowTriggerEvents
    in?: Enumerable<WorkflowTriggerEvents>
    notIn?: Enumerable<WorkflowTriggerEvents>
    not?: NestedEnumWorkflowTriggerEventsFilter | WorkflowTriggerEvents
  }

  export type NestedEnumTimeUnitNullableFilter = {
    equals?: TimeUnit | null
    in?: Enumerable<TimeUnit> | null
    notIn?: Enumerable<TimeUnit> | null
    not?: NestedEnumTimeUnitNullableFilter | TimeUnit | null
  }

  export type NestedEnumWorkflowTriggerEventsWithAggregatesFilter = {
    equals?: WorkflowTriggerEvents
    in?: Enumerable<WorkflowTriggerEvents>
    notIn?: Enumerable<WorkflowTriggerEvents>
    not?: NestedEnumWorkflowTriggerEventsWithAggregatesFilter | WorkflowTriggerEvents
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowTriggerEventsFilter
    _max?: NestedEnumWorkflowTriggerEventsFilter
  }

  export type NestedEnumTimeUnitNullableWithAggregatesFilter = {
    equals?: TimeUnit | null
    in?: Enumerable<TimeUnit> | null
    notIn?: Enumerable<TimeUnit> | null
    not?: NestedEnumTimeUnitNullableWithAggregatesFilter | TimeUnit | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumTimeUnitNullableFilter
    _max?: NestedEnumTimeUnitNullableFilter
  }

  export type NestedEnumWorkflowMethodsFilter = {
    equals?: WorkflowMethods
    in?: Enumerable<WorkflowMethods>
    notIn?: Enumerable<WorkflowMethods>
    not?: NestedEnumWorkflowMethodsFilter | WorkflowMethods
  }

  export type NestedEnumWorkflowMethodsWithAggregatesFilter = {
    equals?: WorkflowMethods
    in?: Enumerable<WorkflowMethods>
    notIn?: Enumerable<WorkflowMethods>
    not?: NestedEnumWorkflowMethodsWithAggregatesFilter | WorkflowMethods
    _count?: NestedIntFilter
    _min?: NestedEnumWorkflowMethodsFilter
    _max?: NestedEnumWorkflowMethodsFilter
  }

  export type UserCreateWithoutEventTypesInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutEventTypesInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutEventTypesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventTypesInput, UserUncheckedCreateWithoutEventTypesInput>
  }

  export type TeamCreateWithoutEventTypesInput = {
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
    members?: MembershipCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutEventTypesInput = {
    id?: number
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
    members?: MembershipUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutEventTypesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutEventTypesInput, TeamUncheckedCreateWithoutEventTypesInput>
  }

  export type HashedLinkCreateWithoutEventTypeInput = {
    link: string
  }

  export type HashedLinkUncheckedCreateWithoutEventTypeInput = {
    id?: number
    link: string
  }

  export type HashedLinkCreateOrConnectWithoutEventTypeInput = {
    where: HashedLinkWhereUniqueInput
    create: XOR<HashedLinkCreateWithoutEventTypeInput, HashedLinkUncheckedCreateWithoutEventTypeInput>
  }

  export type BookingCreateWithoutEventTypeInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutEventTypeInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutEventTypeInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutEventTypeInput, BookingUncheckedCreateWithoutEventTypeInput>
  }

  export type BookingCreateManyEventTypeInputEnvelope = {
    data: Enumerable<BookingCreateManyEventTypeInput>
    skipDuplicates?: boolean
  }

  export type AvailabilityCreateWithoutEventTypeInput = {
    user?: UserCreateNestedOneWithoutAvailabilityInput
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    Schedule?: ScheduleCreateNestedOneWithoutAvailabilityInput
  }

  export type AvailabilityUncheckedCreateWithoutEventTypeInput = {
    id?: number
    userId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    scheduleId?: number | null
  }

  export type AvailabilityCreateOrConnectWithoutEventTypeInput = {
    where: AvailabilityWhereUniqueInput
    create: XOR<AvailabilityCreateWithoutEventTypeInput, AvailabilityUncheckedCreateWithoutEventTypeInput>
  }

  export type AvailabilityCreateManyEventTypeInputEnvelope = {
    data: Enumerable<AvailabilityCreateManyEventTypeInput>
    skipDuplicates?: boolean
  }

  export type WebhookCreateWithoutEventTypeInput = {
    id: string
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    user?: UserCreateNestedOneWithoutWebhooksInput
    app?: AppCreateNestedOneWithoutWebhookInput
    secret?: string | null
  }

  export type WebhookUncheckedCreateWithoutEventTypeInput = {
    id: string
    userId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: string | null
    secret?: string | null
  }

  export type WebhookCreateOrConnectWithoutEventTypeInput = {
    where: WebhookWhereUniqueInput
    create: XOR<WebhookCreateWithoutEventTypeInput, WebhookUncheckedCreateWithoutEventTypeInput>
  }

  export type WebhookCreateManyEventTypeInputEnvelope = {
    data: Enumerable<WebhookCreateManyEventTypeInput>
    skipDuplicates?: boolean
  }

  export type DestinationCalendarCreateWithoutEventTypeInput = {
    integration: string
    externalId: string
    user?: UserCreateNestedOneWithoutDestinationCalendarInput
    booking?: BookingCreateNestedManyWithoutDestinationCalendarInput
    credential?: CredentialCreateNestedOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedCreateWithoutEventTypeInput = {
    id?: number
    integration: string
    externalId: string
    userId?: number | null
    booking?: BookingUncheckedCreateNestedManyWithoutDestinationCalendarInput
    credentialId?: number | null
  }

  export type DestinationCalendarCreateOrConnectWithoutEventTypeInput = {
    where: DestinationCalendarWhereUniqueInput
    create: XOR<DestinationCalendarCreateWithoutEventTypeInput, DestinationCalendarUncheckedCreateWithoutEventTypeInput>
  }

  export type EventTypeCustomInputCreateWithoutEventTypeInput = {
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder?: string
  }

  export type EventTypeCustomInputUncheckedCreateWithoutEventTypeInput = {
    id?: number
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder?: string
  }

  export type EventTypeCustomInputCreateOrConnectWithoutEventTypeInput = {
    where: EventTypeCustomInputWhereUniqueInput
    create: XOR<EventTypeCustomInputCreateWithoutEventTypeInput, EventTypeCustomInputUncheckedCreateWithoutEventTypeInput>
  }

  export type EventTypeCustomInputCreateManyEventTypeInputEnvelope = {
    data: Enumerable<EventTypeCustomInputCreateManyEventTypeInput>
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutEventTypeInput = {
    user: UserCreateNestedOneWithoutSchedulesInput
    name: string
    timeZone?: string | null
    availability?: AvailabilityCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutEventTypeInput = {
    id?: number
    userId: number
    name: string
    timeZone?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleCreateOrConnectWithoutEventTypeInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutEventTypeInput, ScheduleUncheckedCreateWithoutEventTypeInput>
  }

  export type WorkflowsOnEventTypesCreateWithoutEventTypeInput = {
    workflow: WorkflowCreateNestedOneWithoutActiveOnInput
  }

  export type WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput = {
    id?: number
    workflowId: number
  }

  export type WorkflowsOnEventTypesCreateOrConnectWithoutEventTypeInput = {
    where: WorkflowsOnEventTypesWhereUniqueInput
    create: XOR<WorkflowsOnEventTypesCreateWithoutEventTypeInput, WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput>
  }

  export type WorkflowsOnEventTypesCreateManyEventTypeInputEnvelope = {
    data: Enumerable<WorkflowsOnEventTypesCreateManyEventTypeInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutEventTypesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutEventTypesInput, UserUncheckedUpdateWithoutEventTypesInput>
    create: XOR<UserCreateWithoutEventTypesInput, UserUncheckedCreateWithoutEventTypesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutEventTypesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutEventTypesInput, UserUncheckedUpdateWithoutEventTypesInput>
  }

  export type UserUpdateManyWithWhereWithoutEventTypesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    username?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    email?: StringFilter | string
    emailVerified?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    bio?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    timeZone?: StringFilter | string
    weekStart?: StringFilter | string
    startTime?: IntFilter | number
    endTime?: IntFilter | number
    bufferTime?: IntFilter | number
    hideBranding?: BoolFilter | boolean
    theme?: StringNullableFilter | string | null
    createdDate?: DateTimeFilter | Date | string
    trialEndsAt?: DateTimeNullableFilter | Date | string | null
    defaultScheduleId?: IntNullableFilter | number | null
    completedOnboarding?: BoolFilter | boolean
    locale?: StringNullableFilter | string | null
    timeFormat?: IntNullableFilter | number | null
    twoFactorSecret?: StringNullableFilter | string | null
    twoFactorEnabled?: BoolFilter | boolean
    identityProvider?: EnumIdentityProviderFilter | IdentityProvider
    identityProviderId?: StringNullableFilter | string | null
    invitedTo?: IntNullableFilter | number | null
    plan?: EnumUserPlanFilter | UserPlan
    brandColor?: StringFilter | string
    darkBrandColor?: StringFilter | string
    away?: BoolFilter | boolean
    allowDynamicBooking?: BoolNullableFilter | boolean | null
    metadata?: JsonNullableFilter
    verified?: BoolNullableFilter | boolean | null
    role?: EnumUserPermissionRoleFilter | UserPermissionRole
    disableImpersonation?: BoolFilter | boolean
    emailVerificationToken?: StringNullableFilter | string | null
  }

  export type TeamUpsertWithoutEventTypesInput = {
    update: XOR<TeamUpdateWithoutEventTypesInput, TeamUncheckedUpdateWithoutEventTypesInput>
    create: XOR<TeamCreateWithoutEventTypesInput, TeamUncheckedCreateWithoutEventTypesInput>
  }

  export type TeamUpdateWithoutEventTypesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    members?: MembershipUpdateManyWithoutTeamInput
  }

  export type TeamUncheckedUpdateWithoutEventTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    members?: MembershipUncheckedUpdateManyWithoutTeamInput
  }

  export type HashedLinkUpsertWithoutEventTypeInput = {
    update: XOR<HashedLinkUpdateWithoutEventTypeInput, HashedLinkUncheckedUpdateWithoutEventTypeInput>
    create: XOR<HashedLinkCreateWithoutEventTypeInput, HashedLinkUncheckedCreateWithoutEventTypeInput>
  }

  export type HashedLinkUpdateWithoutEventTypeInput = {
    link?: StringFieldUpdateOperationsInput | string
  }

  export type HashedLinkUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
  }

  export type BookingUpsertWithWhereUniqueWithoutEventTypeInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutEventTypeInput, BookingUncheckedUpdateWithoutEventTypeInput>
    create: XOR<BookingCreateWithoutEventTypeInput, BookingUncheckedCreateWithoutEventTypeInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutEventTypeInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutEventTypeInput, BookingUncheckedUpdateWithoutEventTypeInput>
  }

  export type BookingUpdateManyWithWhereWithoutEventTypeInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingsInput>
  }

  export type BookingScalarWhereInput = {
    AND?: Enumerable<BookingScalarWhereInput>
    OR?: Enumerable<BookingScalarWhereInput>
    NOT?: Enumerable<BookingScalarWhereInput>
    id?: IntFilter | number
    uid?: StringFilter | string
    userId?: IntNullableFilter | number | null
    eventTypeId?: IntNullableFilter | number | null
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    customInputs?: JsonNullableFilter
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    location?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
    status?: EnumBookingStatusFilter | BookingStatus
    paid?: BoolFilter | boolean
    destinationCalendarId?: IntNullableFilter | number | null
    cancellationReason?: StringNullableFilter | string | null
    rejectionReason?: StringNullableFilter | string | null
    dynamicEventSlugRef?: StringNullableFilter | string | null
    dynamicGroupSlugRef?: StringNullableFilter | string | null
    rescheduled?: BoolNullableFilter | boolean | null
    fromReschedule?: StringNullableFilter | string | null
    recurringEventId?: StringNullableFilter | string | null
    smsReminderNumber?: StringNullableFilter | string | null
  }

  export type AvailabilityUpsertWithWhereUniqueWithoutEventTypeInput = {
    where: AvailabilityWhereUniqueInput
    update: XOR<AvailabilityUpdateWithoutEventTypeInput, AvailabilityUncheckedUpdateWithoutEventTypeInput>
    create: XOR<AvailabilityCreateWithoutEventTypeInput, AvailabilityUncheckedCreateWithoutEventTypeInput>
  }

  export type AvailabilityUpdateWithWhereUniqueWithoutEventTypeInput = {
    where: AvailabilityWhereUniqueInput
    data: XOR<AvailabilityUpdateWithoutEventTypeInput, AvailabilityUncheckedUpdateWithoutEventTypeInput>
  }

  export type AvailabilityUpdateManyWithWhereWithoutEventTypeInput = {
    where: AvailabilityScalarWhereInput
    data: XOR<AvailabilityUpdateManyMutationInput, AvailabilityUncheckedUpdateManyWithoutAvailabilityInput>
  }

  export type AvailabilityScalarWhereInput = {
    AND?: Enumerable<AvailabilityScalarWhereInput>
    OR?: Enumerable<AvailabilityScalarWhereInput>
    NOT?: Enumerable<AvailabilityScalarWhereInput>
    id?: IntFilter | number
    userId?: IntNullableFilter | number | null
    eventTypeId?: IntNullableFilter | number | null
    days?: IntNullableListFilter
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    date?: DateTimeNullableFilter | Date | string | null
    scheduleId?: IntNullableFilter | number | null
  }

  export type WebhookUpsertWithWhereUniqueWithoutEventTypeInput = {
    where: WebhookWhereUniqueInput
    update: XOR<WebhookUpdateWithoutEventTypeInput, WebhookUncheckedUpdateWithoutEventTypeInput>
    create: XOR<WebhookCreateWithoutEventTypeInput, WebhookUncheckedCreateWithoutEventTypeInput>
  }

  export type WebhookUpdateWithWhereUniqueWithoutEventTypeInput = {
    where: WebhookWhereUniqueInput
    data: XOR<WebhookUpdateWithoutEventTypeInput, WebhookUncheckedUpdateWithoutEventTypeInput>
  }

  export type WebhookUpdateManyWithWhereWithoutEventTypeInput = {
    where: WebhookScalarWhereInput
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyWithoutWebhooksInput>
  }

  export type WebhookScalarWhereInput = {
    AND?: Enumerable<WebhookScalarWhereInput>
    OR?: Enumerable<WebhookScalarWhereInput>
    NOT?: Enumerable<WebhookScalarWhereInput>
    id?: StringFilter | string
    userId?: IntNullableFilter | number | null
    eventTypeId?: IntNullableFilter | number | null
    subscriberUrl?: StringFilter | string
    payloadTemplate?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    active?: BoolFilter | boolean
    eventTriggers?: EnumWebhookTriggerEventsNullableListFilter
    appId?: StringNullableFilter | string | null
    secret?: StringNullableFilter | string | null
  }

  export type DestinationCalendarUpsertWithoutEventTypeInput = {
    update: XOR<DestinationCalendarUpdateWithoutEventTypeInput, DestinationCalendarUncheckedUpdateWithoutEventTypeInput>
    create: XOR<DestinationCalendarCreateWithoutEventTypeInput, DestinationCalendarUncheckedCreateWithoutEventTypeInput>
  }

  export type DestinationCalendarUpdateWithoutEventTypeInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutDestinationCalendarInput
    booking?: BookingUpdateManyWithoutDestinationCalendarInput
    credential?: CredentialUpdateOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    booking?: BookingUncheckedUpdateManyWithoutDestinationCalendarInput
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventTypeCustomInputUpsertWithWhereUniqueWithoutEventTypeInput = {
    where: EventTypeCustomInputWhereUniqueInput
    update: XOR<EventTypeCustomInputUpdateWithoutEventTypeInput, EventTypeCustomInputUncheckedUpdateWithoutEventTypeInput>
    create: XOR<EventTypeCustomInputCreateWithoutEventTypeInput, EventTypeCustomInputUncheckedCreateWithoutEventTypeInput>
  }

  export type EventTypeCustomInputUpdateWithWhereUniqueWithoutEventTypeInput = {
    where: EventTypeCustomInputWhereUniqueInput
    data: XOR<EventTypeCustomInputUpdateWithoutEventTypeInput, EventTypeCustomInputUncheckedUpdateWithoutEventTypeInput>
  }

  export type EventTypeCustomInputUpdateManyWithWhereWithoutEventTypeInput = {
    where: EventTypeCustomInputScalarWhereInput
    data: XOR<EventTypeCustomInputUpdateManyMutationInput, EventTypeCustomInputUncheckedUpdateManyWithoutCustomInputsInput>
  }

  export type EventTypeCustomInputScalarWhereInput = {
    AND?: Enumerable<EventTypeCustomInputScalarWhereInput>
    OR?: Enumerable<EventTypeCustomInputScalarWhereInput>
    NOT?: Enumerable<EventTypeCustomInputScalarWhereInput>
    id?: IntFilter | number
    eventTypeId?: IntFilter | number
    label?: StringFilter | string
    type?: EnumEventTypeCustomInputTypeFilter | EventTypeCustomInputType
    required?: BoolFilter | boolean
    placeholder?: StringFilter | string
  }

  export type ScheduleUpsertWithoutEventTypeInput = {
    update: XOR<ScheduleUpdateWithoutEventTypeInput, ScheduleUncheckedUpdateWithoutEventTypeInput>
    create: XOR<ScheduleCreateWithoutEventTypeInput, ScheduleUncheckedCreateWithoutEventTypeInput>
  }

  export type ScheduleUpdateWithoutEventTypeInput = {
    user?: UserUpdateOneRequiredWithoutSchedulesInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutScheduleInput
  }

  export type ScheduleUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutScheduleInput
  }

  export type WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutEventTypeInput = {
    where: WorkflowsOnEventTypesWhereUniqueInput
    update: XOR<WorkflowsOnEventTypesUpdateWithoutEventTypeInput, WorkflowsOnEventTypesUncheckedUpdateWithoutEventTypeInput>
    create: XOR<WorkflowsOnEventTypesCreateWithoutEventTypeInput, WorkflowsOnEventTypesUncheckedCreateWithoutEventTypeInput>
  }

  export type WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutEventTypeInput = {
    where: WorkflowsOnEventTypesWhereUniqueInput
    data: XOR<WorkflowsOnEventTypesUpdateWithoutEventTypeInput, WorkflowsOnEventTypesUncheckedUpdateWithoutEventTypeInput>
  }

  export type WorkflowsOnEventTypesUpdateManyWithWhereWithoutEventTypeInput = {
    where: WorkflowsOnEventTypesScalarWhereInput
    data: XOR<WorkflowsOnEventTypesUpdateManyMutationInput, WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowsInput>
  }

  export type WorkflowsOnEventTypesScalarWhereInput = {
    AND?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
    OR?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
    NOT?: Enumerable<WorkflowsOnEventTypesScalarWhereInput>
    id?: IntFilter | number
    workflowId?: IntFilter | number
    eventTypeId?: IntFilter | number
  }

  export type UserCreateWithoutCredentialsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutCredentialsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutCredentialsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
  }

  export type AppCreateWithoutCredentialsInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    Webhook?: WebhookCreateNestedManyWithoutAppInput
    ApiKey?: ApiKeyCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutCredentialsInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    Webhook?: WebhookUncheckedCreateNestedManyWithoutAppInput
    ApiKey?: ApiKeyUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutCredentialsInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutCredentialsInput, AppUncheckedCreateWithoutCredentialsInput>
  }

  export type DestinationCalendarCreateWithoutCredentialInput = {
    integration: string
    externalId: string
    user?: UserCreateNestedOneWithoutDestinationCalendarInput
    booking?: BookingCreateNestedManyWithoutDestinationCalendarInput
    eventType?: EventTypeCreateNestedOneWithoutDestinationCalendarInput
  }

  export type DestinationCalendarUncheckedCreateWithoutCredentialInput = {
    id?: number
    integration: string
    externalId: string
    userId?: number | null
    booking?: BookingUncheckedCreateNestedManyWithoutDestinationCalendarInput
    eventTypeId?: number | null
  }

  export type DestinationCalendarCreateOrConnectWithoutCredentialInput = {
    where: DestinationCalendarWhereUniqueInput
    create: XOR<DestinationCalendarCreateWithoutCredentialInput, DestinationCalendarUncheckedCreateWithoutCredentialInput>
  }

  export type DestinationCalendarCreateManyCredentialInputEnvelope = {
    data: Enumerable<DestinationCalendarCreateManyCredentialInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCredentialsInput = {
    update: XOR<UserUpdateWithoutCredentialsInput, UserUncheckedUpdateWithoutCredentialsInput>
    create: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
  }

  export type UserUpdateWithoutCredentialsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutCredentialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppUpsertWithoutCredentialsInput = {
    update: XOR<AppUpdateWithoutCredentialsInput, AppUncheckedUpdateWithoutCredentialsInput>
    create: XOR<AppCreateWithoutCredentialsInput, AppUncheckedCreateWithoutCredentialsInput>
  }

  export type AppUpdateWithoutCredentialsInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Webhook?: WebhookUpdateManyWithoutAppInput
    ApiKey?: ApiKeyUpdateManyWithoutAppInput
  }

  export type AppUncheckedUpdateWithoutCredentialsInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Webhook?: WebhookUncheckedUpdateManyWithoutAppInput
    ApiKey?: ApiKeyUncheckedUpdateManyWithoutAppInput
  }

  export type DestinationCalendarUpsertWithWhereUniqueWithoutCredentialInput = {
    where: DestinationCalendarWhereUniqueInput
    update: XOR<DestinationCalendarUpdateWithoutCredentialInput, DestinationCalendarUncheckedUpdateWithoutCredentialInput>
    create: XOR<DestinationCalendarCreateWithoutCredentialInput, DestinationCalendarUncheckedCreateWithoutCredentialInput>
  }

  export type DestinationCalendarUpdateWithWhereUniqueWithoutCredentialInput = {
    where: DestinationCalendarWhereUniqueInput
    data: XOR<DestinationCalendarUpdateWithoutCredentialInput, DestinationCalendarUncheckedUpdateWithoutCredentialInput>
  }

  export type DestinationCalendarUpdateManyWithWhereWithoutCredentialInput = {
    where: DestinationCalendarScalarWhereInput
    data: XOR<DestinationCalendarUpdateManyMutationInput, DestinationCalendarUncheckedUpdateManyWithoutDestinationCalendarsInput>
  }

  export type DestinationCalendarScalarWhereInput = {
    AND?: Enumerable<DestinationCalendarScalarWhereInput>
    OR?: Enumerable<DestinationCalendarScalarWhereInput>
    NOT?: Enumerable<DestinationCalendarScalarWhereInput>
    id?: IntFilter | number
    integration?: StringFilter | string
    externalId?: StringFilter | string
    userId?: IntNullableFilter | number | null
    eventTypeId?: IntNullableFilter | number | null
    credentialId?: IntNullableFilter | number | null
  }

  export type UserCreateWithoutDestinationCalendarInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutDestinationCalendarInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutDestinationCalendarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDestinationCalendarInput, UserUncheckedCreateWithoutDestinationCalendarInput>
  }

  export type BookingCreateWithoutDestinationCalendarInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutDestinationCalendarInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutDestinationCalendarInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutDestinationCalendarInput, BookingUncheckedCreateWithoutDestinationCalendarInput>
  }

  export type BookingCreateManyDestinationCalendarInputEnvelope = {
    data: Enumerable<BookingCreateManyDestinationCalendarInput>
    skipDuplicates?: boolean
  }

  export type EventTypeCreateWithoutDestinationCalendarInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutDestinationCalendarInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutDestinationCalendarInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutDestinationCalendarInput, EventTypeUncheckedCreateWithoutDestinationCalendarInput>
  }

  export type CredentialCreateWithoutDestinationCalendarsInput = {
    type: string
    key: JsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutCredentialsInput
    app?: AppCreateNestedOneWithoutCredentialsInput
  }

  export type CredentialUncheckedCreateWithoutDestinationCalendarsInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    userId?: number | null
    appId?: string | null
  }

  export type CredentialCreateOrConnectWithoutDestinationCalendarsInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutDestinationCalendarsInput, CredentialUncheckedCreateWithoutDestinationCalendarsInput>
  }

  export type UserUpsertWithoutDestinationCalendarInput = {
    update: XOR<UserUpdateWithoutDestinationCalendarInput, UserUncheckedUpdateWithoutDestinationCalendarInput>
    create: XOR<UserCreateWithoutDestinationCalendarInput, UserUncheckedCreateWithoutDestinationCalendarInput>
  }

  export type UserUpdateWithoutDestinationCalendarInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutDestinationCalendarInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingUpsertWithWhereUniqueWithoutDestinationCalendarInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutDestinationCalendarInput, BookingUncheckedUpdateWithoutDestinationCalendarInput>
    create: XOR<BookingCreateWithoutDestinationCalendarInput, BookingUncheckedCreateWithoutDestinationCalendarInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutDestinationCalendarInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutDestinationCalendarInput, BookingUncheckedUpdateWithoutDestinationCalendarInput>
  }

  export type BookingUpdateManyWithWhereWithoutDestinationCalendarInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type EventTypeUpsertWithoutDestinationCalendarInput = {
    update: XOR<EventTypeUpdateWithoutDestinationCalendarInput, EventTypeUncheckedUpdateWithoutDestinationCalendarInput>
    create: XOR<EventTypeCreateWithoutDestinationCalendarInput, EventTypeUncheckedCreateWithoutDestinationCalendarInput>
  }

  export type EventTypeUpdateWithoutDestinationCalendarInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutDestinationCalendarInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type CredentialUpsertWithoutDestinationCalendarsInput = {
    update: XOR<CredentialUpdateWithoutDestinationCalendarsInput, CredentialUncheckedUpdateWithoutDestinationCalendarsInput>
    create: XOR<CredentialCreateWithoutDestinationCalendarsInput, CredentialUncheckedCreateWithoutDestinationCalendarsInput>
  }

  export type CredentialUpdateWithoutDestinationCalendarsInput = {
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutCredentialsInput
    app?: AppUpdateOneWithoutCredentialsInput
  }

  export type CredentialUncheckedUpdateWithoutDestinationCalendarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeCreateWithoutUsersInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutUsersInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutUsersInput, EventTypeUncheckedCreateWithoutUsersInput>
  }

  export type CredentialCreateWithoutUserInput = {
    type: string
    key: JsonNullValueInput | InputJsonValue
    app?: AppCreateNestedOneWithoutCredentialsInput
    destinationCalendars?: DestinationCalendarCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    appId?: string | null
    destinationCalendars?: DestinationCalendarUncheckedCreateNestedManyWithoutCredentialInput
  }

  export type CredentialCreateOrConnectWithoutUserInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
  }

  export type CredentialCreateManyUserInputEnvelope = {
    data: Enumerable<CredentialCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MembershipCreateWithoutUserInput = {
    accepted?: boolean
    role: MembershipRole
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type MembershipUncheckedCreateWithoutUserInput = {
    teamId: number
    accepted?: boolean
    role: MembershipRole
  }

  export type MembershipCreateOrConnectWithoutUserInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput>
  }

  export type MembershipCreateManyUserInputEnvelope = {
    data: Enumerable<MembershipCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutUserInput = {
    uid: string
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id?: number
    uid: string
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: Enumerable<BookingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutUserInput = {
    eventType?: EventTypeCreateNestedManyWithoutScheduleInput
    name: string
    timeZone?: string | null
    availability?: AvailabilityCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutUserInput = {
    id?: number
    eventType?: EventTypeUncheckedCreateNestedManyWithoutScheduleInput
    name: string
    timeZone?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleCreateOrConnectWithoutUserInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput>
  }

  export type ScheduleCreateManyUserInputEnvelope = {
    data: Enumerable<ScheduleCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SelectedCalendarCreateWithoutUserInput = {
    integration: string
    externalId: string
  }

  export type SelectedCalendarUncheckedCreateWithoutUserInput = {
    integration: string
    externalId: string
  }

  export type SelectedCalendarCreateOrConnectWithoutUserInput = {
    where: SelectedCalendarWhereUniqueInput
    create: XOR<SelectedCalendarCreateWithoutUserInput, SelectedCalendarUncheckedCreateWithoutUserInput>
  }

  export type SelectedCalendarCreateManyUserInputEnvelope = {
    data: Enumerable<SelectedCalendarCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AvailabilityCreateWithoutUserInput = {
    eventType?: EventTypeCreateNestedOneWithoutAvailabilityInput
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    Schedule?: ScheduleCreateNestedOneWithoutAvailabilityInput
  }

  export type AvailabilityUncheckedCreateWithoutUserInput = {
    id?: number
    eventTypeId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    scheduleId?: number | null
  }

  export type AvailabilityCreateOrConnectWithoutUserInput = {
    where: AvailabilityWhereUniqueInput
    create: XOR<AvailabilityCreateWithoutUserInput, AvailabilityUncheckedCreateWithoutUserInput>
  }

  export type AvailabilityCreateManyUserInputEnvelope = {
    data: Enumerable<AvailabilityCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WebhookCreateWithoutUserInput = {
    id: string
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    eventType?: EventTypeCreateNestedOneWithoutWebhooksInput
    app?: AppCreateNestedOneWithoutWebhookInput
    secret?: string | null
  }

  export type WebhookUncheckedCreateWithoutUserInput = {
    id: string
    eventTypeId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: string | null
    secret?: string | null
  }

  export type WebhookCreateOrConnectWithoutUserInput = {
    where: WebhookWhereUniqueInput
    create: XOR<WebhookCreateWithoutUserInput, WebhookUncheckedCreateWithoutUserInput>
  }

  export type WebhookCreateManyUserInputEnvelope = {
    data: Enumerable<WebhookCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DestinationCalendarCreateWithoutUserInput = {
    integration: string
    externalId: string
    booking?: BookingCreateNestedManyWithoutDestinationCalendarInput
    eventType?: EventTypeCreateNestedOneWithoutDestinationCalendarInput
    credential?: CredentialCreateNestedOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedCreateWithoutUserInput = {
    id?: number
    integration: string
    externalId: string
    booking?: BookingUncheckedCreateNestedManyWithoutDestinationCalendarInput
    eventTypeId?: number | null
    credentialId?: number | null
  }

  export type DestinationCalendarCreateOrConnectWithoutUserInput = {
    where: DestinationCalendarWhereUniqueInput
    create: XOR<DestinationCalendarCreateWithoutUserInput, DestinationCalendarUncheckedCreateWithoutUserInput>
  }

  export type ImpersonationsCreateWithoutImpersonatedUserInput = {
    createdAt?: Date | string
    impersonatedBy: UserCreateNestedOneWithoutImpersonatedByInput
  }

  export type ImpersonationsUncheckedCreateWithoutImpersonatedUserInput = {
    id?: number
    createdAt?: Date | string
    impersonatedById: number
  }

  export type ImpersonationsCreateOrConnectWithoutImpersonatedUserInput = {
    where: ImpersonationsWhereUniqueInput
    create: XOR<ImpersonationsCreateWithoutImpersonatedUserInput, ImpersonationsUncheckedCreateWithoutImpersonatedUserInput>
  }

  export type ImpersonationsCreateManyImpersonatedUserInputEnvelope = {
    data: Enumerable<ImpersonationsCreateManyImpersonatedUserInput>
    skipDuplicates?: boolean
  }

  export type ImpersonationsCreateWithoutImpersonatedByInput = {
    createdAt?: Date | string
    impersonatedUser: UserCreateNestedOneWithoutImpersonatedUsersInput
  }

  export type ImpersonationsUncheckedCreateWithoutImpersonatedByInput = {
    id?: number
    createdAt?: Date | string
    impersonatedUserId: number
  }

  export type ImpersonationsCreateOrConnectWithoutImpersonatedByInput = {
    where: ImpersonationsWhereUniqueInput
    create: XOR<ImpersonationsCreateWithoutImpersonatedByInput, ImpersonationsUncheckedCreateWithoutImpersonatedByInput>
  }

  export type ImpersonationsCreateManyImpersonatedByInputEnvelope = {
    data: Enumerable<ImpersonationsCreateManyImpersonatedByInput>
    skipDuplicates?: boolean
  }

  export type ApiKeyCreateWithoutUserInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    app?: AppCreateNestedOneWithoutApiKeyInput
  }

  export type ApiKeyUncheckedCreateWithoutUserInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    appId?: string | null
  }

  export type ApiKeyCreateOrConnectWithoutUserInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput>
  }

  export type ApiKeyCreateManyUserInputEnvelope = {
    data: Enumerable<ApiKeyCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: Enumerable<AccountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WorkflowCreateWithoutUserInput = {
    name: string
    activeOn?: WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
    steps?: WorkflowStepCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    activeOn?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
    steps?: WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutUserInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutUserInput, WorkflowUncheckedCreateWithoutUserInput>
  }

  export type WorkflowCreateManyUserInputEnvelope = {
    data: Enumerable<WorkflowCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type App_RoutingForms_FormCreateWithoutUserInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    responses?: App_RoutingForms_FormResponseCreateNestedManyWithoutFormInput
    disabled?: boolean
  }

  export type App_RoutingForms_FormUncheckedCreateWithoutUserInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    responses?: App_RoutingForms_FormResponseUncheckedCreateNestedManyWithoutFormInput
    disabled?: boolean
  }

  export type App_RoutingForms_FormCreateOrConnectWithoutUserInput = {
    where: App_RoutingForms_FormWhereUniqueInput
    create: XOR<App_RoutingForms_FormCreateWithoutUserInput, App_RoutingForms_FormUncheckedCreateWithoutUserInput>
  }

  export type App_RoutingForms_FormCreateManyUserInputEnvelope = {
    data: Enumerable<App_RoutingForms_FormCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    date: Date | string
    rating: string
    comment?: string | null
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    rating: string
    comment?: string | null
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: Enumerable<FeedbackCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type EventTypeUpsertWithWhereUniqueWithoutUsersInput = {
    where: EventTypeWhereUniqueInput
    update: XOR<EventTypeUpdateWithoutUsersInput, EventTypeUncheckedUpdateWithoutUsersInput>
    create: XOR<EventTypeCreateWithoutUsersInput, EventTypeUncheckedCreateWithoutUsersInput>
  }

  export type EventTypeUpdateWithWhereUniqueWithoutUsersInput = {
    where: EventTypeWhereUniqueInput
    data: XOR<EventTypeUpdateWithoutUsersInput, EventTypeUncheckedUpdateWithoutUsersInput>
  }

  export type EventTypeUpdateManyWithWhereWithoutUsersInput = {
    where: EventTypeScalarWhereInput
    data: XOR<EventTypeUpdateManyMutationInput, EventTypeUncheckedUpdateManyWithoutEventTypesInput>
  }

  export type EventTypeScalarWhereInput = {
    AND?: Enumerable<EventTypeScalarWhereInput>
    OR?: Enumerable<EventTypeScalarWhereInput>
    NOT?: Enumerable<EventTypeScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    slug?: StringFilter | string
    description?: StringNullableFilter | string | null
    position?: IntFilter | number
    locations?: JsonNullableFilter
    length?: IntFilter | number
    hidden?: BoolFilter | boolean
    userId?: IntNullableFilter | number | null
    teamId?: IntNullableFilter | number | null
    eventName?: StringNullableFilter | string | null
    timeZone?: StringNullableFilter | string | null
    periodType?: EnumPeriodTypeFilter | PeriodType
    periodStartDate?: DateTimeNullableFilter | Date | string | null
    periodEndDate?: DateTimeNullableFilter | Date | string | null
    periodDays?: IntNullableFilter | number | null
    periodCountCalendarDays?: BoolNullableFilter | boolean | null
    requiresConfirmation?: BoolFilter | boolean
    recurringEvent?: JsonNullableFilter
    disableGuests?: BoolFilter | boolean
    hideCalendarNotes?: BoolFilter | boolean
    minimumBookingNotice?: IntFilter | number
    beforeEventBuffer?: IntFilter | number
    afterEventBuffer?: IntFilter | number
    seatsPerTimeSlot?: IntNullableFilter | number | null
    schedulingType?: EnumSchedulingTypeNullableFilter | SchedulingType | null
    scheduleId?: IntNullableFilter | number | null
    price?: IntFilter | number
    currency?: StringFilter | string
    slotInterval?: IntNullableFilter | number | null
    metadata?: JsonNullableFilter
    successRedirectUrl?: StringNullableFilter | string | null
  }

  export type CredentialUpsertWithWhereUniqueWithoutUserInput = {
    where: CredentialWhereUniqueInput
    update: XOR<CredentialUpdateWithoutUserInput, CredentialUncheckedUpdateWithoutUserInput>
    create: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
  }

  export type CredentialUpdateWithWhereUniqueWithoutUserInput = {
    where: CredentialWhereUniqueInput
    data: XOR<CredentialUpdateWithoutUserInput, CredentialUncheckedUpdateWithoutUserInput>
  }

  export type CredentialUpdateManyWithWhereWithoutUserInput = {
    where: CredentialScalarWhereInput
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyWithoutCredentialsInput>
  }

  export type CredentialScalarWhereInput = {
    AND?: Enumerable<CredentialScalarWhereInput>
    OR?: Enumerable<CredentialScalarWhereInput>
    NOT?: Enumerable<CredentialScalarWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    key?: JsonFilter
    userId?: IntNullableFilter | number | null
    appId?: StringNullableFilter | string | null
  }

  export type MembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutUserInput, MembershipUncheckedUpdateWithoutUserInput>
    create: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutUserInput, MembershipUncheckedUpdateWithoutUserInput>
  }

  export type MembershipUpdateManyWithWhereWithoutUserInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutTeamsInput>
  }

  export type MembershipScalarWhereInput = {
    AND?: Enumerable<MembershipScalarWhereInput>
    OR?: Enumerable<MembershipScalarWhereInput>
    NOT?: Enumerable<MembershipScalarWhereInput>
    teamId?: IntFilter | number
    userId?: IntFilter | number
    accepted?: BoolFilter | boolean
    role?: EnumMembershipRoleFilter | MembershipRole
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingsInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutUserInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutUserInput, ScheduleUncheckedUpdateWithoutUserInput>
    create: XOR<ScheduleCreateWithoutUserInput, ScheduleUncheckedCreateWithoutUserInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutUserInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutUserInput, ScheduleUncheckedUpdateWithoutUserInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutUserInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutSchedulesInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: Enumerable<ScheduleScalarWhereInput>
    OR?: Enumerable<ScheduleScalarWhereInput>
    NOT?: Enumerable<ScheduleScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    timeZone?: StringNullableFilter | string | null
  }

  export type SelectedCalendarUpsertWithWhereUniqueWithoutUserInput = {
    where: SelectedCalendarWhereUniqueInput
    update: XOR<SelectedCalendarUpdateWithoutUserInput, SelectedCalendarUncheckedUpdateWithoutUserInput>
    create: XOR<SelectedCalendarCreateWithoutUserInput, SelectedCalendarUncheckedCreateWithoutUserInput>
  }

  export type SelectedCalendarUpdateWithWhereUniqueWithoutUserInput = {
    where: SelectedCalendarWhereUniqueInput
    data: XOR<SelectedCalendarUpdateWithoutUserInput, SelectedCalendarUncheckedUpdateWithoutUserInput>
  }

  export type SelectedCalendarUpdateManyWithWhereWithoutUserInput = {
    where: SelectedCalendarScalarWhereInput
    data: XOR<SelectedCalendarUpdateManyMutationInput, SelectedCalendarUncheckedUpdateManyWithoutSelectedCalendarsInput>
  }

  export type SelectedCalendarScalarWhereInput = {
    AND?: Enumerable<SelectedCalendarScalarWhereInput>
    OR?: Enumerable<SelectedCalendarScalarWhereInput>
    NOT?: Enumerable<SelectedCalendarScalarWhereInput>
    userId?: IntFilter | number
    integration?: StringFilter | string
    externalId?: StringFilter | string
  }

  export type AvailabilityUpsertWithWhereUniqueWithoutUserInput = {
    where: AvailabilityWhereUniqueInput
    update: XOR<AvailabilityUpdateWithoutUserInput, AvailabilityUncheckedUpdateWithoutUserInput>
    create: XOR<AvailabilityCreateWithoutUserInput, AvailabilityUncheckedCreateWithoutUserInput>
  }

  export type AvailabilityUpdateWithWhereUniqueWithoutUserInput = {
    where: AvailabilityWhereUniqueInput
    data: XOR<AvailabilityUpdateWithoutUserInput, AvailabilityUncheckedUpdateWithoutUserInput>
  }

  export type AvailabilityUpdateManyWithWhereWithoutUserInput = {
    where: AvailabilityScalarWhereInput
    data: XOR<AvailabilityUpdateManyMutationInput, AvailabilityUncheckedUpdateManyWithoutAvailabilityInput>
  }

  export type WebhookUpsertWithWhereUniqueWithoutUserInput = {
    where: WebhookWhereUniqueInput
    update: XOR<WebhookUpdateWithoutUserInput, WebhookUncheckedUpdateWithoutUserInput>
    create: XOR<WebhookCreateWithoutUserInput, WebhookUncheckedCreateWithoutUserInput>
  }

  export type WebhookUpdateWithWhereUniqueWithoutUserInput = {
    where: WebhookWhereUniqueInput
    data: XOR<WebhookUpdateWithoutUserInput, WebhookUncheckedUpdateWithoutUserInput>
  }

  export type WebhookUpdateManyWithWhereWithoutUserInput = {
    where: WebhookScalarWhereInput
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyWithoutWebhooksInput>
  }

  export type DestinationCalendarUpsertWithoutUserInput = {
    update: XOR<DestinationCalendarUpdateWithoutUserInput, DestinationCalendarUncheckedUpdateWithoutUserInput>
    create: XOR<DestinationCalendarCreateWithoutUserInput, DestinationCalendarUncheckedCreateWithoutUserInput>
  }

  export type DestinationCalendarUpdateWithoutUserInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    booking?: BookingUpdateManyWithoutDestinationCalendarInput
    eventType?: EventTypeUpdateOneWithoutDestinationCalendarInput
    credential?: CredentialUpdateOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    booking?: BookingUncheckedUpdateManyWithoutDestinationCalendarInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedUserInput = {
    where: ImpersonationsWhereUniqueInput
    update: XOR<ImpersonationsUpdateWithoutImpersonatedUserInput, ImpersonationsUncheckedUpdateWithoutImpersonatedUserInput>
    create: XOR<ImpersonationsCreateWithoutImpersonatedUserInput, ImpersonationsUncheckedCreateWithoutImpersonatedUserInput>
  }

  export type ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedUserInput = {
    where: ImpersonationsWhereUniqueInput
    data: XOR<ImpersonationsUpdateWithoutImpersonatedUserInput, ImpersonationsUncheckedUpdateWithoutImpersonatedUserInput>
  }

  export type ImpersonationsUpdateManyWithWhereWithoutImpersonatedUserInput = {
    where: ImpersonationsScalarWhereInput
    data: XOR<ImpersonationsUpdateManyMutationInput, ImpersonationsUncheckedUpdateManyWithoutImpersonatedUsersInput>
  }

  export type ImpersonationsScalarWhereInput = {
    AND?: Enumerable<ImpersonationsScalarWhereInput>
    OR?: Enumerable<ImpersonationsScalarWhereInput>
    NOT?: Enumerable<ImpersonationsScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    impersonatedUserId?: IntFilter | number
    impersonatedById?: IntFilter | number
  }

  export type ImpersonationsUpsertWithWhereUniqueWithoutImpersonatedByInput = {
    where: ImpersonationsWhereUniqueInput
    update: XOR<ImpersonationsUpdateWithoutImpersonatedByInput, ImpersonationsUncheckedUpdateWithoutImpersonatedByInput>
    create: XOR<ImpersonationsCreateWithoutImpersonatedByInput, ImpersonationsUncheckedCreateWithoutImpersonatedByInput>
  }

  export type ImpersonationsUpdateWithWhereUniqueWithoutImpersonatedByInput = {
    where: ImpersonationsWhereUniqueInput
    data: XOR<ImpersonationsUpdateWithoutImpersonatedByInput, ImpersonationsUncheckedUpdateWithoutImpersonatedByInput>
  }

  export type ImpersonationsUpdateManyWithWhereWithoutImpersonatedByInput = {
    where: ImpersonationsScalarWhereInput
    data: XOR<ImpersonationsUpdateManyMutationInput, ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput>
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutUserInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutUserInput, ApiKeyUncheckedUpdateWithoutUserInput>
    create: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutUserInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutUserInput, ApiKeyUncheckedUpdateWithoutUserInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutUserInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutApiKeysInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: Enumerable<ApiKeyScalarWhereInput>
    OR?: Enumerable<ApiKeyScalarWhereInput>
    NOT?: Enumerable<ApiKeyScalarWhereInput>
    id?: StringFilter | string
    userId?: IntFilter | number
    note?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    expiresAt?: DateTimeNullableFilter | Date | string | null
    lastUsedAt?: DateTimeNullableFilter | Date | string | null
    hashedKey?: StringFilter | string
    appId?: StringNullableFilter | string | null
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountsInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: StringFilter | string
    userId?: IntFilter | number
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: IntFilter | number
    expires?: DateTimeFilter | Date | string
  }

  export type WorkflowUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkflowWhereUniqueInput
    update: XOR<WorkflowUpdateWithoutUserInput, WorkflowUncheckedUpdateWithoutUserInput>
    create: XOR<WorkflowCreateWithoutUserInput, WorkflowUncheckedCreateWithoutUserInput>
  }

  export type WorkflowUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkflowWhereUniqueInput
    data: XOR<WorkflowUpdateWithoutUserInput, WorkflowUncheckedUpdateWithoutUserInput>
  }

  export type WorkflowUpdateManyWithWhereWithoutUserInput = {
    where: WorkflowScalarWhereInput
    data: XOR<WorkflowUpdateManyMutationInput, WorkflowUncheckedUpdateManyWithoutWorkflowsInput>
  }

  export type WorkflowScalarWhereInput = {
    AND?: Enumerable<WorkflowScalarWhereInput>
    OR?: Enumerable<WorkflowScalarWhereInput>
    NOT?: Enumerable<WorkflowScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    userId?: IntFilter | number
    trigger?: EnumWorkflowTriggerEventsFilter | WorkflowTriggerEvents
    time?: IntNullableFilter | number | null
    timeUnit?: EnumTimeUnitNullableFilter | TimeUnit | null
  }

  export type App_RoutingForms_FormUpsertWithWhereUniqueWithoutUserInput = {
    where: App_RoutingForms_FormWhereUniqueInput
    update: XOR<App_RoutingForms_FormUpdateWithoutUserInput, App_RoutingForms_FormUncheckedUpdateWithoutUserInput>
    create: XOR<App_RoutingForms_FormCreateWithoutUserInput, App_RoutingForms_FormUncheckedCreateWithoutUserInput>
  }

  export type App_RoutingForms_FormUpdateWithWhereUniqueWithoutUserInput = {
    where: App_RoutingForms_FormWhereUniqueInput
    data: XOR<App_RoutingForms_FormUpdateWithoutUserInput, App_RoutingForms_FormUncheckedUpdateWithoutUserInput>
  }

  export type App_RoutingForms_FormUpdateManyWithWhereWithoutUserInput = {
    where: App_RoutingForms_FormScalarWhereInput
    data: XOR<App_RoutingForms_FormUpdateManyMutationInput, App_RoutingForms_FormUncheckedUpdateManyWithoutRoutingFormsInput>
  }

  export type App_RoutingForms_FormScalarWhereInput = {
    AND?: Enumerable<App_RoutingForms_FormScalarWhereInput>
    OR?: Enumerable<App_RoutingForms_FormScalarWhereInput>
    NOT?: Enumerable<App_RoutingForms_FormScalarWhereInput>
    id?: StringFilter | string
    description?: StringNullableFilter | string | null
    routes?: JsonNullableFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    fields?: JsonNullableFilter
    userId?: IntFilter | number
    disabled?: BoolFilter | boolean
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutFeedbackInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: Enumerable<FeedbackScalarWhereInput>
    OR?: Enumerable<FeedbackScalarWhereInput>
    NOT?: Enumerable<FeedbackScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    userId?: IntFilter | number
    rating?: StringFilter | string
    comment?: StringNullableFilter | string | null
  }

  export type MembershipCreateWithoutTeamInput = {
    accepted?: boolean
    role: MembershipRole
    user: UserCreateNestedOneWithoutTeamsInput
  }

  export type MembershipUncheckedCreateWithoutTeamInput = {
    userId: number
    accepted?: boolean
    role: MembershipRole
  }

  export type MembershipCreateOrConnectWithoutTeamInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutTeamInput, MembershipUncheckedCreateWithoutTeamInput>
  }

  export type MembershipCreateManyTeamInputEnvelope = {
    data: Enumerable<MembershipCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type EventTypeCreateWithoutTeamInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutTeamInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutTeamInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutTeamInput, EventTypeUncheckedCreateWithoutTeamInput>
  }

  export type EventTypeCreateManyTeamInputEnvelope = {
    data: Enumerable<EventTypeCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type MembershipUpsertWithWhereUniqueWithoutTeamInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutTeamInput, MembershipUncheckedUpdateWithoutTeamInput>
    create: XOR<MembershipCreateWithoutTeamInput, MembershipUncheckedCreateWithoutTeamInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutTeamInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutTeamInput, MembershipUncheckedUpdateWithoutTeamInput>
  }

  export type MembershipUpdateManyWithWhereWithoutTeamInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutMembersInput>
  }

  export type EventTypeUpsertWithWhereUniqueWithoutTeamInput = {
    where: EventTypeWhereUniqueInput
    update: XOR<EventTypeUpdateWithoutTeamInput, EventTypeUncheckedUpdateWithoutTeamInput>
    create: XOR<EventTypeCreateWithoutTeamInput, EventTypeUncheckedCreateWithoutTeamInput>
  }

  export type EventTypeUpdateWithWhereUniqueWithoutTeamInput = {
    where: EventTypeWhereUniqueInput
    data: XOR<EventTypeUpdateWithoutTeamInput, EventTypeUncheckedUpdateWithoutTeamInput>
  }

  export type EventTypeUpdateManyWithWhereWithoutTeamInput = {
    where: EventTypeScalarWhereInput
    data: XOR<EventTypeUpdateManyMutationInput, EventTypeUncheckedUpdateManyWithoutEventTypesInput>
  }

  export type TeamCreateWithoutMembersInput = {
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
    eventTypes?: EventTypeCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: number
    name?: string | null
    slug?: string | null
    logo?: string | null
    bio?: string | null
    hideBranding?: boolean
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutTeamsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutTeamsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type TeamUpsertWithoutMembersInput = {
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type TeamUpdateWithoutMembersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    eventTypes?: EventTypeUpdateManyWithoutTeamInput
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    eventTypes?: EventTypeUncheckedUpdateManyWithoutTeamInput
  }

  export type UserUpsertWithoutTeamsInput = {
    update: XOR<UserUpdateWithoutTeamsInput, UserUncheckedUpdateWithoutTeamsInput>
    create: XOR<UserCreateWithoutTeamsInput, UserUncheckedCreateWithoutTeamsInput>
  }

  export type UserUpdateWithoutTeamsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingCreateWithoutReferencesInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutReferencesInput = {
    id?: number
    uid: string
    userId?: number | null
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutReferencesInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutReferencesInput, BookingUncheckedCreateWithoutReferencesInput>
  }

  export type BookingUpsertWithoutReferencesInput = {
    update: XOR<BookingUpdateWithoutReferencesInput, BookingUncheckedUpdateWithoutReferencesInput>
    create: XOR<BookingCreateWithoutReferencesInput, BookingUncheckedCreateWithoutReferencesInput>
  }

  export type BookingUpdateWithoutReferencesInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutReferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type BookingCreateWithoutAttendeesInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutAttendeesInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutAttendeesInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutAttendeesInput, BookingUncheckedCreateWithoutAttendeesInput>
  }

  export type BookingUpsertWithoutAttendeesInput = {
    update: XOR<BookingUpdateWithoutAttendeesInput, BookingUncheckedUpdateWithoutAttendeesInput>
    create: XOR<BookingCreateWithoutAttendeesInput, BookingUncheckedCreateWithoutAttendeesInput>
  }

  export type BookingUpdateWithoutAttendeesInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutAttendeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type BookingCreateWithoutDailyRefInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutDailyRefInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutDailyRefInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutDailyRefInput, BookingUncheckedCreateWithoutDailyRefInput>
  }

  export type BookingUpsertWithoutDailyRefInput = {
    update: XOR<BookingUpdateWithoutDailyRefInput, BookingUncheckedUpdateWithoutDailyRefInput>
    create: XOR<BookingCreateWithoutDailyRefInput, BookingUncheckedCreateWithoutDailyRefInput>
  }

  export type BookingUpdateWithoutDailyRefInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutDailyRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type UserCreateWithoutBookingsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type BookingReferenceCreateWithoutBookingInput = {
    type: string
    uid: string
    meetingId?: string | null
    meetingPassword?: string | null
    meetingUrl?: string | null
    externalCalendarId?: string | null
    deleted?: boolean | null
    credentialId?: number | null
  }

  export type BookingReferenceUncheckedCreateWithoutBookingInput = {
    id?: number
    type: string
    uid: string
    meetingId?: string | null
    meetingPassword?: string | null
    meetingUrl?: string | null
    externalCalendarId?: string | null
    deleted?: boolean | null
    credentialId?: number | null
  }

  export type BookingReferenceCreateOrConnectWithoutBookingInput = {
    where: BookingReferenceWhereUniqueInput
    create: XOR<BookingReferenceCreateWithoutBookingInput, BookingReferenceUncheckedCreateWithoutBookingInput>
  }

  export type BookingReferenceCreateManyBookingInputEnvelope = {
    data: Enumerable<BookingReferenceCreateManyBookingInput>
    skipDuplicates?: boolean
  }

  export type EventTypeCreateWithoutBookingsInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutBookingsInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutBookingsInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutBookingsInput, EventTypeUncheckedCreateWithoutBookingsInput>
  }

  export type AttendeeCreateWithoutBookingInput = {
    email: string
    name: string
    timeZone: string
    locale?: string | null
  }

  export type AttendeeUncheckedCreateWithoutBookingInput = {
    id?: number
    email: string
    name: string
    timeZone: string
    locale?: string | null
  }

  export type AttendeeCreateOrConnectWithoutBookingInput = {
    where: AttendeeWhereUniqueInput
    create: XOR<AttendeeCreateWithoutBookingInput, AttendeeUncheckedCreateWithoutBookingInput>
  }

  export type AttendeeCreateManyBookingInputEnvelope = {
    data: Enumerable<AttendeeCreateManyBookingInput>
    skipDuplicates?: boolean
  }

  export type DailyEventReferenceCreateWithoutBookingInput = {
    dailyurl?: string
    dailytoken?: string
  }

  export type DailyEventReferenceUncheckedCreateWithoutBookingInput = {
    id?: number
    dailyurl?: string
    dailytoken?: string
  }

  export type DailyEventReferenceCreateOrConnectWithoutBookingInput = {
    where: DailyEventReferenceWhereUniqueInput
    create: XOR<DailyEventReferenceCreateWithoutBookingInput, DailyEventReferenceUncheckedCreateWithoutBookingInput>
  }

  export type PaymentCreateWithoutBookingInput = {
    uid: string
    type: PaymentType
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonNullValueInput | InputJsonValue
    externalId: string
  }

  export type PaymentUncheckedCreateWithoutBookingInput = {
    id?: number
    uid: string
    type: PaymentType
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonNullValueInput | InputJsonValue
    externalId: string
  }

  export type PaymentCreateOrConnectWithoutBookingInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput>
  }

  export type PaymentCreateManyBookingInputEnvelope = {
    data: Enumerable<PaymentCreateManyBookingInput>
    skipDuplicates?: boolean
  }

  export type DestinationCalendarCreateWithoutBookingInput = {
    integration: string
    externalId: string
    user?: UserCreateNestedOneWithoutDestinationCalendarInput
    eventType?: EventTypeCreateNestedOneWithoutDestinationCalendarInput
    credential?: CredentialCreateNestedOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedCreateWithoutBookingInput = {
    id?: number
    integration: string
    externalId: string
    userId?: number | null
    eventTypeId?: number | null
    credentialId?: number | null
  }

  export type DestinationCalendarCreateOrConnectWithoutBookingInput = {
    where: DestinationCalendarWhereUniqueInput
    create: XOR<DestinationCalendarCreateWithoutBookingInput, DestinationCalendarUncheckedCreateWithoutBookingInput>
  }

  export type WorkflowReminderCreateWithoutBookingInput = {
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
    workflowStep: WorkflowStepCreateNestedOneWithoutWorkflowRemindersInput
  }

  export type WorkflowReminderUncheckedCreateWithoutBookingInput = {
    id?: number
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
    workflowStepId: number
  }

  export type WorkflowReminderCreateOrConnectWithoutBookingInput = {
    where: WorkflowReminderWhereUniqueInput
    create: XOR<WorkflowReminderCreateWithoutBookingInput, WorkflowReminderUncheckedCreateWithoutBookingInput>
  }

  export type WorkflowReminderCreateManyBookingInputEnvelope = {
    data: Enumerable<WorkflowReminderCreateManyBookingInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingReferenceUpsertWithWhereUniqueWithoutBookingInput = {
    where: BookingReferenceWhereUniqueInput
    update: XOR<BookingReferenceUpdateWithoutBookingInput, BookingReferenceUncheckedUpdateWithoutBookingInput>
    create: XOR<BookingReferenceCreateWithoutBookingInput, BookingReferenceUncheckedCreateWithoutBookingInput>
  }

  export type BookingReferenceUpdateWithWhereUniqueWithoutBookingInput = {
    where: BookingReferenceWhereUniqueInput
    data: XOR<BookingReferenceUpdateWithoutBookingInput, BookingReferenceUncheckedUpdateWithoutBookingInput>
  }

  export type BookingReferenceUpdateManyWithWhereWithoutBookingInput = {
    where: BookingReferenceScalarWhereInput
    data: XOR<BookingReferenceUpdateManyMutationInput, BookingReferenceUncheckedUpdateManyWithoutReferencesInput>
  }

  export type BookingReferenceScalarWhereInput = {
    AND?: Enumerable<BookingReferenceScalarWhereInput>
    OR?: Enumerable<BookingReferenceScalarWhereInput>
    NOT?: Enumerable<BookingReferenceScalarWhereInput>
    id?: IntFilter | number
    type?: StringFilter | string
    uid?: StringFilter | string
    meetingId?: StringNullableFilter | string | null
    meetingPassword?: StringNullableFilter | string | null
    meetingUrl?: StringNullableFilter | string | null
    bookingId?: IntNullableFilter | number | null
    externalCalendarId?: StringNullableFilter | string | null
    deleted?: BoolNullableFilter | boolean | null
    credentialId?: IntNullableFilter | number | null
  }

  export type EventTypeUpsertWithoutBookingsInput = {
    update: XOR<EventTypeUpdateWithoutBookingsInput, EventTypeUncheckedUpdateWithoutBookingsInput>
    create: XOR<EventTypeCreateWithoutBookingsInput, EventTypeUncheckedCreateWithoutBookingsInput>
  }

  export type EventTypeUpdateWithoutBookingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type AttendeeUpsertWithWhereUniqueWithoutBookingInput = {
    where: AttendeeWhereUniqueInput
    update: XOR<AttendeeUpdateWithoutBookingInput, AttendeeUncheckedUpdateWithoutBookingInput>
    create: XOR<AttendeeCreateWithoutBookingInput, AttendeeUncheckedCreateWithoutBookingInput>
  }

  export type AttendeeUpdateWithWhereUniqueWithoutBookingInput = {
    where: AttendeeWhereUniqueInput
    data: XOR<AttendeeUpdateWithoutBookingInput, AttendeeUncheckedUpdateWithoutBookingInput>
  }

  export type AttendeeUpdateManyWithWhereWithoutBookingInput = {
    where: AttendeeScalarWhereInput
    data: XOR<AttendeeUpdateManyMutationInput, AttendeeUncheckedUpdateManyWithoutAttendeesInput>
  }

  export type AttendeeScalarWhereInput = {
    AND?: Enumerable<AttendeeScalarWhereInput>
    OR?: Enumerable<AttendeeScalarWhereInput>
    NOT?: Enumerable<AttendeeScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    timeZone?: StringFilter | string
    locale?: StringNullableFilter | string | null
    bookingId?: IntNullableFilter | number | null
  }

  export type DailyEventReferenceUpsertWithoutBookingInput = {
    update: XOR<DailyEventReferenceUpdateWithoutBookingInput, DailyEventReferenceUncheckedUpdateWithoutBookingInput>
    create: XOR<DailyEventReferenceCreateWithoutBookingInput, DailyEventReferenceUncheckedCreateWithoutBookingInput>
  }

  export type DailyEventReferenceUpdateWithoutBookingInput = {
    dailyurl?: StringFieldUpdateOperationsInput | string
    dailytoken?: StringFieldUpdateOperationsInput | string
  }

  export type DailyEventReferenceUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    dailyurl?: StringFieldUpdateOperationsInput | string
    dailytoken?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutBookingInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutBookingInput, PaymentUncheckedUpdateWithoutBookingInput>
    create: XOR<PaymentCreateWithoutBookingInput, PaymentUncheckedCreateWithoutBookingInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutBookingInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutBookingInput, PaymentUncheckedUpdateWithoutBookingInput>
  }

  export type PaymentUpdateManyWithWhereWithoutBookingInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: Enumerable<PaymentScalarWhereInput>
    OR?: Enumerable<PaymentScalarWhereInput>
    NOT?: Enumerable<PaymentScalarWhereInput>
    id?: IntFilter | number
    uid?: StringFilter | string
    type?: EnumPaymentTypeFilter | PaymentType
    bookingId?: IntFilter | number
    amount?: IntFilter | number
    fee?: IntFilter | number
    currency?: StringFilter | string
    success?: BoolFilter | boolean
    refunded?: BoolFilter | boolean
    data?: JsonFilter
    externalId?: StringFilter | string
  }

  export type DestinationCalendarUpsertWithoutBookingInput = {
    update: XOR<DestinationCalendarUpdateWithoutBookingInput, DestinationCalendarUncheckedUpdateWithoutBookingInput>
    create: XOR<DestinationCalendarCreateWithoutBookingInput, DestinationCalendarUncheckedCreateWithoutBookingInput>
  }

  export type DestinationCalendarUpdateWithoutBookingInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutDestinationCalendarInput
    eventType?: EventTypeUpdateOneWithoutDestinationCalendarInput
    credential?: CredentialUpdateOneWithoutDestinationCalendarsInput
  }

  export type DestinationCalendarUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WorkflowReminderUpsertWithWhereUniqueWithoutBookingInput = {
    where: WorkflowReminderWhereUniqueInput
    update: XOR<WorkflowReminderUpdateWithoutBookingInput, WorkflowReminderUncheckedUpdateWithoutBookingInput>
    create: XOR<WorkflowReminderCreateWithoutBookingInput, WorkflowReminderUncheckedCreateWithoutBookingInput>
  }

  export type WorkflowReminderUpdateWithWhereUniqueWithoutBookingInput = {
    where: WorkflowReminderWhereUniqueInput
    data: XOR<WorkflowReminderUpdateWithoutBookingInput, WorkflowReminderUncheckedUpdateWithoutBookingInput>
  }

  export type WorkflowReminderUpdateManyWithWhereWithoutBookingInput = {
    where: WorkflowReminderScalarWhereInput
    data: XOR<WorkflowReminderUpdateManyMutationInput, WorkflowReminderUncheckedUpdateManyWithoutWorkflowRemindersInput>
  }

  export type WorkflowReminderScalarWhereInput = {
    AND?: Enumerable<WorkflowReminderScalarWhereInput>
    OR?: Enumerable<WorkflowReminderScalarWhereInput>
    NOT?: Enumerable<WorkflowReminderScalarWhereInput>
    id?: IntFilter | number
    bookingUid?: StringFilter | string
    method?: EnumWorkflowMethodsFilter | WorkflowMethods
    scheduledDate?: DateTimeFilter | Date | string
    referenceId?: StringNullableFilter | string | null
    scheduled?: BoolFilter | boolean
    workflowStepId?: IntFilter | number
  }

  export type UserCreateWithoutSchedulesInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutSchedulesInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutSchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
  }

  export type EventTypeCreateWithoutScheduleInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutScheduleInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutScheduleInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutScheduleInput, EventTypeUncheckedCreateWithoutScheduleInput>
  }

  export type EventTypeCreateManyScheduleInputEnvelope = {
    data: Enumerable<EventTypeCreateManyScheduleInput>
    skipDuplicates?: boolean
  }

  export type AvailabilityCreateWithoutScheduleInput = {
    user?: UserCreateNestedOneWithoutAvailabilityInput
    eventType?: EventTypeCreateNestedOneWithoutAvailabilityInput
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
  }

  export type AvailabilityUncheckedCreateWithoutScheduleInput = {
    id?: number
    userId?: number | null
    eventTypeId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
  }

  export type AvailabilityCreateOrConnectWithoutScheduleInput = {
    where: AvailabilityWhereUniqueInput
    create: XOR<AvailabilityCreateWithoutScheduleInput, AvailabilityUncheckedCreateWithoutScheduleInput>
  }

  export type AvailabilityCreateManyScheduleInputEnvelope = {
    data: Enumerable<AvailabilityCreateManyScheduleInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSchedulesInput = {
    update: XOR<UserUpdateWithoutSchedulesInput, UserUncheckedUpdateWithoutSchedulesInput>
    create: XOR<UserCreateWithoutSchedulesInput, UserUncheckedCreateWithoutSchedulesInput>
  }

  export type UserUpdateWithoutSchedulesInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeUpsertWithWhereUniqueWithoutScheduleInput = {
    where: EventTypeWhereUniqueInput
    update: XOR<EventTypeUpdateWithoutScheduleInput, EventTypeUncheckedUpdateWithoutScheduleInput>
    create: XOR<EventTypeCreateWithoutScheduleInput, EventTypeUncheckedCreateWithoutScheduleInput>
  }

  export type EventTypeUpdateWithWhereUniqueWithoutScheduleInput = {
    where: EventTypeWhereUniqueInput
    data: XOR<EventTypeUpdateWithoutScheduleInput, EventTypeUncheckedUpdateWithoutScheduleInput>
  }

  export type EventTypeUpdateManyWithWhereWithoutScheduleInput = {
    where: EventTypeScalarWhereInput
    data: XOR<EventTypeUpdateManyMutationInput, EventTypeUncheckedUpdateManyWithoutEventTypeInput>
  }

  export type AvailabilityUpsertWithWhereUniqueWithoutScheduleInput = {
    where: AvailabilityWhereUniqueInput
    update: XOR<AvailabilityUpdateWithoutScheduleInput, AvailabilityUncheckedUpdateWithoutScheduleInput>
    create: XOR<AvailabilityCreateWithoutScheduleInput, AvailabilityUncheckedCreateWithoutScheduleInput>
  }

  export type AvailabilityUpdateWithWhereUniqueWithoutScheduleInput = {
    where: AvailabilityWhereUniqueInput
    data: XOR<AvailabilityUpdateWithoutScheduleInput, AvailabilityUncheckedUpdateWithoutScheduleInput>
  }

  export type AvailabilityUpdateManyWithWhereWithoutScheduleInput = {
    where: AvailabilityScalarWhereInput
    data: XOR<AvailabilityUpdateManyMutationInput, AvailabilityUncheckedUpdateManyWithoutAvailabilityInput>
  }

  export type UserCreateWithoutAvailabilityInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutAvailabilityInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutAvailabilityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
  }

  export type EventTypeCreateWithoutAvailabilityInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutAvailabilityInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutAvailabilityInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutAvailabilityInput, EventTypeUncheckedCreateWithoutAvailabilityInput>
  }

  export type ScheduleCreateWithoutAvailabilityInput = {
    user: UserCreateNestedOneWithoutSchedulesInput
    eventType?: EventTypeCreateNestedManyWithoutScheduleInput
    name: string
    timeZone?: string | null
  }

  export type ScheduleUncheckedCreateWithoutAvailabilityInput = {
    id?: number
    userId: number
    eventType?: EventTypeUncheckedCreateNestedManyWithoutScheduleInput
    name: string
    timeZone?: string | null
  }

  export type ScheduleCreateOrConnectWithoutAvailabilityInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutAvailabilityInput, ScheduleUncheckedCreateWithoutAvailabilityInput>
  }

  export type UserUpsertWithoutAvailabilityInput = {
    update: XOR<UserUpdateWithoutAvailabilityInput, UserUncheckedUpdateWithoutAvailabilityInput>
    create: XOR<UserCreateWithoutAvailabilityInput, UserUncheckedCreateWithoutAvailabilityInput>
  }

  export type UserUpdateWithoutAvailabilityInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutAvailabilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeUpsertWithoutAvailabilityInput = {
    update: XOR<EventTypeUpdateWithoutAvailabilityInput, EventTypeUncheckedUpdateWithoutAvailabilityInput>
    create: XOR<EventTypeCreateWithoutAvailabilityInput, EventTypeUncheckedCreateWithoutAvailabilityInput>
  }

  export type EventTypeUpdateWithoutAvailabilityInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutAvailabilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type ScheduleUpsertWithoutAvailabilityInput = {
    update: XOR<ScheduleUpdateWithoutAvailabilityInput, ScheduleUncheckedUpdateWithoutAvailabilityInput>
    create: XOR<ScheduleCreateWithoutAvailabilityInput, ScheduleUncheckedCreateWithoutAvailabilityInput>
  }

  export type ScheduleUpdateWithoutAvailabilityInput = {
    user?: UserUpdateOneRequiredWithoutSchedulesInput
    eventType?: EventTypeUpdateManyWithoutScheduleInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleUncheckedUpdateWithoutAvailabilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    eventType?: EventTypeUncheckedUpdateManyWithoutScheduleInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutSelectedCalendarsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutSelectedCalendarsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutSelectedCalendarsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSelectedCalendarsInput, UserUncheckedCreateWithoutSelectedCalendarsInput>
  }

  export type UserUpsertWithoutSelectedCalendarsInput = {
    update: XOR<UserUpdateWithoutSelectedCalendarsInput, UserUncheckedUpdateWithoutSelectedCalendarsInput>
    create: XOR<UserCreateWithoutSelectedCalendarsInput, UserUncheckedCreateWithoutSelectedCalendarsInput>
  }

  export type UserUpdateWithoutSelectedCalendarsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutSelectedCalendarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeCreateWithoutCustomInputsInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutCustomInputsInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutCustomInputsInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutCustomInputsInput, EventTypeUncheckedCreateWithoutCustomInputsInput>
  }

  export type EventTypeUpsertWithoutCustomInputsInput = {
    update: XOR<EventTypeUpdateWithoutCustomInputsInput, EventTypeUncheckedUpdateWithoutCustomInputsInput>
    create: XOR<EventTypeCreateWithoutCustomInputsInput, EventTypeUncheckedCreateWithoutCustomInputsInput>
  }

  export type EventTypeUpdateWithoutCustomInputsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutCustomInputsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type BookingCreateWithoutPaymentInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutPaymentInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutPaymentInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutPaymentInput, BookingUncheckedCreateWithoutPaymentInput>
  }

  export type BookingUpsertWithoutPaymentInput = {
    update: XOR<BookingUpdateWithoutPaymentInput, BookingUncheckedUpdateWithoutPaymentInput>
    create: XOR<BookingCreateWithoutPaymentInput, BookingUncheckedCreateWithoutPaymentInput>
  }

  export type BookingUpdateWithoutPaymentInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type UserCreateWithoutWebhooksInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutWebhooksInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutWebhooksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWebhooksInput, UserUncheckedCreateWithoutWebhooksInput>
  }

  export type EventTypeCreateWithoutWebhooksInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutWebhooksInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutWebhooksInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutWebhooksInput, EventTypeUncheckedCreateWithoutWebhooksInput>
  }

  export type AppCreateWithoutWebhookInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialCreateNestedManyWithoutAppInput
    ApiKey?: ApiKeyCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutWebhookInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialUncheckedCreateNestedManyWithoutAppInput
    ApiKey?: ApiKeyUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutWebhookInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutWebhookInput, AppUncheckedCreateWithoutWebhookInput>
  }

  export type UserUpsertWithoutWebhooksInput = {
    update: XOR<UserUpdateWithoutWebhooksInput, UserUncheckedUpdateWithoutWebhooksInput>
    create: XOR<UserCreateWithoutWebhooksInput, UserUncheckedCreateWithoutWebhooksInput>
  }

  export type UserUpdateWithoutWebhooksInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutWebhooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeUpsertWithoutWebhooksInput = {
    update: XOR<EventTypeUpdateWithoutWebhooksInput, EventTypeUncheckedUpdateWithoutWebhooksInput>
    create: XOR<EventTypeCreateWithoutWebhooksInput, EventTypeUncheckedCreateWithoutWebhooksInput>
  }

  export type EventTypeUpdateWithoutWebhooksInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutWebhooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type AppUpsertWithoutWebhookInput = {
    update: XOR<AppUpdateWithoutWebhookInput, AppUncheckedUpdateWithoutWebhookInput>
    create: XOR<AppCreateWithoutWebhookInput, AppUncheckedCreateWithoutWebhookInput>
  }

  export type AppUpdateWithoutWebhookInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUpdateManyWithoutAppInput
    ApiKey?: ApiKeyUpdateManyWithoutAppInput
  }

  export type AppUncheckedUpdateWithoutWebhookInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUncheckedUpdateManyWithoutAppInput
    ApiKey?: ApiKeyUncheckedUpdateManyWithoutAppInput
  }

  export type UserCreateWithoutImpersonatedUsersInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutImpersonatedUsersInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutImpersonatedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImpersonatedUsersInput, UserUncheckedCreateWithoutImpersonatedUsersInput>
  }

  export type UserCreateWithoutImpersonatedByInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutImpersonatedByInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutImpersonatedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImpersonatedByInput, UserUncheckedCreateWithoutImpersonatedByInput>
  }

  export type UserUpsertWithoutImpersonatedUsersInput = {
    update: XOR<UserUpdateWithoutImpersonatedUsersInput, UserUncheckedUpdateWithoutImpersonatedUsersInput>
    create: XOR<UserCreateWithoutImpersonatedUsersInput, UserUncheckedCreateWithoutImpersonatedUsersInput>
  }

  export type UserUpdateWithoutImpersonatedUsersInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutImpersonatedUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutImpersonatedByInput = {
    update: XOR<UserUpdateWithoutImpersonatedByInput, UserUncheckedUpdateWithoutImpersonatedByInput>
    create: XOR<UserCreateWithoutImpersonatedByInput, UserUncheckedCreateWithoutImpersonatedByInput>
  }

  export type UserUpdateWithoutImpersonatedByInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutImpersonatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutApiKeysInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutApiKeysInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutApiKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
  }

  export type AppCreateWithoutApiKeyInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialCreateNestedManyWithoutAppInput
    Webhook?: WebhookCreateNestedManyWithoutAppInput
  }

  export type AppUncheckedCreateWithoutApiKeyInput = {
    slug: string
    dirName: string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppCreatecategoriesInput | Enumerable<AppCategories>
    createdAt?: Date | string
    updatedAt?: Date | string
    credentials?: CredentialUncheckedCreateNestedManyWithoutAppInput
    Webhook?: WebhookUncheckedCreateNestedManyWithoutAppInput
  }

  export type AppCreateOrConnectWithoutApiKeyInput = {
    where: AppWhereUniqueInput
    create: XOR<AppCreateWithoutApiKeyInput, AppUncheckedCreateWithoutApiKeyInput>
  }

  export type UserUpsertWithoutApiKeysInput = {
    update: XOR<UserUpdateWithoutApiKeysInput, UserUncheckedUpdateWithoutApiKeysInput>
    create: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
  }

  export type UserUpdateWithoutApiKeysInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutApiKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppUpsertWithoutApiKeyInput = {
    update: XOR<AppUpdateWithoutApiKeyInput, AppUncheckedUpdateWithoutApiKeyInput>
    create: XOR<AppCreateWithoutApiKeyInput, AppUncheckedCreateWithoutApiKeyInput>
  }

  export type AppUpdateWithoutApiKeyInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUpdateManyWithoutAppInput
    Webhook?: WebhookUpdateManyWithoutAppInput
  }

  export type AppUncheckedUpdateWithoutApiKeyInput = {
    slug?: StringFieldUpdateOperationsInput | string
    dirName?: StringFieldUpdateOperationsInput | string
    keys?: NullableJsonNullValueInput | InputJsonValue
    categories?: AppUpdatecategoriesInput | Enumerable<AppCategories>
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    credentials?: CredentialUncheckedUpdateManyWithoutAppInput
    Webhook?: WebhookUncheckedUpdateManyWithoutAppInput
  }

  export type EventTypeCreateWithoutHashedLinkInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedCreateWithoutHashedLinkInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
    workflows?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutEventTypeInput
  }

  export type EventTypeCreateOrConnectWithoutHashedLinkInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutHashedLinkInput, EventTypeUncheckedCreateWithoutHashedLinkInput>
  }

  export type EventTypeUpsertWithoutHashedLinkInput = {
    update: XOR<EventTypeUpdateWithoutHashedLinkInput, EventTypeUncheckedUpdateWithoutHashedLinkInput>
    create: XOR<EventTypeCreateWithoutHashedLinkInput, EventTypeUncheckedCreateWithoutHashedLinkInput>
  }

  export type EventTypeUpdateWithoutHashedLinkInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutHashedLinkInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type UserCreateWithoutAccountsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutSessionsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CredentialCreateWithoutAppInput = {
    type: string
    key: JsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutCredentialsInput
    destinationCalendars?: DestinationCalendarCreateNestedManyWithoutCredentialInput
  }

  export type CredentialUncheckedCreateWithoutAppInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    userId?: number | null
    destinationCalendars?: DestinationCalendarUncheckedCreateNestedManyWithoutCredentialInput
  }

  export type CredentialCreateOrConnectWithoutAppInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutAppInput, CredentialUncheckedCreateWithoutAppInput>
  }

  export type CredentialCreateManyAppInputEnvelope = {
    data: Enumerable<CredentialCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type WebhookCreateWithoutAppInput = {
    id: string
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    user?: UserCreateNestedOneWithoutWebhooksInput
    eventType?: EventTypeCreateNestedOneWithoutWebhooksInput
    secret?: string | null
  }

  export type WebhookUncheckedCreateWithoutAppInput = {
    id: string
    userId?: number | null
    eventTypeId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    secret?: string | null
  }

  export type WebhookCreateOrConnectWithoutAppInput = {
    where: WebhookWhereUniqueInput
    create: XOR<WebhookCreateWithoutAppInput, WebhookUncheckedCreateWithoutAppInput>
  }

  export type WebhookCreateManyAppInputEnvelope = {
    data: Enumerable<WebhookCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type ApiKeyCreateWithoutAppInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    user?: UserCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateWithoutAppInput = {
    id?: string
    userId: number
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
  }

  export type ApiKeyCreateOrConnectWithoutAppInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutAppInput, ApiKeyUncheckedCreateWithoutAppInput>
  }

  export type ApiKeyCreateManyAppInputEnvelope = {
    data: Enumerable<ApiKeyCreateManyAppInput>
    skipDuplicates?: boolean
  }

  export type CredentialUpsertWithWhereUniqueWithoutAppInput = {
    where: CredentialWhereUniqueInput
    update: XOR<CredentialUpdateWithoutAppInput, CredentialUncheckedUpdateWithoutAppInput>
    create: XOR<CredentialCreateWithoutAppInput, CredentialUncheckedCreateWithoutAppInput>
  }

  export type CredentialUpdateWithWhereUniqueWithoutAppInput = {
    where: CredentialWhereUniqueInput
    data: XOR<CredentialUpdateWithoutAppInput, CredentialUncheckedUpdateWithoutAppInput>
  }

  export type CredentialUpdateManyWithWhereWithoutAppInput = {
    where: CredentialScalarWhereInput
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyWithoutCredentialsInput>
  }

  export type WebhookUpsertWithWhereUniqueWithoutAppInput = {
    where: WebhookWhereUniqueInput
    update: XOR<WebhookUpdateWithoutAppInput, WebhookUncheckedUpdateWithoutAppInput>
    create: XOR<WebhookCreateWithoutAppInput, WebhookUncheckedCreateWithoutAppInput>
  }

  export type WebhookUpdateWithWhereUniqueWithoutAppInput = {
    where: WebhookWhereUniqueInput
    data: XOR<WebhookUpdateWithoutAppInput, WebhookUncheckedUpdateWithoutAppInput>
  }

  export type WebhookUpdateManyWithWhereWithoutAppInput = {
    where: WebhookScalarWhereInput
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyWithoutWebhookInput>
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutAppInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutAppInput, ApiKeyUncheckedUpdateWithoutAppInput>
    create: XOR<ApiKeyCreateWithoutAppInput, ApiKeyUncheckedCreateWithoutAppInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutAppInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutAppInput, ApiKeyUncheckedUpdateWithoutAppInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutAppInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutApiKeyInput>
  }

  export type UserCreateWithoutRoutingFormsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutRoutingFormsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutRoutingFormsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoutingFormsInput, UserUncheckedCreateWithoutRoutingFormsInput>
  }

  export type App_RoutingForms_FormResponseCreateWithoutFormInput = {
    formFillerId?: string
    response: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput = {
    id?: number
    formFillerId?: string
    response: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseCreateOrConnectWithoutFormInput = {
    where: App_RoutingForms_FormResponseWhereUniqueInput
    create: XOR<App_RoutingForms_FormResponseCreateWithoutFormInput, App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput>
  }

  export type App_RoutingForms_FormResponseCreateManyFormInputEnvelope = {
    data: Enumerable<App_RoutingForms_FormResponseCreateManyFormInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRoutingFormsInput = {
    update: XOR<UserUpdateWithoutRoutingFormsInput, UserUncheckedUpdateWithoutRoutingFormsInput>
    create: XOR<UserCreateWithoutRoutingFormsInput, UserUncheckedCreateWithoutRoutingFormsInput>
  }

  export type UserUpdateWithoutRoutingFormsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutRoutingFormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type App_RoutingForms_FormResponseUpsertWithWhereUniqueWithoutFormInput = {
    where: App_RoutingForms_FormResponseWhereUniqueInput
    update: XOR<App_RoutingForms_FormResponseUpdateWithoutFormInput, App_RoutingForms_FormResponseUncheckedUpdateWithoutFormInput>
    create: XOR<App_RoutingForms_FormResponseCreateWithoutFormInput, App_RoutingForms_FormResponseUncheckedCreateWithoutFormInput>
  }

  export type App_RoutingForms_FormResponseUpdateWithWhereUniqueWithoutFormInput = {
    where: App_RoutingForms_FormResponseWhereUniqueInput
    data: XOR<App_RoutingForms_FormResponseUpdateWithoutFormInput, App_RoutingForms_FormResponseUncheckedUpdateWithoutFormInput>
  }

  export type App_RoutingForms_FormResponseUpdateManyWithWhereWithoutFormInput = {
    where: App_RoutingForms_FormResponseScalarWhereInput
    data: XOR<App_RoutingForms_FormResponseUpdateManyMutationInput, App_RoutingForms_FormResponseUncheckedUpdateManyWithoutResponsesInput>
  }

  export type App_RoutingForms_FormResponseScalarWhereInput = {
    AND?: Enumerable<App_RoutingForms_FormResponseScalarWhereInput>
    OR?: Enumerable<App_RoutingForms_FormResponseScalarWhereInput>
    NOT?: Enumerable<App_RoutingForms_FormResponseScalarWhereInput>
    id?: IntFilter | number
    formFillerId?: StringFilter | string
    formId?: StringFilter | string
    response?: JsonFilter
  }

  export type App_RoutingForms_FormCreateWithoutResponsesInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutRoutingFormsInput
    disabled?: boolean
  }

  export type App_RoutingForms_FormUncheckedCreateWithoutResponsesInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    userId: number
    disabled?: boolean
  }

  export type App_RoutingForms_FormCreateOrConnectWithoutResponsesInput = {
    where: App_RoutingForms_FormWhereUniqueInput
    create: XOR<App_RoutingForms_FormCreateWithoutResponsesInput, App_RoutingForms_FormUncheckedCreateWithoutResponsesInput>
  }

  export type App_RoutingForms_FormUpsertWithoutResponsesInput = {
    update: XOR<App_RoutingForms_FormUpdateWithoutResponsesInput, App_RoutingForms_FormUncheckedUpdateWithoutResponsesInput>
    create: XOR<App_RoutingForms_FormCreateWithoutResponsesInput, App_RoutingForms_FormUncheckedCreateWithoutResponsesInput>
  }

  export type App_RoutingForms_FormUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutRoutingFormsInput
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateWithoutFeedbackInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    workflows?: WorkflowCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutFeedbackInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    workflows?: WorkflowUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutFeedbackInput = {
    update: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpdateWithoutFeedbackInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowCreateWithoutStepsInput = {
    name: string
    user: UserCreateNestedOneWithoutWorkflowsInput
    activeOn?: WorkflowsOnEventTypesCreateNestedManyWithoutWorkflowInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
  }

  export type WorkflowUncheckedCreateWithoutStepsInput = {
    id?: number
    name: string
    userId: number
    activeOn?: WorkflowsOnEventTypesUncheckedCreateNestedManyWithoutWorkflowInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
  }

  export type WorkflowCreateOrConnectWithoutStepsInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutStepsInput, WorkflowUncheckedCreateWithoutStepsInput>
  }

  export type WorkflowReminderCreateWithoutWorkflowStepInput = {
    booking?: BookingCreateNestedOneWithoutWorkflowRemindersInput
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
  }

  export type WorkflowReminderUncheckedCreateWithoutWorkflowStepInput = {
    id?: number
    bookingUid: string
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
  }

  export type WorkflowReminderCreateOrConnectWithoutWorkflowStepInput = {
    where: WorkflowReminderWhereUniqueInput
    create: XOR<WorkflowReminderCreateWithoutWorkflowStepInput, WorkflowReminderUncheckedCreateWithoutWorkflowStepInput>
  }

  export type WorkflowReminderCreateManyWorkflowStepInputEnvelope = {
    data: Enumerable<WorkflowReminderCreateManyWorkflowStepInput>
    skipDuplicates?: boolean
  }

  export type WorkflowUpsertWithoutStepsInput = {
    update: XOR<WorkflowUpdateWithoutStepsInput, WorkflowUncheckedUpdateWithoutStepsInput>
    create: XOR<WorkflowCreateWithoutStepsInput, WorkflowUncheckedCreateWithoutStepsInput>
  }

  export type WorkflowUpdateWithoutStepsInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutWorkflowsInput
    activeOn?: WorkflowsOnEventTypesUpdateManyWithoutWorkflowInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
  }

  export type WorkflowUncheckedUpdateWithoutStepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    activeOn?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
  }

  export type WorkflowReminderUpsertWithWhereUniqueWithoutWorkflowStepInput = {
    where: WorkflowReminderWhereUniqueInput
    update: XOR<WorkflowReminderUpdateWithoutWorkflowStepInput, WorkflowReminderUncheckedUpdateWithoutWorkflowStepInput>
    create: XOR<WorkflowReminderCreateWithoutWorkflowStepInput, WorkflowReminderUncheckedCreateWithoutWorkflowStepInput>
  }

  export type WorkflowReminderUpdateWithWhereUniqueWithoutWorkflowStepInput = {
    where: WorkflowReminderWhereUniqueInput
    data: XOR<WorkflowReminderUpdateWithoutWorkflowStepInput, WorkflowReminderUncheckedUpdateWithoutWorkflowStepInput>
  }

  export type WorkflowReminderUpdateManyWithWhereWithoutWorkflowStepInput = {
    where: WorkflowReminderScalarWhereInput
    data: XOR<WorkflowReminderUpdateManyMutationInput, WorkflowReminderUncheckedUpdateManyWithoutWorkflowRemindersInput>
  }

  export type UserCreateWithoutWorkflowsInput = {
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeCreateNestedManyWithoutUsersInput
    credentials?: CredentialCreateNestedManyWithoutUserInput
    teams?: MembershipCreateNestedManyWithoutUserInput
    bookings?: BookingCreateNestedManyWithoutUserInput
    schedules?: ScheduleCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserUncheckedCreateWithoutWorkflowsInput = {
    id?: number
    username?: string | null
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    password?: string | null
    bio?: string | null
    avatar?: string | null
    timeZone?: string
    weekStart?: string
    startTime?: number
    endTime?: number
    bufferTime?: number
    hideBranding?: boolean
    theme?: string | null
    createdDate?: Date | string
    trialEndsAt?: Date | string | null
    eventTypes?: EventTypeUncheckedCreateNestedManyWithoutUsersInput
    credentials?: CredentialUncheckedCreateNestedManyWithoutUserInput
    teams?: MembershipUncheckedCreateNestedManyWithoutUserInput
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutUserInput
    defaultScheduleId?: number | null
    selectedCalendars?: SelectedCalendarUncheckedCreateNestedManyWithoutUserInput
    completedOnboarding?: boolean
    locale?: string | null
    timeFormat?: number | null
    twoFactorSecret?: string | null
    twoFactorEnabled?: boolean
    identityProvider?: IdentityProvider
    identityProviderId?: string | null
    availability?: AvailabilityUncheckedCreateNestedManyWithoutUserInput
    invitedTo?: number | null
    plan?: UserPlan
    webhooks?: WebhookUncheckedCreateNestedManyWithoutUserInput
    brandColor?: string
    darkBrandColor?: string
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutUserInput
    away?: boolean
    allowDynamicBooking?: boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: boolean | null
    role?: UserPermissionRole
    disableImpersonation?: boolean
    impersonatedUsers?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedCreateNestedManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    emailVerificationToken?: string | null
  }

  export type UserCreateOrConnectWithoutWorkflowsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
  }

  export type WorkflowsOnEventTypesCreateWithoutWorkflowInput = {
    eventType: EventTypeCreateNestedOneWithoutWorkflowsInput
  }

  export type WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput = {
    id?: number
    eventTypeId: number
  }

  export type WorkflowsOnEventTypesCreateOrConnectWithoutWorkflowInput = {
    where: WorkflowsOnEventTypesWhereUniqueInput
    create: XOR<WorkflowsOnEventTypesCreateWithoutWorkflowInput, WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowsOnEventTypesCreateManyWorkflowInputEnvelope = {
    data: Enumerable<WorkflowsOnEventTypesCreateManyWorkflowInput>
    skipDuplicates?: boolean
  }

  export type WorkflowStepCreateWithoutWorkflowInput = {
    stepNumber: number
    action: WorkflowActions
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
    workflowReminders?: WorkflowReminderCreateNestedManyWithoutWorkflowStepInput
  }

  export type WorkflowStepUncheckedCreateWithoutWorkflowInput = {
    id?: number
    stepNumber: number
    action: WorkflowActions
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
    workflowReminders?: WorkflowReminderUncheckedCreateNestedManyWithoutWorkflowStepInput
  }

  export type WorkflowStepCreateOrConnectWithoutWorkflowInput = {
    where: WorkflowStepWhereUniqueInput
    create: XOR<WorkflowStepCreateWithoutWorkflowInput, WorkflowStepUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowStepCreateManyWorkflowInputEnvelope = {
    data: Enumerable<WorkflowStepCreateManyWorkflowInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWorkflowsInput = {
    update: XOR<UserUpdateWithoutWorkflowsInput, UserUncheckedUpdateWithoutWorkflowsInput>
    create: XOR<UserCreateWithoutWorkflowsInput, UserUncheckedCreateWithoutWorkflowsInput>
  }

  export type UserUpdateWithoutWorkflowsInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUpdateManyWithoutUsersInput
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    eventTypes?: EventTypeUncheckedUpdateManyWithoutUsersInput
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowsOnEventTypesUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowsOnEventTypesWhereUniqueInput
    update: XOR<WorkflowsOnEventTypesUpdateWithoutWorkflowInput, WorkflowsOnEventTypesUncheckedUpdateWithoutWorkflowInput>
    create: XOR<WorkflowsOnEventTypesCreateWithoutWorkflowInput, WorkflowsOnEventTypesUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowsOnEventTypesUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowsOnEventTypesWhereUniqueInput
    data: XOR<WorkflowsOnEventTypesUpdateWithoutWorkflowInput, WorkflowsOnEventTypesUncheckedUpdateWithoutWorkflowInput>
  }

  export type WorkflowsOnEventTypesUpdateManyWithWhereWithoutWorkflowInput = {
    where: WorkflowsOnEventTypesScalarWhereInput
    data: XOR<WorkflowsOnEventTypesUpdateManyMutationInput, WorkflowsOnEventTypesUncheckedUpdateManyWithoutActiveOnInput>
  }

  export type WorkflowStepUpsertWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowStepWhereUniqueInput
    update: XOR<WorkflowStepUpdateWithoutWorkflowInput, WorkflowStepUncheckedUpdateWithoutWorkflowInput>
    create: XOR<WorkflowStepCreateWithoutWorkflowInput, WorkflowStepUncheckedCreateWithoutWorkflowInput>
  }

  export type WorkflowStepUpdateWithWhereUniqueWithoutWorkflowInput = {
    where: WorkflowStepWhereUniqueInput
    data: XOR<WorkflowStepUpdateWithoutWorkflowInput, WorkflowStepUncheckedUpdateWithoutWorkflowInput>
  }

  export type WorkflowStepUpdateManyWithWhereWithoutWorkflowInput = {
    where: WorkflowStepScalarWhereInput
    data: XOR<WorkflowStepUpdateManyMutationInput, WorkflowStepUncheckedUpdateManyWithoutStepsInput>
  }

  export type WorkflowStepScalarWhereInput = {
    AND?: Enumerable<WorkflowStepScalarWhereInput>
    OR?: Enumerable<WorkflowStepScalarWhereInput>
    NOT?: Enumerable<WorkflowStepScalarWhereInput>
    id?: IntFilter | number
    stepNumber?: IntFilter | number
    action?: EnumWorkflowActionsFilter | WorkflowActions
    workflowId?: IntFilter | number
    sendTo?: StringNullableFilter | string | null
    reminderBody?: StringNullableFilter | string | null
    emailSubject?: StringNullableFilter | string | null
    template?: EnumWorkflowTemplatesFilter | WorkflowTemplates
  }

  export type WorkflowCreateWithoutActiveOnInput = {
    name: string
    user: UserCreateNestedOneWithoutWorkflowsInput
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
    steps?: WorkflowStepCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedCreateWithoutActiveOnInput = {
    id?: number
    name: string
    userId: number
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
    steps?: WorkflowStepUncheckedCreateNestedManyWithoutWorkflowInput
  }

  export type WorkflowCreateOrConnectWithoutActiveOnInput = {
    where: WorkflowWhereUniqueInput
    create: XOR<WorkflowCreateWithoutActiveOnInput, WorkflowUncheckedCreateWithoutActiveOnInput>
  }

  export type EventTypeCreateWithoutWorkflowsInput = {
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    team?: TeamCreateNestedOneWithoutEventTypesInput
    hashedLink?: HashedLinkCreateNestedOneWithoutEventTypeInput
    bookings?: BookingCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    schedule?: ScheduleCreateNestedOneWithoutEventTypeInput
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
  }

  export type EventTypeUncheckedCreateWithoutWorkflowsInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    users?: UserUncheckedCreateNestedManyWithoutEventTypesInput
    userId?: number | null
    teamId?: number | null
    hashedLink?: HashedLinkUncheckedCreateNestedOneWithoutEventTypeInput
    bookings?: BookingUncheckedCreateNestedManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedCreateNestedManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedCreateNestedOneWithoutEventTypeInput
    eventName?: string | null
    customInputs?: EventTypeCustomInputUncheckedCreateNestedManyWithoutEventTypeInput
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
  }

  export type EventTypeCreateOrConnectWithoutWorkflowsInput = {
    where: EventTypeWhereUniqueInput
    create: XOR<EventTypeCreateWithoutWorkflowsInput, EventTypeUncheckedCreateWithoutWorkflowsInput>
  }

  export type WorkflowUpsertWithoutActiveOnInput = {
    update: XOR<WorkflowUpdateWithoutActiveOnInput, WorkflowUncheckedUpdateWithoutActiveOnInput>
    create: XOR<WorkflowCreateWithoutActiveOnInput, WorkflowUncheckedCreateWithoutActiveOnInput>
  }

  export type WorkflowUpdateWithoutActiveOnInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutWorkflowsInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
    steps?: WorkflowStepUpdateManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedUpdateWithoutActiveOnInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
    steps?: WorkflowStepUncheckedUpdateManyWithoutWorkflowInput
  }

  export type EventTypeUpsertWithoutWorkflowsInput = {
    update: XOR<EventTypeUpdateWithoutWorkflowsInput, EventTypeUncheckedUpdateWithoutWorkflowsInput>
    create: XOR<EventTypeCreateWithoutWorkflowsInput, EventTypeUncheckedCreateWithoutWorkflowsInput>
  }

  export type EventTypeUpdateWithoutWorkflowsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeUncheckedUpdateWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingCreateWithoutWorkflowRemindersInput = {
    uid: string
    user?: UserCreateNestedOneWithoutBookingsInput
    references?: BookingReferenceCreateNestedManyWithoutBookingInput
    eventType?: EventTypeCreateNestedOneWithoutBookingsInput
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentCreateNestedManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarCreateNestedOneWithoutBookingInput
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
  }

  export type BookingUncheckedCreateWithoutWorkflowRemindersInput = {
    id?: number
    uid: string
    userId?: number | null
    references?: BookingReferenceUncheckedCreateNestedManyWithoutBookingInput
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    attendees?: AttendeeUncheckedCreateNestedManyWithoutBookingInput
    location?: string | null
    dailyRef?: DailyEventReferenceUncheckedCreateNestedOneWithoutBookingInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    payment?: PaymentUncheckedCreateNestedManyWithoutBookingInput
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
  }

  export type BookingCreateOrConnectWithoutWorkflowRemindersInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutWorkflowRemindersInput, BookingUncheckedCreateWithoutWorkflowRemindersInput>
  }

  export type WorkflowStepCreateWithoutWorkflowRemindersInput = {
    stepNumber: number
    action: WorkflowActions
    workflow: WorkflowCreateNestedOneWithoutStepsInput
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
  }

  export type WorkflowStepUncheckedCreateWithoutWorkflowRemindersInput = {
    id?: number
    stepNumber: number
    action: WorkflowActions
    workflowId: number
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
  }

  export type WorkflowStepCreateOrConnectWithoutWorkflowRemindersInput = {
    where: WorkflowStepWhereUniqueInput
    create: XOR<WorkflowStepCreateWithoutWorkflowRemindersInput, WorkflowStepUncheckedCreateWithoutWorkflowRemindersInput>
  }

  export type BookingUpsertWithoutWorkflowRemindersInput = {
    update: XOR<BookingUpdateWithoutWorkflowRemindersInput, BookingUncheckedUpdateWithoutWorkflowRemindersInput>
    create: XOR<BookingCreateWithoutWorkflowRemindersInput, BookingUncheckedCreateWithoutWorkflowRemindersInput>
  }

  export type BookingUpdateWithoutWorkflowRemindersInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingUncheckedUpdateWithoutWorkflowRemindersInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowStepUpsertWithoutWorkflowRemindersInput = {
    update: XOR<WorkflowStepUpdateWithoutWorkflowRemindersInput, WorkflowStepUncheckedUpdateWithoutWorkflowRemindersInput>
    create: XOR<WorkflowStepCreateWithoutWorkflowRemindersInput, WorkflowStepUncheckedCreateWithoutWorkflowRemindersInput>
  }

  export type WorkflowStepUpdateWithoutWorkflowRemindersInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    workflow?: WorkflowUpdateOneRequiredWithoutStepsInput
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
  }

  export type WorkflowStepUncheckedUpdateWithoutWorkflowRemindersInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    workflowId?: IntFieldUpdateOperationsInput | number
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
  }

  export type BookingCreateManyEventTypeInput = {
    id?: number
    uid: string
    userId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
  }

  export type AvailabilityCreateManyEventTypeInput = {
    id?: number
    userId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    scheduleId?: number | null
  }

  export type WebhookCreateManyEventTypeInput = {
    id: string
    userId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: string | null
    secret?: string | null
  }

  export type EventTypeCustomInputCreateManyEventTypeInput = {
    id?: number
    label: string
    type: EventTypeCustomInputType
    required: boolean
    placeholder?: string
  }

  export type WorkflowsOnEventTypesCreateManyEventTypeInput = {
    id?: number
    workflowId: number
  }

  export type UserUpdateWithoutEventTypesInput = {
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credentials?: CredentialUpdateManyWithoutUserInput
    teams?: MembershipUpdateManyWithoutUserInput
    bookings?: BookingUpdateManyWithoutUserInput
    schedules?: ScheduleUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUpdateManyWithoutUserInput
    accounts?: AccountUpdateManyWithoutUserInput
    sessions?: SessionUpdateManyWithoutUserInput
    workflows?: WorkflowUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutEventTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    credentials?: CredentialUncheckedUpdateManyWithoutUserInput
    teams?: MembershipUncheckedUpdateManyWithoutUserInput
    bookings?: BookingUncheckedUpdateManyWithoutUserInput
    schedules?: ScheduleUncheckedUpdateManyWithoutUserInput
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    selectedCalendars?: SelectedCalendarUncheckedUpdateManyWithoutUserInput
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutUserInput
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    webhooks?: WebhookUncheckedUpdateManyWithoutUserInput
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutUserInput
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    impersonatedUsers?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedUserInput
    impersonatedBy?: ImpersonationsUncheckedUpdateManyWithoutImpersonatedByInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserInput
    accounts?: AccountUncheckedUpdateManyWithoutUserInput
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    workflows?: WorkflowUncheckedUpdateManyWithoutUserInput
    routingForms?: App_RoutingForms_FormUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: StringFieldUpdateOperationsInput | string
    weekStart?: StringFieldUpdateOperationsInput | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    bufferTime?: IntFieldUpdateOperationsInput | number
    hideBranding?: BoolFieldUpdateOperationsInput | boolean
    theme?: NullableStringFieldUpdateOperationsInput | string | null
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    trialEndsAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    defaultScheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    completedOnboarding?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    timeFormat?: NullableIntFieldUpdateOperationsInput | number | null
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    identityProvider?: EnumIdentityProviderFieldUpdateOperationsInput | IdentityProvider
    identityProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    invitedTo?: NullableIntFieldUpdateOperationsInput | number | null
    plan?: EnumUserPlanFieldUpdateOperationsInput | UserPlan
    brandColor?: StringFieldUpdateOperationsInput | string
    darkBrandColor?: StringFieldUpdateOperationsInput | string
    away?: BoolFieldUpdateOperationsInput | boolean
    allowDynamicBooking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    verified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    role?: EnumUserPermissionRoleFieldUpdateOperationsInput | UserPermissionRole
    disableImpersonation?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BookingUpdateWithoutEventTypeInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateManyWithoutBookingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvailabilityUpdateWithoutEventTypeInput = {
    user?: UserUpdateOneWithoutAvailabilityInput
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Schedule?: ScheduleUpdateOneWithoutAvailabilityInput
  }

  export type AvailabilityUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvailabilityUncheckedUpdateManyWithoutAvailabilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WebhookUpdateWithoutEventTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    user?: UserUpdateOneWithoutWebhooksInput
    app?: AppUpdateOneWithoutWebhookInput
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateWithoutEventTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateManyWithoutWebhooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventTypeCustomInputUpdateWithoutEventTypeInput = {
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type EventTypeCustomInputUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type EventTypeCustomInputUncheckedUpdateManyWithoutCustomInputsInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumEventTypeCustomInputTypeFieldUpdateOperationsInput | EventTypeCustomInputType
    required?: BoolFieldUpdateOperationsInput | boolean
    placeholder?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowsOnEventTypesUpdateWithoutEventTypeInput = {
    workflow?: WorkflowUpdateOneRequiredWithoutActiveOnInput
  }

  export type WorkflowsOnEventTypesUncheckedUpdateWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflowId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    workflowId?: IntFieldUpdateOperationsInput | number
  }

  export type DestinationCalendarCreateManyCredentialInput = {
    id?: number
    integration: string
    externalId: string
    userId?: number | null
    eventTypeId?: number | null
  }

  export type DestinationCalendarUpdateWithoutCredentialInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutDestinationCalendarInput
    booking?: BookingUpdateManyWithoutDestinationCalendarInput
    eventType?: EventTypeUpdateOneWithoutDestinationCalendarInput
  }

  export type DestinationCalendarUncheckedUpdateWithoutCredentialInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    booking?: BookingUncheckedUpdateManyWithoutDestinationCalendarInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DestinationCalendarUncheckedUpdateManyWithoutDestinationCalendarsInput = {
    id?: IntFieldUpdateOperationsInput | number
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingCreateManyDestinationCalendarInput = {
    id?: number
    uid: string
    userId?: number | null
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
  }

  export type BookingUpdateWithoutDestinationCalendarInput = {
    uid?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutBookingsInput
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutDestinationCalendarInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateManyWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CredentialCreateManyUserInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    appId?: string | null
  }

  export type MembershipCreateManyUserInput = {
    teamId: number
    accepted?: boolean
    role: MembershipRole
  }

  export type BookingCreateManyUserInput = {
    id?: number
    uid: string
    eventTypeId?: number | null
    title: string
    description?: string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime: Date | string
    endTime: Date | string
    location?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    status?: BookingStatus
    paid?: boolean
    destinationCalendarId?: number | null
    cancellationReason?: string | null
    rejectionReason?: string | null
    dynamicEventSlugRef?: string | null
    dynamicGroupSlugRef?: string | null
    rescheduled?: boolean | null
    fromReschedule?: string | null
    recurringEventId?: string | null
    smsReminderNumber?: string | null
  }

  export type ScheduleCreateManyUserInput = {
    id?: number
    name: string
    timeZone?: string | null
  }

  export type SelectedCalendarCreateManyUserInput = {
    integration: string
    externalId: string
  }

  export type AvailabilityCreateManyUserInput = {
    id?: number
    eventTypeId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
    scheduleId?: number | null
  }

  export type WebhookCreateManyUserInput = {
    id: string
    eventTypeId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: string | null
    secret?: string | null
  }

  export type ImpersonationsCreateManyImpersonatedUserInput = {
    id?: number
    createdAt?: Date | string
    impersonatedById: number
  }

  export type ImpersonationsCreateManyImpersonatedByInput = {
    id?: number
    createdAt?: Date | string
    impersonatedUserId: number
  }

  export type ApiKeyCreateManyUserInput = {
    id?: string
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
    appId?: string | null
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type WorkflowCreateManyUserInput = {
    id?: number
    name: string
    trigger: WorkflowTriggerEvents
    time?: number | null
    timeUnit?: TimeUnit | null
  }

  export type App_RoutingForms_FormCreateManyUserInput = {
    id?: string
    description?: string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    fields?: NullableJsonNullValueInput | InputJsonValue
    disabled?: boolean
  }

  export type FeedbackCreateManyUserInput = {
    id?: number
    date: Date | string
    rating: string
    comment?: string | null
  }

  export type EventTypeUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateManyWithoutEventTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CredentialUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    app?: AppUpdateOneWithoutCredentialsInput
    destinationCalendars?: DestinationCalendarUpdateManyWithoutCredentialInput
  }

  export type CredentialUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    destinationCalendars?: DestinationCalendarUncheckedUpdateManyWithoutCredentialInput
  }

  export type CredentialUncheckedUpdateManyWithoutCredentialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembershipUpdateWithoutUserInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
    team?: TeamUpdateOneRequiredWithoutMembersInput
  }

  export type MembershipUncheckedUpdateWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type MembershipUncheckedUpdateManyWithoutTeamsInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type BookingUpdateWithoutUserInput = {
    uid?: StringFieldUpdateOperationsInput | string
    references?: BookingReferenceUpdateManyWithoutBookingInput
    eventType?: EventTypeUpdateOneWithoutBookingsInput
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUpdateManyWithoutBookingInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutBookingInput
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUpdateManyWithoutBookingInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    references?: BookingReferenceUncheckedUpdateManyWithoutBookingInput
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: NullableJsonNullValueInput | InputJsonValue
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: AttendeeUncheckedUpdateManyWithoutBookingInput
    location?: NullableStringFieldUpdateOperationsInput | string | null
    dailyRef?: DailyEventReferenceUncheckedUpdateOneWithoutBookingInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | BookingStatus
    paid?: BoolFieldUpdateOperationsInput | boolean
    payment?: PaymentUncheckedUpdateManyWithoutBookingInput
    destinationCalendarId?: NullableIntFieldUpdateOperationsInput | number | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicEventSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    dynamicGroupSlugRef?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduled?: NullableBoolFieldUpdateOperationsInput | boolean | null
    fromReschedule?: NullableStringFieldUpdateOperationsInput | string | null
    recurringEventId?: NullableStringFieldUpdateOperationsInput | string | null
    smsReminderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutBookingInput
  }

  export type ScheduleUpdateWithoutUserInput = {
    eventType?: EventTypeUpdateManyWithoutScheduleInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUpdateManyWithoutScheduleInput
  }

  export type ScheduleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventType?: EventTypeUncheckedUpdateManyWithoutScheduleInput
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    availability?: AvailabilityUncheckedUpdateManyWithoutScheduleInput
  }

  export type ScheduleUncheckedUpdateManyWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SelectedCalendarUpdateWithoutUserInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedCalendarUncheckedUpdateWithoutUserInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type SelectedCalendarUncheckedUpdateManyWithoutSelectedCalendarsInput = {
    integration?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type AvailabilityUpdateWithoutUserInput = {
    eventType?: EventTypeUpdateOneWithoutAvailabilityInput
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Schedule?: ScheduleUpdateOneWithoutAvailabilityInput
  }

  export type AvailabilityUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WebhookUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    eventType?: EventTypeUpdateOneWithoutWebhooksInput
    app?: AppUpdateOneWithoutWebhookInput
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    appId?: NullableStringFieldUpdateOperationsInput | string | null
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImpersonationsUpdateWithoutImpersonatedUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedBy?: UserUpdateOneRequiredWithoutImpersonatedByInput
  }

  export type ImpersonationsUncheckedUpdateWithoutImpersonatedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ImpersonationsUncheckedUpdateManyWithoutImpersonatedUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ImpersonationsUpdateWithoutImpersonatedByInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedUser?: UserUpdateOneRequiredWithoutImpersonatedUsersInput
  }

  export type ImpersonationsUncheckedUpdateWithoutImpersonatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    impersonatedUserId?: IntFieldUpdateOperationsInput | number
  }

  export type ApiKeyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    app?: AppUpdateOneWithoutApiKeyInput
  }

  export type ApiKeyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyUncheckedUpdateManyWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    appId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    activeOn?: WorkflowsOnEventTypesUpdateManyWithoutWorkflowInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
    steps?: WorkflowStepUpdateManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activeOn?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutWorkflowInput
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
    steps?: WorkflowStepUncheckedUpdateManyWithoutWorkflowInput
  }

  export type WorkflowUncheckedUpdateManyWithoutWorkflowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    trigger?: EnumWorkflowTriggerEventsFieldUpdateOperationsInput | WorkflowTriggerEvents
    time?: NullableIntFieldUpdateOperationsInput | number | null
    timeUnit?: NullableEnumTimeUnitFieldUpdateOperationsInput | TimeUnit | null
  }

  export type App_RoutingForms_FormUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    responses?: App_RoutingForms_FormResponseUpdateManyWithoutFormInput
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    responses?: App_RoutingForms_FormResponseUncheckedUpdateManyWithoutFormInput
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type App_RoutingForms_FormUncheckedUpdateManyWithoutRoutingFormsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    routes?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    fields?: NullableJsonNullValueInput | InputJsonValue
    disabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeedbackUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    rating?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MembershipCreateManyTeamInput = {
    userId: number
    accepted?: boolean
    role: MembershipRole
  }

  export type EventTypeCreateManyTeamInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    userId?: number | null
    eventName?: string | null
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    scheduleId?: number | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
  }

  export type MembershipUpdateWithoutTeamInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
    user?: UserUpdateOneRequiredWithoutTeamsInput
  }

  export type MembershipUncheckedUpdateWithoutTeamInput = {
    userId?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type MembershipUncheckedUpdateManyWithoutMembersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    accepted?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumMembershipRoleFieldUpdateOperationsInput | MembershipRole
  }

  export type EventTypeUpdateWithoutTeamInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    schedule?: ScheduleUpdateOneWithoutEventTypeInput
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    scheduleId?: NullableIntFieldUpdateOperationsInput | number | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type BookingReferenceCreateManyBookingInput = {
    id?: number
    type: string
    uid: string
    meetingId?: string | null
    meetingPassword?: string | null
    meetingUrl?: string | null
    externalCalendarId?: string | null
    deleted?: boolean | null
    credentialId?: number | null
  }

  export type AttendeeCreateManyBookingInput = {
    id?: number
    email: string
    name: string
    timeZone: string
    locale?: string | null
  }

  export type PaymentCreateManyBookingInput = {
    id?: number
    uid: string
    type: PaymentType
    amount: number
    fee: number
    currency: string
    success: boolean
    refunded: boolean
    data: JsonNullValueInput | InputJsonValue
    externalId: string
  }

  export type WorkflowReminderCreateManyBookingInput = {
    id?: number
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
    workflowStepId: number
  }

  export type BookingReferenceUpdateWithoutBookingInput = {
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingReferenceUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingReferenceUncheckedUpdateManyWithoutReferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    meetingId?: NullableStringFieldUpdateOperationsInput | string | null
    meetingPassword?: NullableStringFieldUpdateOperationsInput | string | null
    meetingUrl?: NullableStringFieldUpdateOperationsInput | string | null
    externalCalendarId?: NullableStringFieldUpdateOperationsInput | string | null
    deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    credentialId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AttendeeUpdateWithoutBookingInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendeeUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AttendeeUncheckedUpdateManyWithoutAttendeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    timeZone?: StringFieldUpdateOperationsInput | string
    locale?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentUpdateWithoutBookingInput = {
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUncheckedUpdateManyWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    type?: EnumPaymentTypeFieldUpdateOperationsInput | PaymentType
    amount?: IntFieldUpdateOperationsInput | number
    fee?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    refunded?: BoolFieldUpdateOperationsInput | boolean
    data?: JsonNullValueInput | InputJsonValue
    externalId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowReminderUpdateWithoutBookingInput = {
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
    workflowStep?: WorkflowStepUpdateOneRequiredWithoutWorkflowRemindersInput
  }

  export type WorkflowReminderUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
    workflowStepId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowReminderUncheckedUpdateManyWithoutWorkflowRemindersInput = {
    id?: IntFieldUpdateOperationsInput | number
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
    workflowStepId?: IntFieldUpdateOperationsInput | number
  }

  export type EventTypeCreateManyScheduleInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    position?: number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length: number
    hidden?: boolean
    userId?: number | null
    teamId?: number | null
    eventName?: string | null
    timeZone?: string | null
    periodType?: PeriodType
    periodStartDate?: Date | string | null
    periodEndDate?: Date | string | null
    periodDays?: number | null
    periodCountCalendarDays?: boolean | null
    requiresConfirmation?: boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: boolean
    hideCalendarNotes?: boolean
    minimumBookingNotice?: number
    beforeEventBuffer?: number
    afterEventBuffer?: number
    seatsPerTimeSlot?: number | null
    schedulingType?: SchedulingType | null
    price?: number
    currency?: string
    slotInterval?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: string | null
  }

  export type AvailabilityCreateManyScheduleInput = {
    id?: number
    userId?: number | null
    eventTypeId?: number | null
    days?: AvailabilityCreatedaysInput | Enumerable<number>
    startTime: Date | string
    endTime: Date | string
    date?: Date | string | null
  }

  export type EventTypeUpdateWithoutScheduleInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    team?: TeamUpdateOneWithoutEventTypesInput
    hashedLink?: HashedLinkUpdateOneWithoutEventTypeInput
    bookings?: BookingUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    users?: UserUncheckedUpdateManyWithoutEventTypesInput
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    hashedLink?: HashedLinkUncheckedUpdateOneWithoutEventTypeInput
    bookings?: BookingUncheckedUpdateManyWithoutEventTypeInput
    availability?: AvailabilityUncheckedUpdateManyWithoutEventTypeInput
    webhooks?: WebhookUncheckedUpdateManyWithoutEventTypeInput
    destinationCalendar?: DestinationCalendarUncheckedUpdateOneWithoutEventTypeInput
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    customInputs?: EventTypeCustomInputUncheckedUpdateManyWithoutEventTypeInput
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
    workflows?: WorkflowsOnEventTypesUncheckedUpdateManyWithoutEventTypeInput
  }

  export type EventTypeUncheckedUpdateManyWithoutEventTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    position?: IntFieldUpdateOperationsInput | number
    locations?: NullableJsonNullValueInput | InputJsonValue
    length?: IntFieldUpdateOperationsInput | number
    hidden?: BoolFieldUpdateOperationsInput | boolean
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    teamId?: NullableIntFieldUpdateOperationsInput | number | null
    eventName?: NullableStringFieldUpdateOperationsInput | string | null
    timeZone?: NullableStringFieldUpdateOperationsInput | string | null
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | PeriodType
    periodStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodDays?: NullableIntFieldUpdateOperationsInput | number | null
    periodCountCalendarDays?: NullableBoolFieldUpdateOperationsInput | boolean | null
    requiresConfirmation?: BoolFieldUpdateOperationsInput | boolean
    recurringEvent?: NullableJsonNullValueInput | InputJsonValue
    disableGuests?: BoolFieldUpdateOperationsInput | boolean
    hideCalendarNotes?: BoolFieldUpdateOperationsInput | boolean
    minimumBookingNotice?: IntFieldUpdateOperationsInput | number
    beforeEventBuffer?: IntFieldUpdateOperationsInput | number
    afterEventBuffer?: IntFieldUpdateOperationsInput | number
    seatsPerTimeSlot?: NullableIntFieldUpdateOperationsInput | number | null
    schedulingType?: NullableEnumSchedulingTypeFieldUpdateOperationsInput | SchedulingType | null
    price?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    slotInterval?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    successRedirectUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvailabilityUpdateWithoutScheduleInput = {
    user?: UserUpdateOneWithoutAvailabilityInput
    eventType?: EventTypeUpdateOneWithoutAvailabilityInput
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AvailabilityUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: AvailabilityUpdatedaysInput | Enumerable<number>
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CredentialCreateManyAppInput = {
    id?: number
    type: string
    key: JsonNullValueInput | InputJsonValue
    userId?: number | null
  }

  export type WebhookCreateManyAppInput = {
    id: string
    userId?: number | null
    eventTypeId?: number | null
    subscriberUrl: string
    payloadTemplate?: string | null
    createdAt?: Date | string
    active?: boolean
    eventTriggers?: WebhookCreateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    secret?: string | null
  }

  export type ApiKeyCreateManyAppInput = {
    id?: string
    userId: number
    note?: string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
    lastUsedAt?: Date | string | null
    hashedKey: string
  }

  export type CredentialUpdateWithoutAppInput = {
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutCredentialsInput
    destinationCalendars?: DestinationCalendarUpdateManyWithoutCredentialInput
  }

  export type CredentialUncheckedUpdateWithoutAppInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    key?: JsonNullValueInput | InputJsonValue
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    destinationCalendars?: DestinationCalendarUncheckedUpdateManyWithoutCredentialInput
  }

  export type WebhookUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    user?: UserUpdateOneWithoutWebhooksInput
    eventType?: EventTypeUpdateOneWithoutWebhooksInput
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebhookUncheckedUpdateManyWithoutWebhookInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    eventTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    subscriberUrl?: StringFieldUpdateOperationsInput | string
    payloadTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    eventTriggers?: WebhookUpdateeventTriggersInput | Enumerable<WebhookTriggerEvents>
    secret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApiKeyUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedUpdateWithoutAppInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
  }

  export type ApiKeyUncheckedUpdateManyWithoutApiKeyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hashedKey?: StringFieldUpdateOperationsInput | string
  }

  export type App_RoutingForms_FormResponseCreateManyFormInput = {
    id?: number
    formFillerId?: string
    response: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUpdateWithoutFormInput = {
    formFillerId?: StringFieldUpdateOperationsInput | string
    response?: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUncheckedUpdateWithoutFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    formFillerId?: StringFieldUpdateOperationsInput | string
    response?: JsonNullValueInput | InputJsonValue
  }

  export type App_RoutingForms_FormResponseUncheckedUpdateManyWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    formFillerId?: StringFieldUpdateOperationsInput | string
    response?: JsonNullValueInput | InputJsonValue
  }

  export type WorkflowReminderCreateManyWorkflowStepInput = {
    id?: number
    bookingUid: string
    method: WorkflowMethods
    scheduledDate: Date | string
    referenceId?: string | null
    scheduled: boolean
  }

  export type WorkflowReminderUpdateWithoutWorkflowStepInput = {
    booking?: BookingUpdateOneWithoutWorkflowRemindersInput
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowReminderUncheckedUpdateWithoutWorkflowStepInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingUid?: StringFieldUpdateOperationsInput | string
    method?: EnumWorkflowMethodsFieldUpdateOperationsInput | WorkflowMethods
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    referenceId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowsOnEventTypesCreateManyWorkflowInput = {
    id?: number
    eventTypeId: number
  }

  export type WorkflowStepCreateManyWorkflowInput = {
    id?: number
    stepNumber: number
    action: WorkflowActions
    sendTo?: string | null
    reminderBody?: string | null
    emailSubject?: string | null
    template?: WorkflowTemplates
  }

  export type WorkflowsOnEventTypesUpdateWithoutWorkflowInput = {
    eventType?: EventTypeUpdateOneRequiredWithoutWorkflowsInput
  }

  export type WorkflowsOnEventTypesUncheckedUpdateWithoutWorkflowInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowsOnEventTypesUncheckedUpdateManyWithoutActiveOnInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventTypeId?: IntFieldUpdateOperationsInput | number
  }

  export type WorkflowStepUpdateWithoutWorkflowInput = {
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
    workflowReminders?: WorkflowReminderUpdateManyWithoutWorkflowStepInput
  }

  export type WorkflowStepUncheckedUpdateWithoutWorkflowInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
    workflowReminders?: WorkflowReminderUncheckedUpdateManyWithoutWorkflowStepInput
  }

  export type WorkflowStepUncheckedUpdateManyWithoutStepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    stepNumber?: IntFieldUpdateOperationsInput | number
    action?: EnumWorkflowActionsFieldUpdateOperationsInput | WorkflowActions
    sendTo?: NullableStringFieldUpdateOperationsInput | string | null
    reminderBody?: NullableStringFieldUpdateOperationsInput | string | null
    emailSubject?: NullableStringFieldUpdateOperationsInput | string | null
    template?: EnumWorkflowTemplatesFieldUpdateOperationsInput | WorkflowTemplates
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}