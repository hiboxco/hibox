"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jitsuDriver = void 0;
const tools_1 = require("../tools");
const index_1 = require("../index");
const version_1 = require("../version");
const remote_1 = require("../remote");
const jitsuDriver = opts => {
    return (event, ctx) => sinkServerEvent(event, ctx, opts);
};
exports.jitsuDriver = jitsuDriver;
async function sinkServerEvent(_event, { fetch }, opts) {
    const jitsuKey = opts.key || process.env.JITSU_KEY;
    if (!jitsuKey) {
        throw new Error(`Jitsu driver is mis-configured. Either opts.key option, or JITSU_KEY env car should be defined`);
    }
    const [event, extra] = (0, tools_1.splitObject)(_event, index_1.defaultPageEventProps);
    const jitsuUrl = `${(0, tools_1.removeSuffix)(opts?.server || process.env.JITSU_SERVER || "https://t.jitsu.com", "/")}/api/v1/s2s/event`;
    const jitsuRequest = {
        event_type: event.eventType,
        screen_resolution: event.screenResolution,
        user_agent: event.userAgent,
        referer: event.referrer,
        url: event.url,
        page_title: event.title,
        doc_path: event.path,
        doc_host: event.host,
        doc_search: event.queryString,
        vp_size: event.viewportSize,
        user_language: event.userLanguage,
        source_ip: event.ipAddress,
        user: (0, tools_1.renameProps)(event.user, { anonymousId: "anonymous_id" }),
        ids: {},
        local_tz_offset: event.localTimezoneOffset,
        utm: (0, tools_1.mapKeys)(event.utms, utm => (utm.indexOf("utm_") === 0 ? utm.substring("utm_".length) : utm)),
        click_id: event.clickIds,
        ...extra,
    };
    (0, remote_1.remoteCall)(jitsuUrl, {
        method: "POST",
        headers: {
            "X-Auth-Token": jitsuKey,
            "User-Agent": (0, version_1.getUserAgent)(),
        },
        payload: (0, tools_1.sanitizeObject)(jitsuRequest),
    })
        .then(response => {
        if ((0, index_1.isDebug)()) {
            console.log(`Successfully sent event to ${jitsuUrl}: ${JSON.stringify(jitsuRequest)}. Response: ${JSON.stringify(response)}`);
        }
    })
        .catch(e => {
        console.warn(`[WARN] failed to send data to ${jitsuUrl}`, e);
    });
}
