"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.segmentDriver = void 0;
const tools_1 = require("../tools");
const index_1 = require("../index");
const version_1 = require("../version");
const remote_1 = require("../remote");
const segmentDriver = opts => {
    return (event, ctx) => sinkServerEvent(event, ctx, opts);
};
exports.segmentDriver = segmentDriver;
function toSegmentCampaign(utms) {
    return (0, tools_1.mapKeys)(utms, utm => {
        const index = utm.indexOf("utm_");
        return index === 0 ? utm.substring("utm_".length) : utm;
    });
}
const segmentBatchEndpoint = "https://api.segment.io/v1/batch";
async function sinkServerEvent(_event, { fetch }, opts) {
    const segmentKey = opts.key || process.env.SEGMENT_KEY;
    if (!segmentKey) {
        throw new Error(`Segment driver is misconfigured. Either opts.key option, or SEGMENT_KEY env car should be present`);
    }
    const batch = [];
    const nowIso = new Date().toISOString();
    const context = {
        ip: _event.ipAddress,
        campaign: toSegmentCampaign(_event.utms || {}),
        locale: _event.userLanguage,
        page: {
            referrer: _event.referrer,
            search: _event.queryString,
            userAgent: _event.userAgent,
        },
        library: {
            name: "nextjs-collect",
        },
    };
    if (!opts?.disableIdentify && (_event.user?.id || _event.user?.anonymousId)) {
        batch.push({
            type: "identify",
            anonymousId: _event.user?.anonymousId,
            userId: _event.user?.id,
            traits: (0, tools_1.removeProps)(_event.user || {}, "anonymousId", "userId"),
            timestamp: nowIso,
        });
    }
    const [baseEvent, extra] = (0, tools_1.splitObject)(_event, index_1.defaultPageEventProps);
    if (baseEvent.eventType === "page_view") {
        batch.push({
            type: "page",
            anonymousId: _event.user?.anonymousId,
            userId: _event.user?.id,
            name: _event.title || _event.path,
            context,
            properties: extra,
        });
    }
    else {
        batch.push({
            type: "track",
            event: baseEvent.eventType,
            anonymousId: _event.user?.anonymousId,
            userId: _event.user?.id,
            context,
            properties: extra,
        });
    }
    const payload = { batch, context };
    (0, remote_1.remoteCall)(segmentBatchEndpoint, {
        method: "POST",
        headers: {
            Authorization: `Basic ${btoa(segmentKey)}`,
            "User-Agent": (0, version_1.getUserAgent)(),
        },
        payload,
    })
        .then(response => {
        if ((0, index_1.isDebug)()) {
            console.log(`Successfully sent event to ${segmentBatchEndpoint}: ${JSON.stringify(payload)}. Response: ${JSON.stringify(response)}`);
        }
    })
        .catch(e => {
        console.warn(`[WARN] failed to send data to https://api.segment.io/v1/batch`, e);
    });
}
