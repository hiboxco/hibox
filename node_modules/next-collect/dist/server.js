"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nextEventsCollectApi = exports.collectApiHandler = exports.collectEvents = exports.eventCollector = exports.parsePublicUrlNodeApi = void 0;
const server_1 = require("next/server");
const tools_1 = require("./tools");
const index_1 = require("./index");
const next_shim_1 = require("./next-shim");
function parsePublicUrlNodeApi(req) {
    throw new Error("Not implemeted");
}
exports.parsePublicUrlNodeApi = parsePublicUrlNodeApi;
function isSystemRequest(req) {
    return req.nextUrl.pathname.indexOf("/_next/") === 0;
}
function eventCollector(opts) {
    const eventTypeMaps = (0, index_1.parseEventTypesMap)(opts.eventTypes);
    return {
        async nextApiHandler(req, res, props) {
            const reqResShim = next_shim_1.nextApiShim;
            try {
                const clientSideProps = req.body;
                const clientSideEventProps = clientSideProps?.event || {};
                const extraProps = (0, index_1.safeCall)(() => getDynamicOption(props?.extend, {})(req, res, clientSideEventProps), ".props", {});
                const url = reqResShim.parsePublicUrl(req);
                const eventType = clientSideProps ? clientSideProps.event.eventType : eventTypeMaps(url.path);
                if (!eventType) {
                    return res;
                }
                const anonymousId = reqResShim.getAnonymousId(getDynamicOption(props?.cookieName, next_shim_1.defaultCookieName)(req, res, clientSideEventProps), getDynamicOption(props?.cookieDomain, undefined)(req, res, clientSideEventProps), req, res, url);
                const originalPageEvent = reqResShim.getPageEvent(eventType, url, anonymousId, req);
                const pageEvent = (0, tools_1.deepMerge)(originalPageEvent, clientSideEventProps, extraProps);
                const drivers = (0, index_1.parseDriverShortcut)(opts.drivers);
                if ((0, index_1.isDebug)()) {
                    console.log(`Sending page event to ${drivers.map(d => d.type)}`, pageEvent);
                }
                for (const driver of drivers) {
                    if ((0, index_1.isDebug)()) {
                        console.log(`Sending data to ${driver.type}(${driver.opts ? JSON.stringify(driver.opts) : ""})`);
                    }
                    (0, index_1.getEventHandler)(driver)(pageEvent, { fetch })
                        .catch(e => {
                        if (opts.errorHandler) {
                            opts.errorHandler(driver.type, e);
                        }
                        else {
                            console.warn(`[WARN] Can't send data to ${driver.type}`, e);
                        }
                    })
                        .then(() => {
                        if ((0, index_1.isDebug)()) {
                            console.info(`${driver.type}(${driver.opts ? JSON.stringify(driver.opts) : ""}) finished successfully`);
                        }
                    });
                }
                res.json({ ok: true });
            }
            catch (e) {
                res.json({ ok: false, error: `${e?.message || "Unknown error"}` });
                console.error();
            }
        },
        async nextJsPageMiddleware(req, res, props = undefined) {
            if (isSystemRequest(req)) {
                if ((0, index_1.isDebug)()) {
                    console.log(`[DEBUG] Skip system request ${req.nextUrl.pathname}`);
                }
                return res;
            }
            const reqResShim = next_shim_1.pageMiddlewareShim;
            try {
                const extraProps = (0, index_1.safeCall)(() => getDynamicOption(props?.extend, {})(req, res, {}), ".props", {});
                const url = next_shim_1.pageMiddlewareShim.parsePublicUrl(req);
                const eventType = eventTypeMaps(url.path);
                if (!eventType) {
                    return res;
                }
                const anonymousId = reqResShim.getAnonymousId(getDynamicOption(props?.cookieName, next_shim_1.defaultCookieName)(req, res, {}), getDynamicOption(props?.cookieDomain, undefined)(req, res, {}), req, res, url);
                const originalPageEvent = reqResShim.getPageEvent(eventType, url, anonymousId, req);
                const pageEvent = (0, tools_1.deepMerge)(originalPageEvent, extraProps);
                const drivers = (0, index_1.parseDriverShortcut)(opts.drivers);
                if ((0, index_1.isDebug)()) {
                    console.log(`Sending page event to ${drivers.map(d => d.type)}`, pageEvent);
                }
                for (const driver of drivers) {
                    if ((0, index_1.isDebug)()) {
                        console.log(`Sending data to ${driver.type}(${driver.opts ? JSON.stringify(driver.opts) : ""})`);
                    }
                    (0, index_1.getEventHandler)(driver)(pageEvent, { fetch })
                        .catch(e => {
                        if (opts.errorHandler) {
                            opts.errorHandler(driver.type, e);
                        }
                        else {
                            console.warn(`[WARN] Can't send data to ${driver.type}`, e);
                        }
                    })
                        .then(r => {
                        if ((0, index_1.isDebug)()) {
                            console.info(`${driver.type}(${driver.opts ? JSON.stringify(driver.opts) : ""}) finished successfully`, r);
                        }
                    });
                }
                return res;
            }
            catch (e) {
                console.error();
                return res;
            }
        },
    };
}
exports.eventCollector = eventCollector;
function getDynamicOption(o, defaultVal) {
    if (o === undefined) {
        return () => defaultVal;
    }
    else if (typeof o === "function") {
        return o;
    }
    return () => o;
}
function collectEvents(opts) {
    return async (request, event) => {
        const response = opts.middleware
            ? (await opts.middleware(request, event)) || server_1.NextResponse.next()
            : server_1.NextResponse.next();
        return eventCollector(opts).nextJsPageMiddleware(request, response, opts);
    };
}
exports.collectEvents = collectEvents;
function collectApiHandler(opts) {
    return async (request, response) => {
        return eventCollector(opts).nextApiHandler(request, response, opts);
    };
}
exports.collectApiHandler = collectApiHandler;
/**
 * @deprecated use collectEvents instead
 */
exports.nextEventsCollectApi = collectApiHandler;
