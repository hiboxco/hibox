export declare function removeSuffix(str: string, suffix: string | string[]): string;
export declare type SanitizeOjectOpts = {
    undefs?: "remove" | "toNull";
    removeFunctions?: false;
};
/**
 * Removes all undefined values from object tree
 */
export declare function sanitizeObject(object: any, opts?: SanitizeOjectOpts): any;
export declare function renameProps(obj: any, rename: Record<keyof any, keyof any>): {};
export declare function removeProps<T extends keyof any = string>(obj: Record<keyof any, any>, ...props: T[]): Record<keyof any, any>;
export declare type PrefixMap<T> = {
    get(element: string): T | undefined;
};
export declare function createPrefixMap<T>(map: [string, T][]): PrefixMap<T>;
export declare function isObject(object: any): any;
export declare function deepSet(obj: any, _path: (keyof any)[], val: any): void;
export declare function deepDelete(obj: any, path: (keyof any)[]): void;
export declare function deepGet(obj: any, _path: (keyof any)[]): any;
export declare function deepClone(obj: any): any;
export declare function asArray<T>(v: T | T[]): T[];
export declare function splitObject<T, P extends keyof T>(obj: T, props: (P | (keyof any)[])[]): [Pick<T, P>, Omit<T, P>];
export declare function deepMerge(target: Record<keyof any, any>, ...sources: Record<keyof any, any>[]): Record<keyof any, any>;
export declare function mapKeys<K extends keyof any, N extends keyof any, V>(obj: Record<K, V>, f: (k: K) => N): Record<N, V>;
export declare function flatten(data: Record<keyof any, any>, opts?: {
    delimiter?: string;
    stopPaths?: (string | string[])[];
}): Record<string, string | boolean | number | null>;
