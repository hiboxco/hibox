"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultCollectApiRoute = exports.getQueryString = exports.getFullUrl = exports.isClickId = exports.isUtmCode = exports.isDefaultPort = exports.getEventHandler = exports.safeCall = exports.parseEventTypesMap = exports.randomId = exports.parseDriverShortcut = exports.getClickIdsFromQueryString = exports.getUtmsFromQueryString = exports.isDebug = exports.defaultPageEventProps = exports.getHostWithPort = exports.knownClickIdNames = exports.knownUtmCodeNames = exports.allDrivers = exports.nextCollectProtocolVersion = void 0;
const jitsu_1 = require("./drivers/jitsu");
const tools_1 = require("./tools");
const segment_1 = require("./drivers/segment");
const postgrest_1 = require("./drivers/postgrest");
const echo_1 = require("./drivers/echo");
exports.nextCollectProtocolVersion = "1";
exports.allDrivers = {
    jitsu: jitsu_1.jitsuDriver,
    segment: segment_1.segmentDriver,
    postgrest: postgrest_1.postgrestDriver,
    echo: echo_1.echoDriver,
    custom(opts, env) {
        return opts.handler;
    },
};
const _defaultUserProps = {
    anonymousId: true,
    id: true,
    email: true,
};
const defaultUserProps = Object.keys(_defaultUserProps);
exports.knownUtmCodeNames = ["utm_source", "utm_medium", "utm_campaign", "utm_term", "utm_content"];
const knownUtmCodeSet = new Set(exports.knownUtmCodeNames.map(m => m.toLowerCase()));
exports.knownClickIdNames = ["gclid", "fbclid", "dclid"];
const knownClickIdNamesSet = new Set(exports.knownClickIdNames.map(n => n.toLowerCase()));
function getHostWithPort(url) {
    return `${url.host}${url.port && ":" + url.port}`;
}
exports.getHostWithPort = getHostWithPort;
const _defaultPageEventProps = {
    httpMethod: true,
    timestamp: true,
    clickIds: true,
    eventId: true,
    eventType: true,
    host: true,
    ipAddress: true,
    localTimezoneOffset: true,
    path: true,
    queryString: true,
    referrer: true,
    screenResolution: true,
    title: true,
    url: true,
    user: true,
    userAgent: true,
    userLanguage: true,
    utms: true,
    viewportSize: true,
};
exports.defaultPageEventProps = Object.keys(_defaultPageEventProps);
function isDebug() {
    return !!process.env.NEXT_COLLECT_DEBUG;
}
exports.isDebug = isDebug;
function getUtmsFromQueryString(queryString) {
    return Object.entries(queryString)
        .filter(([name]) => isUtmCode(name))
        .reduce((res, [name, val]) => ({ ...res, [name.toLowerCase()]: val }), {});
}
exports.getUtmsFromQueryString = getUtmsFromQueryString;
function getClickIdsFromQueryString(queryString) {
    return Object.entries(queryString)
        .filter(([name]) => isClickId(name))
        .reduce((res, [name, val]) => ({ ...res, [name.toLowerCase()]: val }), {});
}
exports.getClickIdsFromQueryString = getClickIdsFromQueryString;
function parseDriverShortcut(drivers) {
    if (!drivers) {
        return [];
    }
    else if (typeof drivers === "string") {
        return [{ type: drivers, opts: {} }];
    }
    else if (typeof drivers === "function") {
        return [{ type: "custom", opts: { handler: drivers } }];
    }
    else if (Array.isArray(drivers)) {
        return drivers
            .filter(driver => !!driver)
            .map(driver => typeof driver === "string"
            ? { type: driver, opts: {} }
            : typeof driver === "function"
                ? { type: "custom", opts: { handler: driver } }
                : driver);
    }
    else {
        throw new Error(`Invalid type ${typeof drivers}`);
    }
}
exports.parseDriverShortcut = parseDriverShortcut;
function randomId() {
    return Math.random().toString(36).substring(2);
}
exports.randomId = randomId;
function parseEventTypesMap(map) {
    if (!map) {
        return () => "page_view";
    }
    else if (typeof map === "function") {
        return map;
    }
    else if (Array.isArray(map)) {
        const prefixMap = (0, tools_1.createPrefixMap)(map.map(el => (Array.isArray(el) ? [el] : Object.entries(el))).flat(1));
        return (route) => {
            return prefixMap.get(route) || null;
        };
    }
    else if (typeof map === "object") {
        const prefixMap = (0, tools_1.createPrefixMap)(Object.entries(map));
        return (route) => {
            return prefixMap.get(route) || null;
        };
    }
    else {
        throw new Error(`Wrong type ${typeof map}`);
    }
}
exports.parseEventTypesMap = parseEventTypesMap;
function safeCall(callable, message, defaultVal) {
    try {
        return callable();
    }
    catch (e) {
        console.error();
        return {};
    }
}
exports.safeCall = safeCall;
function getEventHandler(opts) {
    const driver = exports.allDrivers[opts.type];
    if (!driver) {
        throw new Error(`Unknown driver ${opts.type}`);
    }
    return driver(opts.opts || {});
}
exports.getEventHandler = getEventHandler;
function isDefaultPort(protocol, port) {
    return (protocol === "http" && port === "80") || (protocol === "https" && port === "443") ? undefined : port;
}
exports.isDefaultPort = isDefaultPort;
function isUtmCode(name) {
    return knownUtmCodeSet.has(name.toLowerCase());
}
exports.isUtmCode = isUtmCode;
function isClickId(name) {
    return knownClickIdNamesSet.has(name.toLowerCase());
}
exports.isClickId = isClickId;
function getFullUrl(url) {
    return `${url.protocol}://${getHostWithPort(url)}${url.path}${getQueryString(url)}`;
}
exports.getFullUrl = getFullUrl;
function getQueryString(url) {
    return Object.keys(url.queryString).length === 0
        ? ""
        : "?" +
            Object.entries(url.queryString)
                .map(([name, val]) => `${name}=${encodeURIComponent(val)}`)
                .join("&");
}
exports.getQueryString = getQueryString;
exports.defaultCollectApiRoute = "/api/collect";
