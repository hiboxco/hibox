export declare const nextCollectProtocolVersion = "1";
export declare type EventSinkDriverType = "jitsu" | "segment" | "custom" | "postgrest" | string;
export declare const allDrivers: Record<EventSinkDriverType, EventSinkDriver>;
export declare type EventSinkDriverOpts<O = any> = {
    type: EventSinkDriverType;
    opts?: O;
};
export declare type EventSinkContext = {
    fetch: typeof fetch;
};
export declare type EventHandler<O = any> = {
    (event: PageEvent, ctx: EventSinkContext): Promise<any>;
};
export declare type DriverEnvironment = {
    fetch: typeof fetch;
};
export declare type EventSinkDriver<O = any> = (opts: O, env?: DriverEnvironment) => EventHandler;
export declare type Function<Args, Res> = ((a: Args) => Res) | Res;
declare type EventTypeFunction = (route: string) => EventTypeResolution;
export declare type UserProperties = {
    anonymousId?: string;
    id?: string;
    email?: string;
};
export declare const knownUtmCodeNames: string[];
export declare type UtmCode = typeof knownUtmCodeNames[number] | `utm_${string}`;
export declare const knownClickIdNames: string[];
export declare type ClickId = typeof knownClickIdNames[number];
export declare type UrlProtocol = "http" | "https";
export declare type AbsoluteUrlPath = `/${string}`;
/**
 * Decomposed public url of request
 */
export declare type PublicUrl = {
    protocol: UrlProtocol;
    /**
     * Host without port
     */
    host: string;
    /**
     * Only present if port are not default (not 80 for http and not 443 for https)
     */
    port?: string;
    /**
     * All query parameters
     */
    queryString: Record<string, string>;
    /**
     * Path always starts from `/`. Duplicated slashes are removed, slash at the end is kept if present
     */
    path: AbsoluteUrlPath;
};
export declare function getHostWithPort(url: PublicUrl): string;
export declare const defaultPageEventProps: Array<keyof PageEventBase>;
export declare type PageEventBase<U extends {} = {}> = {
    timestamp: Date;
    eventId: string;
    eventType: string;
    ipAddress: string;
    user: UserProperties & U;
    userAgent?: string;
    host: string;
    path: string;
    queryString?: string;
    url: string;
    httpMethod: string;
    utms: Record<UtmCode, string>;
    clickIds: Record<ClickId, string>;
    referrer?: string;
    userLanguage?: string;
    title?: string;
    localTimezoneOffset?: number;
    screenResolution?: string;
    viewportSize?: string;
};
export declare type PageEvent<P extends {} = {}, U extends {} = {}> = PageEventBase<U> & P;
export declare type EventTypeResolution = "$skip" | null | string;
export declare type EventTypesMap = Record<AbsoluteUrlPath, EventTypeResolution> | ([string, EventTypeResolution] | Record<string, EventTypeResolution>)[];
export declare type ArrayOrSingleton<T> = T | T[];
export declare type DriversList = ArrayOrSingleton<EventSinkDriverType | EventHandler | EventSinkDriverOpts | undefined | null>;
export declare type CollectOpts = {
    drivers: DriversList;
    eventTypes?: EventTypeFunction | EventTypesMap;
    errorHandler?: (driverType: string, error: Error) => void;
};
/**
 * @deprecated, keep for backward compatibility
 */
export declare type EventSinkOpts = CollectOpts;
export declare function isDebug(): boolean;
export declare function getUtmsFromQueryString(queryString: Record<string, string>): Record<UtmCode, string>;
export declare function getClickIdsFromQueryString(queryString: Record<string, string>): Record<ClickId, string>;
export declare function parseDriverShortcut(drivers: DriversList): EventSinkDriverOpts[];
export declare function randomId(): string;
export declare function parseEventTypesMap(map: EventTypesMap | EventTypeFunction | undefined): EventTypeFunction;
export declare function safeCall<T>(callable: () => T, message: string, defaultVal: T): {};
export declare function getEventHandler(opts: EventSinkDriverOpts): EventHandler;
export declare function isDefaultPort(protocol: UrlProtocol, port?: string): string | undefined;
export declare function isUtmCode(name: string): boolean;
export declare function isClickId(name: string): boolean;
export declare function getFullUrl(url: PublicUrl): string;
export declare function getQueryString(url: PublicUrl): string;
export declare const defaultCollectApiRoute = "/api/collect";
export declare type ClientSideCollectRequest = {
    event: Partial<PageEvent> & Record<keyof any, any>;
};
export declare type ClientSideCollectResponse = {
    successful: boolean;
};
export {};
