const domain = 'https://js.driftt.com';

/* eslint-disable */
const loadScript = () => {
  if (window.drift) return false;
  !function () {
    const t = window.driftt = window.drift = window.driftt || [];

    if (!t.init) {
      if (t.invoked) {
        return void (window.console && console.error && console.error('Drift snippet included twice.'));
      } //eslint-disable-next-line  @typescript-eslint/no-extra-semi


      ;
      t.invoked = !0, t.methods = ['identify', 'config', 'track', 'reset', 'debug', 'show', 'ping', 'page', 'hide', 'off', 'on'], t.factory = function (e) {
        return function () {
          const n = Array.prototype.slice.call(arguments);
          return n.unshift(e), t.push(n), t;
        };
      }, t.methods.forEach(function (e) {
        t[e] = t.factory(e);
      }), t.load = function (t) {
        var _i$parentNode;

        const e = 3e5,
              n = Math.ceil(new Date() / e) * e,
              o = document.createElement('script');
        o.type = 'text/javascript', o.async = !0, o.crossOrigin = 'anonymous', o.src = 'https://js.driftt.com/include/' + n + '/' + t + '.js';
        const i = document.getElementsByTagName('script')[0];
        (_i$parentNode = i.parentNode) === null || _i$parentNode === void 0 ? void 0 : _i$parentNode.insertBefore(o, i);
      };
    }
  }();
  return true;
};
/* eslint-enable */


const load = ({
  providerKey,
  setState,
  beforeInit = () => undefined,
  onReady = () => undefined
}) => {
  const loaded = loadScript(); // Continue as long as drift hasnâ€™t already been initialised.

  if (loaded) {
    beforeInit();
    window.drift.load(providerKey);
    window.drift.SNIPPET_VERSION = '0.3.1';
    window.drift.on('ready', () => {
      setState('complete');
      onReady();
    });
  }

  return loaded;
};

const open = () => window.drift.on('ready', api => api.showWelcomeMessage());

export default {
  domain,
  load,
  open
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm92aWRlcnMvZHJpZnQudHMiXSwibmFtZXMiOlsiZG9tYWluIiwibG9hZFNjcmlwdCIsIndpbmRvdyIsImRyaWZ0IiwidCIsImRyaWZ0dCIsImluaXQiLCJpbnZva2VkIiwiY29uc29sZSIsImVycm9yIiwibWV0aG9kcyIsImZhY3RvcnkiLCJlIiwibiIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsInB1c2giLCJmb3JFYWNoIiwibG9hZCIsIk1hdGgiLCJjZWlsIiwiRGF0ZSIsIm8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiYXN5bmMiLCJjcm9zc09yaWdpbiIsInNyYyIsImkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJwcm92aWRlcktleSIsInNldFN0YXRlIiwiYmVmb3JlSW5pdCIsInVuZGVmaW5lZCIsIm9uUmVhZHkiLCJsb2FkZWQiLCJTTklQUEVUX1ZFUlNJT04iLCJvbiIsIm9wZW4iLCJhcGkiLCJzaG93V2VsY29tZU1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUVBLE1BQU1BLE1BQU0sR0FBRyx1QkFBZjs7QUFXQTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxNQUFlO0FBQ2hDLE1BQUlDLE1BQU0sQ0FBQ0MsS0FBWCxFQUFrQixPQUFPLEtBQVA7QUFFbEIsR0FBRSxZQUFXO0FBQ1gsVUFBTUMsQ0FBQyxHQUFJRixNQUFNLENBQUNHLE1BQVAsR0FBZ0JILE1BQU0sQ0FBQ0MsS0FBUCxHQUFlRCxNQUFNLENBQUNHLE1BQVAsSUFBaUIsRUFBM0Q7O0FBQ0EsUUFBSSxDQUFDRCxDQUFDLENBQUNFLElBQVAsRUFBYTtBQUNYLFVBQUlGLENBQUMsQ0FBQ0csT0FBTixFQUFlO0FBQ2IsZUFBTyxNQUNMTCxNQUFNLENBQUNNLE9BQVAsSUFDQUEsT0FBTyxDQUFDQyxLQURSLElBRUFELE9BQU8sQ0FBQ0MsS0FB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MEJFLEdBQUQsSUFDdkJBLEdBQUcsQ0FBQ0Msa0JBQUosRUFERixDQURGOztBQUtBLGVBQWU7QUFDYi9DLEVBQUFBLE1BRGE7QUFFYnNCLEVBQUFBLElBRmE7QUFHYnVCLEVBQUFBO0FBSGEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmNvbnN0IGRvbWFpbiA9ICdodHRwczovL2pzLmRyaWZ0dC5jb20nXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIGRyaWZ0OiBhbnlcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZHJpZnR0OiBhbnlcbiAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgbG9hZFNjcmlwdCA9ICgpOiBib29sZWFuID0+IHtcbiAgaWYgKHdpbmRvdy5kcmlmdCkgcmV0dXJuIGZhbHNlXG5cbiAgIShmdW5jdGlvbigpIHtcbiAgICBjb25zdCB0ID0gKHdpbmRvdy5kcmlmdHQgPSB3aW5kb3cuZHJpZnQgPSB3aW5kb3cuZHJpZnR0IHx8IFtdKVxuICAgIGlmICghdC5pbml0KSB7XG4gICAgICBpZiAodC5pbnZva2VkKSB7XG4gICAgICAgIHJldHVybiB2b2lkIChcbiAgICAgICAgICB3aW5kb3cuY29uc29sZSAmJlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IgJiZcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdEcmlmdCBzbmlwcGV0IGluY2x1ZGVkIHR3aWNlLicpXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIC8vZXNsaW50LWRpc2FibGUtbmV4dC1saW5lICBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXh0cmEtc2VtaVxuICAgICAgOyh0Lmludm9rZWQgPSAhMCksXG4gICAgICAgICh0Lm1ldGhvZHMgPSBbXG4gICAgICAgICAgJ2lkZW50aWZ5JyxcbiAgICAgICAgICAnY29uZmlnJyxcbiAgICAgICAgICAndHJhY2snLFxuICAgICAgICAgICdyZXNldCcsXG4gICAgICAgICAgJ2RlYnVnJyxcbiAgICAgICAgICAnc2hvdycsXG4gICAgICAgICAgJ3BpbmcnLFxuICAgICAgICAgICdwYWdlJyxcbiAgICAgICAgICAnaGlkZScsXG4gICAgICAgICAgJ29mZicsXG4gICAgICAgICAgJ29uJ1xuICAgICAgICBdKSxcbiAgICAgICAgKHQuZmFjdG9yeSA9IGZ1bmN0aW9uKGU6IGFueSkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgICAgICByZXR1cm4gbi51bnNoaWZ0KGUpLCB0LnB1c2gobiksIHRcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICB0Lm1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihlOiBhbnkpIHtcbiAgICAgICAgICB0W2VdID0gdC5mYWN0b3J5KGUpXG4gICAgICAgIH0pLFxuICAgICAgICAodC5sb2FkID0gZnVuY3Rpb24odDogYW55KSB7XG4gICAgICAgICAgY29uc3QgZSA9IDNlNSxcbiAgICAgICAgICAgIG4gPSBNYXRoLmNlaWwoKG5ldyBEYXRlKCkgYXMgYW55KSAvIGUpICogZSxcbiAgICAgICAgICAgIG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgICAgIDsoby50eXBlID0gJ3RleHQvamF2YXNjcmlwdCcpLFxuICAgICAgICAgICAgKG8uYXN5bmMgPSAhMCksXG4gICAgICAgICAgICAoby5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnKSxcbiAgICAgICAgICAgIChvLnNyYyA9ICdodHRwczovL2pzLmRyaWZ0dC5jb20vaW5jbHVkZS8nICsgbiArICcvJyArIHQgKyAnLmpzJylcbiAgICAgICAgICBjb25zdCBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdXG4gICAgICAgICAgaS5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUobywgaSlcbiAgICAgICAgfSlcbiAgICB9XG4gIH0pKClcblxuICByZXR1cm4gdHJ1ZVxufVxuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5jb25zdCBsb2FkID0gKHtcbiAgcHJvdmlkZXJLZXksXG4gIHNldFN0YXRlLFxuICBiZWZvcmVJbml0ID0gKCkgPT4gdW5kZWZpbmVkLFxuICBvblJlYWR5ID0gKCkgPT4gdW5kZWZpbmVkXG59OiB7XG4gIHByb3ZpZGVyS2V5OiBzdHJpbmdcbiAgc2V0U3RhdGU6IChzdGF0ZTogU3RhdGUpID0+IHZvaWRcbiAgYmVmb3JlSW5pdD86ICgpID0+IHZvaWRcbiAgb25SZWFkeT86ICgpID0+IHZvaWRcbn0pOiBib29sZWFuID0+IHtcbiAgY29uc3QgbG9hZGVkID0gbG9hZFNjcmlwdCgpXG5cbiAgLy8gQ29udGludWUgYXMgbG9uZyBhcyBkcmlmdCBoYXNu4oCZdCBhbHJlYWR5IGJlZW4gaW5pdGlhbGlzZWQuXG4gIGlmIChsb2FkZWQpIHtcbiAgICBiZWZvcmVJbml0KClcbiAgICB3aW5kb3cuZHJpZnQubG9hZChwcm92aWRlcktleSlcbiAgICB3aW5kb3cuZHJpZnQuU05JUFBFVF9WRVJTSU9OID0gJzAuMy4xJ1xuICAgIHdpbmRvdy5kcmlmdC5vbigncmVhZHknLCAoKSA9PiB7XG4gICAgICBzZXRTdGF0ZSgnY29tcGxldGUnKVxuICAgICAgb25SZWFkeSgpXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBsb2FkZWRcbn1cblxuY29uc3Qgb3BlbiA9ICgpOiB2b2lkID0+XG4gIHdpbmRvdy5kcmlmdC5vbigncmVhZHknLCAoYXBpOiB7IHNob3dXZWxjb21lTWVzc2FnZTogKCkgPT4gdm9pZCB9KSA9PlxuICAgIGFwaS5zaG93V2VsY29tZU1lc3NhZ2UoKVxuICApXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZG9tYWluLFxuICBsb2FkLFxuICBvcGVuXG59XG4iXX0=