import waitForLoad from "../utils/waitForLoad";
const domain = 'https://widget.intercom.io';

/* eslint-disable */
const loadScript = appId => {
  if (window.Intercom) return false;

  (function () {
    var w = window;
    var ic = w.Intercom;

    if (typeof ic === 'function') {
      ic('reattach_activator');
      ic('update', window.intercomSettings);
    } else {
      var d = document;

      var i = function () {
        i.c(arguments);
      };

      i.q = [];

      i.c = function (args) {
        i.q.push(args);
      };

      w.Intercom = i;

      const l = () => {
        var _x$parentNode;

        var s = d.createElement('script');
        s.type = 'text/javascript';
        s.async = true;
        s.src = `${domain}/widget/${appId}`;
        var x = d.getElementsByTagName('script')[0];
        (_x$parentNode = x.parentNode) === null || _x$parentNode === void 0 ? void 0 : _x$parentNode.insertBefore(s, x);
      };

      l();
    }
  })();

  return true;
};
/* eslint-enable */


const load = ({
  providerKey,
  setState,
  beforeInit = () => undefined,
  onReady = () => undefined
}) => {
  const loaded = loadScript(providerKey); // Continue as long as userlike hasnâ€™t already been initialised.

  if (loaded) {
    beforeInit();
    window.Intercom('boot', {
      app_id: providerKey
    });
    waitForLoad(() => window.Intercom.booted, // Allow intercom to complete loading before removing fake widget
    () => setTimeout(() => {
      setState('complete');
      onReady();
    }, 2000));
  }

  return loaded;
};

const open = () => window.Intercom('show');

export default {
  domain,
  load,
  open
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm92aWRlcnMvaW50ZXJjb20udHMiXSwibmFtZXMiOlsid2FpdEZvckxvYWQiLCJkb21haW4iLCJsb2FkU2NyaXB0IiwiYXBwSWQiLCJ3aW5kb3ciLCJJbnRlcmNvbSIsInciLCJpYyIsImludGVyY29tU2V0dGluZ3MiLCJkIiwiZG9jdW1lbnQiLCJpIiwiYyIsImFyZ3VtZW50cyIsInEiLCJhcmdzIiwicHVzaCIsImwiLCJzIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJhc3luYyIsInNyYyIsIngiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJsb2FkIiwicHJvdmlkZXJLZXkiLCJzZXRTdGF0ZSIsImJlZm9yZUluaXQiLCJ1bmRlZmluZWQiLCJvblJlYWR5IiwibG9hZGVkIiwiYXBwX2lkIiwiYm9vdGVkIiwic2V0VGltZW91dCIsIm9wZW4iXSwibWFwcGluZ3MiOiJBQUNBLE9BQU9BLFdBQVA7QUFFQSxNQUFNQyxNQUFNLEdBQUcsNEJBQWY7O0FBVUE7QUFDQSxNQUFNQyxVQUFVLEdBQUlDLEtBQUQsSUFBNEI7QUFDN0MsTUFBSUMsTUFBTSxDQUFDQyxRQUFYLEVBQXFCLE9BQU8sS0FBUDs7QUFDcEIsR0FBQyxZQUFXO0FBQ1gsUUFBSUMsQ0FBQyxHQUFHRixNQUFSO0FBQ0EsUUFBSUcsRUFBRSxHQUFHRCxDQUFDLENBQUNELFFBQVg7O0FBQ0EsUUFBSSxPQUFPRSxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUJBLE1BQUFBLEVBQUUsQ0FBQyxvQkFBRCxDQUFGO0FBQ0FBLE1BQUFBLEVBQUUsQ0FBQyxRQUFELEVBQVdILE1BQU0sQ0FBQ0ksZ0JBQWxCLENBQUY7QUFDRCxLQUhELE1BR087QUFDTCxVQUFJQyxDQUFDLEdBQUdDLFFBQVI7O0FBQ0EsVUFBSUMsQ0FBTSxHQUFHLFlBQVc7QUFDdEJBLFFBQUFBLENBQUMsQ0FBQ0MsQ0FBRixDQUFJQyxTQUFKO0FBQ0QsT0FGRDs7QUFHQUYsTUFBQUEsQ0FBQyxDQUFDRyxDQUFGLEdBQU0sRUFBTjs7QUFDQUgsTUFBQUEsQ0FBQyxDQUFDQyxDQUFGLEdBQU0sVUFBU0csSUFBVCxFQUFvQjtBQUN4QkosUUFBQUEsQ0FBQyxDQUFDRyxDQUFGLENBQUlFLElBQUosQ0FBU0QsSUFBVDtBQUNELE9BRkQ7O0FBR0FULE1BQUFBLENBQUMsQ0FBQ0QsUUFBRixHQUFhTSxDQUFiOztBQUNBLFlBQU1NLENBQUMsR0FBRyxNQUFNO0FBQUE7O0FBQ2QsWUFBSUMsQ0FBQyxHQUFHVCxDQUFDLENBQUNVLGFBQUYsQ0FBZ0IsUUFBaEIsQ0FBUjtBQUNBRCxRQUFBQSxDQUFDLENBQUNFLElBQUYsR0FBUyxpQkFBVDtBQUNBRixRQUFBQSxDQUFDLENBQUNHLEtBQUYsR0FBVSxJQUFWO0FBQ0FILFFBQUFBLENBQUMsQ0FBQ0ksR0FBRixHQUFTLEdBQUVyQixNQUFPLFdBQVVFLEtBQU0sRUFBbEM7QUFDQSxZQUFJb0IsQ0FBQyxHQUFHZCxDQUFDLENBQUNlLG9CQUFGLENBQXVCLFFBQXZCLEVBQWlDLENBQWpDLENBQVI7QUFDQSx5QkFBQUQsQ0FBQyxDQUFDRSxVQUFGLGdFQUFjQyxZQUFkLENBQTJCUixDQUEzQixFQUE4QkssQ0FBOUI7QUFDRCxPQVBEOztBQVFBTixNQUFBQSxDQUFDO0FBQ0Y7QUFDRixHQTFCQTs7QUEyQkQsU0FBTyxJQUFQO0FBQ0QsQ0E5QkQ7QUErQkE7OztBQUVBLE1BQU1VLElBQUksR0FBRyxDQUFDO0FBQ1pDLEVBQUFBLFdBRFk7QUFFWkMsRUFBQUEsUUFGWTtBQUdaQyxFQUFBQSxVQUFVLEdBQUcsTUFBTUMsU0FIUDtBQUlaQyxFQUFBQSxPQUFPLEdBQUcsTUFBTUQ7QUFKSixDQUFELEtBVUU7QUFDYixRQUFNRSxNQUFNLEdBQUcvQixVQUFVLENBQUMwQixXQUFELENBQXpCLENBRGEsQ0FHYjs7QUFDQSxNQUFJSyxNQUFKLEVBQVk7QUFDVkgsSUFBQUEsVUFBVTtBQUNWMUIsSUFBQUEsTUFBTSxDQUFDQyxRQUFQLENBQWdCLE1BQWhCLEVBQXdCO0FBQUU2QixNQUFBQSxNQUFNLEVBQUVOO0FBQVYsS0FBeEI7QUFDQTVCLElBQUFBLFdBQVcsQ0FDVCxNQUFNSSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0I4QixNQURiLEVBRVQ7QUFDQSxVQUNFQyxVQUFVLENBQUMsTUFBTTtBQUNmUCxNQUFBQSxRQUFRLENBQUMsVUFBRCxDQUFSO0FBQ0FHLE1BQUFBLE9BQU87QUFDUixLQUhTLEVBR1AsSUFITyxDQUpILENBQVg7QUFTRDs7QUFFRCxTQUFPQyxNQUFQO0FBQ0QsQ0E3QkQ7O0FBK0JBLE1BQU1JLElBQUksR0FBRyxNQUFZakMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLE1BQWhCLENBQXpCOztBQUVBLGVBQWU7QUFDYkosRUFBQUEsTUFEYTtBQUViMEIsRUFBQUEsSUFGYTtBQUdiVSxFQUFBQTtBQUhhLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHdhaXRGb3JMb2FkIGZyb20gJy4uL3V0aWxzL3dhaXRGb3JMb2FkJ1xuXG5jb25zdCBkb21haW4gPSAnaHR0cHM6Ly93aWRnZXQuaW50ZXJjb20uaW8nXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgLy9lc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgIEludGVyY29tOiBhbnlcbiAgICBpbnRlcmNvbVNldHRpbmdzOiAoKSA9PiB2b2lkXG4gIH1cbn1cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNvbnN0IGxvYWRTY3JpcHQgPSAoYXBwSWQ6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICBpZiAod2luZG93LkludGVyY29tKSByZXR1cm4gZmFsc2VcbiAgOyhmdW5jdGlvbigpIHtcbiAgICB2YXIgdyA9IHdpbmRvd1xuICAgIHZhciBpYyA9IHcuSW50ZXJjb21cbiAgICBpZiAodHlwZW9mIGljID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpYygncmVhdHRhY2hfYWN0aXZhdG9yJylcbiAgICAgIGljKCd1cGRhdGUnLCB3aW5kb3cuaW50ZXJjb21TZXR0aW5ncylcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGQgPSBkb2N1bWVudFxuICAgICAgdmFyIGk6IGFueSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpLmMoYXJndW1lbnRzKVxuICAgICAgfVxuICAgICAgaS5xID0gW11cbiAgICAgIGkuYyA9IGZ1bmN0aW9uKGFyZ3M6IGFueSkge1xuICAgICAgICBpLnEucHVzaChhcmdzKVxuICAgICAgfVxuICAgICAgdy5JbnRlcmNvbSA9IGlcbiAgICAgIGNvbnN0IGwgPSAoKSA9PiB7XG4gICAgICAgIHZhciBzID0gZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgICBzLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICBzLmFzeW5jID0gdHJ1ZVxuICAgICAgICBzLnNyYyA9IGAke2RvbWFpbn0vd2lkZ2V0LyR7YXBwSWR9YFxuICAgICAgICB2YXIgeCA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdXG4gICAgICAgIHgucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKHMsIHgpXG4gICAgICB9XG4gICAgICBsKClcbiAgICB9XG4gIH0pKClcbiAgcmV0dXJuIHRydWVcbn1cbi8qIGVzbGludC1lbmFibGUgKi9cblxuY29uc3QgbG9hZCA9ICh7XG4gIHByb3ZpZGVyS2V5LFxuICBzZXRTdGF0ZSxcbiAgYmVmb3JlSW5pdCA9ICgpID0+IHVuZGVmaW5lZCxcbiAgb25SZWFkeSA9ICgpID0+IHVuZGVmaW5lZFxufToge1xuICBwcm92aWRlcktleTogc3RyaW5nXG4gIHNldFN0YXRlOiAoc3RhdGU6IFN0YXRlKSA9PiB2b2lkXG4gIGJlZm9yZUluaXQ/OiAoKSA9PiB2b2lkXG4gIG9uUmVhZHk/OiAoKSA9PiB2b2lkXG59KTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGxvYWRlZCA9IGxvYWRTY3JpcHQocHJvdmlkZXJLZXkpXG5cbiAgLy8gQ29udGludWUgYXMgbG9uZyBhcyB1c2VybGlrZSBoYXNu4oCZdCBhbHJlYWR5IGJlZW4gaW5pdGlhbGlzZWQuXG4gIGlmIChsb2FkZWQpIHtcbiAgICBiZWZvcmVJbml0KClcbiAgICB3aW5kb3cuSW50ZXJjb20oJ2Jvb3QnLCB7IGFwcF9pZDogcHJvdmlkZXJLZXkgfSlcbiAgICB3YWl0Rm9yTG9hZChcbiAgICAgICgpID0+IHdpbmRvdy5JbnRlcmNvbS5ib290ZWQsXG4gICAgICAvLyBBbGxvdyBpbnRlcmNvbSB0byBjb21wbGV0ZSBsb2FkaW5nIGJlZm9yZSByZW1vdmluZyBmYWtlIHdpZGdldFxuICAgICAgKCkgPT5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc2V0U3RhdGUoJ2NvbXBsZXRlJylcbiAgICAgICAgICBvblJlYWR5KClcbiAgICAgICAgfSwgMjAwMClcbiAgICApXG4gIH1cblxuICByZXR1cm4gbG9hZGVkXG59XG5cbmNvbnN0IG9wZW4gPSAoKTogdm9pZCA9PiB3aW5kb3cuSW50ZXJjb20oJ3Nob3cnKVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRvbWFpbixcbiAgbG9hZCxcbiAgb3BlblxufVxuIl19