"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const domain = 'https://beacon-v2.helpscout.net';

/* eslint-disable */
const loadScript = () => {
  if (window.Beacon) return false;

  (function (e, t, n) {
    function a() {
      var _e$parentNode;

      const e = t.getElementsByTagName('script')[0],
            n = t.createElement('script');
      n.async = !0, n.src = domain, (_e$parentNode = e.parentNode) === null || _e$parentNode === void 0 ? void 0 : _e$parentNode.insertBefore(n, e);
    }

    if (e.Beacon = n = function (t, n, a) {
      e.Beacon.readyQueue.push({
        method: t,
        options: n,
        data: a
      });
    }, n.readyQueue = [], 'complete' === t.readyState) return a();
    e.attachEvent ? e.attachEvent('onload', a) : e.addEventListener('load', a, !1);
  })(window, document, window.Beacon || function () {});

  return true;
};
/* eslint-enable */


const load = ({
  providerKey,
  setState,
  beforeInit = () => undefined,
  onReady = () => undefined
}) => {
  const loaded = loadScript(); // Continue as long as helpscout hasnâ€™t already been initialised.

  if (loaded) {
    beforeInit();
    window.Beacon('init', providerKey);
    window.Beacon('once', 'ready', () => // Allow helpscout to complete loading before removing fake widget
    setTimeout(() => {
      setState('complete');
      onReady();
    }, 2000));
  }

  return loaded;
};

const open = () => window.Beacon('open');

var _default = {
  domain,
  load,
  open
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm92aWRlcnMvaGVscFNjb3V0LnRzIl0sIm5hbWVzIjpbImRvbWFpbiIsImxvYWRTY3JpcHQiLCJ3aW5kb3ciLCJCZWFjb24iLCJlIiwidCIsIm4iLCJhIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50IiwiYXN5bmMiLCJzcmMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicmVhZHlRdWV1ZSIsInB1c2giLCJtZXRob2QiLCJvcHRpb25zIiwiZGF0YSIsInJlYWR5U3RhdGUiLCJhdHRhY2hFdmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb2N1bWVudCIsImxvYWQiLCJwcm92aWRlcktleSIsInNldFN0YXRlIiwiYmVmb3JlSW5pdCIsInVuZGVmaW5lZCIsIm9uUmVhZHkiLCJsb2FkZWQiLCJzZXRUaW1lb3V0Iiwib3BlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHLGlDQUFmOztBQVdBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLE1BQWU7QUFDaEMsTUFBSUMsTUFBTSxDQUFDQyxNQUFYLEVBQW1CLE9BQU8sS0FBUDs7QUFDbEIsR0FBQyxVQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZUMsQ0FBZixFQUFrQjtBQUNsQixhQUFTQyxDQUFULEdBQWE7QUFBQTs7QUFDWCxZQUFNSCxDQUFDLEdBQUdDLENBQUMsQ0FBQ0csb0JBQUYsQ0FBdUIsUUFBdkIsRUFBaUMsQ0FBakMsQ0FBVjtBQUFBLFlBQ0VGLENBQUMsR0FBR0QsQ0FBQyxDQUFDSSxhQUFGLENBQWdCLFFBQWhCLENBRE47QUFFRUgsTUFBQUEsQ0FBQyxDQUFDSSxLQUFGLEdBQVUsQ0FBQyxDQUFaLEVBQWlCSixDQUFDLENBQUNLLEdBQUYsR0FBUVgsTUFBekIsbUJBQWtDSSxDQUFDLENBQUNRLFVBQXBDLGtEQUFrQyxjQUFjQyxZQUFkLENBQTJCUCxDQUEzQixFQUE4QkYsQ0FBOUIsQ0FBbEM7QUFDRjs7QUFDRCxRQUNJQSxDQUFDLENBQUNELE1BQUYsR0FBV0csQ0FBQyxHQUFHLFVBQVNELENBQVQsRUFBaUJDLENBQWpCLEVBQXlCQyxDQUF6QixFQUFpQztBQUNoREgsTUFBQUEsQ0FBQyxDQUFDRCxNQUFGLENBQVNXLFVBQVQsQ0FBb0JDLElBQXBCLENBQXlCO0FBQUVDLFFBQUFBLE1BQU0sRUFBRVgsQ0FBVjtBQUFhWSxRQUFBQSxPQUFPLEVBQUVYLENBQXRCO0FBQXlCWSxRQUFBQSxJQUFJLEVBQUVYO0FBQS9CLE9BQXpCO0FBQ0QsS0FGQSxFQUdBRCxDQUFDLENBQUNRLFVBQUYsR0FBZSxFQUhmLEVBSUQsZUFBZVQsQ0FBQyxDQUFDYyxVQUxuQixFQU9FLE9BQU9aLENBQUMsRUFBUjtBQUNGSCxJQUFBQSxDQUFDLENBQUNnQixXQUFGLEdBQ0loQixDQUFDLENBQUNnQixXQUFGLENBQWMsUUFBZCxFQUF3QmIsQ0FBeEIsQ0FESixHQUVJSCxDQUFDLENBQUNpQixnQkFBRixDQUFtQixNQUFuQixFQUEyQmQsQ0FBM0IsRUFBOEIsQ0FBQyxDQUEvQixDQUZKO0FBR0QsR0FqQkEsRUFpQkVMLE1BakJGLEVBaUJVb0IsUUFqQlYsRUFpQm9CcEIsTUFBTSxDQUFDQyxNQUFQLElBQWlCLFlBQVcsQ0FBRSxDQWpCbEQ7O0FBbUJELFNBQU8sSUFBUDtBQUNELENBdEJEO0FBdUJBOzs7QUFFQSxNQUFNb0IsSUFBSSxHQUFHLENBQUM7QUFDWkMsRUFBQUEsV0FEWTtBQUVaQyxFQUFBQSxRQUZZO0FBR1pDLEVBQUFBLFVBQVUsR0FBRyxNQUFNQyxTQUhQO0FBSVpDLEVBQUFBLE9BQU8sR0FBRyxNQUFNRDtBQUpKLENBQUQsS0FVRTtBQUNiLFFBQU1FLE1BQU0sR0FBRzVCLFVBQVUsRUFBekIsQ0FEYSxDQUdiOztBQUNBLE1BQUk0QixNQUFKLEVBQVk7QUFDVkgsSUFBQUEsVUFBVTtBQUNWeEIsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWMsTUFBZCxFQUFzQnFCLFdBQXRCO0FBQ0F0QixJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxNQUFkLEVBQXNCLE9BQXRCLEVBQStCLE1BQzdCO0FBQ0EyQixJQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNmTCxNQUFBQSxRQUFRLENBQUMsVUFBRCxDQUFSO0FBQ0FHLE1BQUFBLE9BQU87QUFDUixLQUhTLEVBR1AsSUFITyxDQUZaO0FBT0Q7O0FBRUQsU0FBT0MsTUFBUDtBQUNELENBM0JEOztBQTZCQSxNQUFNRSxJQUFJLEdBQUcsTUFBWTdCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLE1BQWQsQ0FBekI7O2VBRWU7QUFDYkgsRUFBQUEsTUFEYTtBQUVidUIsRUFBQUEsSUFGYTtBQUdiUSxFQUFBQTtBQUhhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uL3R5cGVzJ1xuXG5jb25zdCBkb21haW4gPSAnaHR0cHM6Ly9iZWFjb24tdjIuaGVscHNjb3V0Lm5ldCdcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgQmVhY29uOiBhbnlcbiAgICAvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgYXR0YWNoRXZlbnQ6IGFueVxuICB9XG59XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBsb2FkU2NyaXB0ID0gKCk6IGJvb2xlYW4gPT4ge1xuICBpZiAod2luZG93LkJlYWNvbikgcmV0dXJuIGZhbHNlXG4gIDsoZnVuY3Rpb24oZSwgdCwgbikge1xuICAgIGZ1bmN0aW9uIGEoKSB7XG4gICAgICBjb25zdCBlID0gdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0sXG4gICAgICAgIG4gPSB0LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXG4gICAgICA7KG4uYXN5bmMgPSAhMCksIChuLnNyYyA9IGRvbWFpbiksIGUucGFyZW50Tm9kZT8uaW5zZXJ0QmVmb3JlKG4sIGUpXG4gICAgfVxuICAgIGlmIChcbiAgICAgICgoZS5CZWFjb24gPSBuID0gZnVuY3Rpb24odDogYW55LCBuOiBhbnksIGE6IGFueSkge1xuICAgICAgICBlLkJlYWNvbi5yZWFkeVF1ZXVlLnB1c2goeyBtZXRob2Q6IHQsIG9wdGlvbnM6IG4sIGRhdGE6IGEgfSlcbiAgICAgIH0pLFxuICAgICAgKG4ucmVhZHlRdWV1ZSA9IFtdKSxcbiAgICAgICdjb21wbGV0ZScgPT09IHQucmVhZHlTdGF0ZSlcbiAgICApXG4gICAgICByZXR1cm4gYSgpXG4gICAgZS5hdHRhY2hFdmVudFxuICAgICAgPyBlLmF0dGFjaEV2ZW50KCdvbmxvYWQnLCBhKVxuICAgICAgOiBlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBhLCAhMSlcbiAgfSkod2luZG93LCBkb2N1bWVudCwgd2luZG93LkJlYWNvbiB8fCBmdW5jdGlvbigpIHt9KVxuXG4gIHJldHVybiB0cnVlXG59XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmNvbnN0IGxvYWQgPSAoe1xuICBwcm92aWRlcktleSxcbiAgc2V0U3RhdGUsXG4gIGJlZm9yZUluaXQgPSAoKSA9PiB1bmRlZmluZWQsXG4gIG9uUmVhZHkgPSAoKSA9PiB1bmRlZmluZWRcbn06IHtcbiAgcHJvdmlkZXJLZXk6IHN0cmluZ1xuICBzZXRTdGF0ZTogKHN0YXRlOiBTdGF0ZSkgPT4gdm9pZFxuICBiZWZvcmVJbml0PzogKCkgPT4gdm9pZFxuICBvblJlYWR5PzogKCkgPT4gdm9pZFxufSk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBsb2FkZWQgPSBsb2FkU2NyaXB0KClcblxuICAvLyBDb250aW51ZSBhcyBsb25nIGFzIGhlbHBzY291dCBoYXNu4oCZdCBhbHJlYWR5IGJlZW4gaW5pdGlhbGlzZWQuXG4gIGlmIChsb2FkZWQpIHtcbiAgICBiZWZvcmVJbml0KClcbiAgICB3aW5kb3cuQmVhY29uKCdpbml0JywgcHJvdmlkZXJLZXkpXG4gICAgd2luZG93LkJlYWNvbignb25jZScsICdyZWFkeScsICgpID0+XG4gICAgICAvLyBBbGxvdyBoZWxwc2NvdXQgdG8gY29tcGxldGUgbG9hZGluZyBiZWZvcmUgcmVtb3ZpbmcgZmFrZSB3aWRnZXRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRTdGF0ZSgnY29tcGxldGUnKVxuICAgICAgICBvblJlYWR5KClcbiAgICAgIH0sIDIwMDApXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxvYWRlZFxufVxuXG5jb25zdCBvcGVuID0gKCk6IHZvaWQgPT4gd2luZG93LkJlYWNvbignb3BlbicpXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZG9tYWluLFxuICBsb2FkLFxuICBvcGVuXG59XG4iXX0=