"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicApiResponseProcessor = exports.BasicApiRequestFactory = void 0;
const baseapi_1 = require("./baseapi");
const http_1 = require("../http/http");
const ObjectSerializer_1 = require("../models/ObjectSerializer");
const exception_1 = require("./exception");
const util_1 = require("../util");
class BasicApiRequestFactory extends baseapi_1.BaseAPIRequestFactory {
    archive(externalEventId, externalAccountId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (externalEventId === null || externalEventId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "archive", "externalEventId");
            }
            if (externalAccountId === null || externalAccountId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "archive", "externalAccountId");
            }
            const localVarPath = '/marketing/v3/marketing-events/events/{externalEventId}'
                .replace('{' + 'externalEventId' + '}', encodeURIComponent(String(externalEventId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            if (externalAccountId !== undefined) {
                requestContext.setQueryParam("externalAccountId", ObjectSerializer_1.ObjectSerializer.serialize(externalAccountId, "string", ""));
            }
            let authMethod = null;
            authMethod = _config.authMethods["hapikey"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            authMethod = _config.authMethods["oauth2"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    create(marketingEventCreateRequestParams, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (marketingEventCreateRequestParams === null || marketingEventCreateRequestParams === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "create", "marketingEventCreateRequestParams");
            }
            const localVarPath = '/marketing/v3/marketing-events/events';
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(marketingEventCreateRequestParams, "MarketingEventCreateRequestParams", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["hapikey"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            authMethod = _config.authMethods["oauth2"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    doCancel(externalEventId, externalAccountId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (externalEventId === null || externalEventId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "doCancel", "externalEventId");
            }
            if (externalAccountId === null || externalAccountId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "doCancel", "externalAccountId");
            }
            const localVarPath = '/marketing/v3/marketing-events/events/{externalEventId}/cancel'
                .replace('{' + 'externalEventId' + '}', encodeURIComponent(String(externalEventId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            if (externalAccountId !== undefined) {
                requestContext.setQueryParam("externalAccountId", ObjectSerializer_1.ObjectSerializer.serialize(externalAccountId, "string", ""));
            }
            let authMethod = null;
            authMethod = _config.authMethods["hapikey"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            authMethod = _config.authMethods["oauth2"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    getById(externalEventId, externalAccountId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (externalEventId === null || externalEventId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "getById", "externalEventId");
            }
            if (externalAccountId === null || externalAccountId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "getById", "externalAccountId");
            }
            const localVarPath = '/marketing/v3/marketing-events/events/{externalEventId}'
                .replace('{' + 'externalEventId' + '}', encodeURIComponent(String(externalEventId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            if (externalAccountId !== undefined) {
                requestContext.setQueryParam("externalAccountId", ObjectSerializer_1.ObjectSerializer.serialize(externalAccountId, "string", ""));
            }
            let authMethod = null;
            authMethod = _config.authMethods["hapikey"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            authMethod = _config.authMethods["oauth2"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    replace(externalEventId, marketingEventCreateRequestParams, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (externalEventId === null || externalEventId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "replace", "externalEventId");
            }
            if (marketingEventCreateRequestParams === null || marketingEventCreateRequestParams === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "replace", "marketingEventCreateRequestParams");
            }
            const localVarPath = '/marketing/v3/marketing-events/events/{externalEventId}'
                .replace('{' + 'externalEventId' + '}', encodeURIComponent(String(externalEventId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(marketingEventCreateRequestParams, "MarketingEventCreateRequestParams", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["hapikey"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            authMethod = _config.authMethods["oauth2"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    update(externalEventId, externalAccountId, marketingEventUpdateRequestParams, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (externalEventId === null || externalEventId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "update", "externalEventId");
            }
            if (externalAccountId === null || externalAccountId === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "update", "externalAccountId");
            }
            if (marketingEventUpdateRequestParams === null || marketingEventUpdateRequestParams === undefined) {
                throw new baseapi_1.RequiredError("BasicApi", "update", "marketingEventUpdateRequestParams");
            }
            const localVarPath = '/marketing/v3/marketing-events/events/{externalEventId}'
                .replace('{' + 'externalEventId' + '}', encodeURIComponent(String(externalEventId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PATCH);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            if (externalAccountId !== undefined) {
                requestContext.setQueryParam("externalAccountId", ObjectSerializer_1.ObjectSerializer.serialize(externalAccountId, "string", ""));
            }
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(marketingEventUpdateRequestParams, "MarketingEventUpdateRequestParams", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["hapikey"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            authMethod = _config.authMethods["oauth2"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
}
exports.BasicApiRequestFactory = BasicApiRequestFactory;
class BasicApiResponseProcessor {
    archive(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("204", response.httpStatusCode)) {
                return;
            }
            if (util_1.isCodeInRange("0", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "Error", "");
                throw new exception_1.ApiException(0, "An error occurred.", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return body;
            }
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    create(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventDefaultResponse", "");
                return body;
            }
            if (util_1.isCodeInRange("0", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "Error", "");
                throw new exception_1.ApiException(0, "An error occurred.", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventDefaultResponse", "");
                return body;
            }
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    doCancel(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventDefaultResponse", "");
                return body;
            }
            if (util_1.isCodeInRange("0", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "Error", "");
                throw new exception_1.ApiException(0, "An error occurred.", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventDefaultResponse", "");
                return body;
            }
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    getById(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventPublicReadResponse", "");
                return body;
            }
            if (util_1.isCodeInRange("0", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "Error", "");
                throw new exception_1.ApiException(0, "An error occurred.", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventPublicReadResponse", "");
                return body;
            }
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    replace(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventPublicDefaultResponse", "");
                return body;
            }
            if (util_1.isCodeInRange("0", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "Error", "");
                throw new exception_1.ApiException(0, "An error occurred.", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventPublicDefaultResponse", "");
                return body;
            }
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
    update(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventPublicDefaultResponse", "");
                return body;
            }
            if (util_1.isCodeInRange("0", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "Error", "");
                throw new exception_1.ApiException(0, "An error occurred.", body, response.headers);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "MarketingEventPublicDefaultResponse", "");
                return body;
            }
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!", yield response.getBodyAsAny(), response.headers);
        });
    }
}
exports.BasicApiResponseProcessor = BasicApiResponseProcessor;
//# sourceMappingURL=BasicApi.js.map